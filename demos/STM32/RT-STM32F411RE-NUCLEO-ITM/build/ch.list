
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <main>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 80001c0:	4a0e      	ldr	r2, [pc, #56]	; (80001fc <__init_array_end+0x3c>)

if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80001c2:	490f      	ldr	r1, [pc, #60]	; (8000200 <__init_array_end+0x40>)
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 80001c4:	6813      	ldr	r3, [r2, #0]


/*
 * Application entry point.
 */
int main(void) {
 80001c6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 80001ca:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80001ce:	6013      	str	r3, [r2, #0]

if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80001d0:	680b      	ldr	r3, [r1, #0]
 80001d2:	07db      	lsls	r3, r3, #31


/*
 * Application entry point.
 */
int main(void) {
 80001d4:	b087      	sub	sp, #28
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR

if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80001d6:	d51b      	bpl.n	8000210 <__init_array_end+0x50>
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <__init_array_end+0x44>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f013 0f01 	tst.w	r3, #1
    Debug_ITMDebug = 1;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <__init_array_end+0x48>)
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR

if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 80001e2:	d016      	beq.n	8000212 <__init_array_end+0x52>
    Debug_ITMDebug = 1;
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]


/*
 * Application entry point.
 */
int main(void) {
 80001e8:	4c08      	ldr	r4, [pc, #32]	; (800020c <__init_array_end+0x4c>)
 80001ea:	2053      	movs	r0, #83	; 0x53
//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
		while(*Buffer)
			Debug_ITMDebugOutputChar(*Buffer++);
 80001ec:	f002 f9f0 	bl	80025d0 <Debug_ITMDebugOutputChar>

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
		while(*Buffer)
 80001f0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d1f9      	bne.n	80001ec <main+0x2c>
 80001f8:	e00e      	b.n	8000218 <__init_array_end+0x58>
 80001fa:	bf00      	nop
 80001fc:	e0042004 	.word	0xe0042004
 8000200:	e000edf0 	.word	0xe000edf0
 8000204:	e0000e00 	.word	0xe0000e00
 8000208:	2000ae58 	.word	0x2000ae58
 800020c:	08005b00 	.word	0x08005b00
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 8000210:	4bba      	ldr	r3, [pc, #744]	; (80004fc <__init_array_end+0x33c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1e7      	bne.n	80001e8 <main+0x28>
 * @brief   ITM stream object initialization.
 *
 * @param[out] pitm      pointer to the @p ITMStream object to be initialized
 */
void itmObjectInit(ITMStream *pitm) {
   pitm->vmt = &vmt;
 8000218:	48b9      	ldr	r0, [pc, #740]	; (8000500 <__init_array_end+0x340>)
 800021a:	4bba      	ldr	r3, [pc, #744]	; (8000504 <__init_array_end+0x344>)
  Debug_ITMDebugEnable();
  Debug_ITMDebugOutputString("SWV Enabled\n");
  
  itmObjectInit(&itm_port);

  chprintf((BaseSequentialStream *)&itm_port, "%s", "ChibiOS V3.0\n");
 800021c:	49ba      	ldr	r1, [pc, #744]	; (8000508 <__init_array_end+0x348>)
 800021e:	4abb      	ldr	r2, [pc, #748]	; (800050c <__init_array_end+0x34c>)
 8000220:	6003      	str	r3, [r0, #0]
 8000222:	f002 fd7d 	bl	8002d20 <chprintf.constprop.18>
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000226:	4bba      	ldr	r3, [pc, #744]	; (8000510 <__init_array_end+0x350>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000228:	4cba      	ldr	r4, [pc, #744]	; (8000514 <__init_array_end+0x354>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800022a:	691a      	ldr	r2, [r3, #16]
 800022c:	f04f 31ff 	mov.w	r1, #4294967295
 8000230:	2200      	movs	r2, #0
 8000232:	6119      	str	r1, [r3, #16]
 8000234:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8000236:	6958      	ldr	r0, [r3, #20]
 8000238:	6159      	str	r1, [r3, #20]
 800023a:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800023c:	6a18      	ldr	r0, [r3, #32]
 800023e:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8000242:	6218      	str	r0, [r3, #32]
 8000244:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8000246:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000248:	6259      	str	r1, [r3, #36]	; 0x24
 800024a:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800024c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800024e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000252:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000254:	6821      	ldr	r1, [r4, #0]
 8000256:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800025a:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800025c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800025e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000262:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000266:	d003      	beq.n	8000270 <__init_array_end+0xb0>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000268:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800026c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800026e:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8000270:	48a8      	ldr	r0, [pc, #672]	; (8000514 <__init_array_end+0x354>)
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000272:	4ca9      	ldr	r4, [pc, #676]	; (8000518 <__init_array_end+0x358>)
 8000274:	6842      	ldr	r2, [r0, #4]
 8000276:	4ea9      	ldr	r6, [pc, #676]	; (800051c <__init_array_end+0x35c>)
 8000278:	4da9      	ldr	r5, [pc, #676]	; (8000520 <__init_array_end+0x360>)
 800027a:	2100      	movs	r1, #0
 800027c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000280:	6042      	str	r2, [r0, #4]
 8000282:	460b      	mov	r3, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000284:	4689      	mov	r9, r1
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000286:	6021      	str	r1, [r4, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 8000288:	460a      	mov	r2, r1
 800028a:	58f1      	ldr	r1, [r6, r3]
 800028c:	600a      	str	r2, [r1, #0]
    dma_isr_redir[i].dma_func = NULL;
 800028e:	f845 2039 	str.w	r2, [r5, r9, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000292:	f109 0901 	add.w	r9, r9, #1
 8000296:	f1b9 0f10 	cmp.w	r9, #16
 800029a:	f103 030c 	add.w	r3, r3, #12
    _stm32_dma_streams[i].stream->CR = 0;
 800029e:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80002a2:	d1f2      	bne.n	800028a <__init_array_end+0xca>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 80002a4:	4b9f      	ldr	r3, [pc, #636]	; (8000524 <__init_array_end+0x364>)
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 80002a6:	4fa0      	ldr	r7, [pc, #640]	; (8000528 <__init_array_end+0x368>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80002a8:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8000510 <__init_array_end+0x350>
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
  
  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "hal_lld_init");
 80002ac:	499f      	ldr	r1, [pc, #636]	; (800052c <__init_array_end+0x36c>)
 80002ae:	4aa0      	ldr	r2, [pc, #640]	; (8000530 <__init_array_end+0x370>)
 80002b0:	4893      	ldr	r0, [pc, #588]	; (8000500 <__init_array_end+0x340>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80002b2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8000574 <__init_array_end+0x3b4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002b6:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8000578 <__init_array_end+0x3b8>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80002ba:	4d9e      	ldr	r5, [pc, #632]	; (8000534 <__init_array_end+0x374>)
 80002bc:	f04f 36ff 	mov.w	r6, #4294967295
 80002c0:	60be      	str	r6, [r7, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 80002c2:	60fe      	str	r6, [r7, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 80002c4:	609e      	str	r6, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 80002c6:	60de      	str	r6, [r3, #12]
 80002c8:	f002 fd1a 	bl	8002d00 <chprintf.constprop.20>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80002cc:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002d0:	4899      	ldr	r0, [pc, #612]	; (8000538 <__init_array_end+0x378>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80002d2:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 800057c <__init_array_end+0x3bc>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80002d6:	4b99      	ldr	r3, [pc, #612]	; (800053c <__init_array_end+0x37c>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002d8:	4999      	ldr	r1, [pc, #612]	; (8000540 <__init_array_end+0x380>)
 80002da:	4a9a      	ldr	r2, [pc, #616]	; (8000544 <__init_array_end+0x384>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80002dc:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 80002e0:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80002e4:	f8d8 e050 	ldr.w	lr, [r8, #80]	; 0x50
 80002e8:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 80002ec:	f8c8 e050 	str.w	lr, [r8, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002f0:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80002f2:	f8c0 b008 	str.w	fp, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80002f6:	f64f 7bdf 	movw	fp, #65503	; 0xffdf

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80002fa:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80002fe:	f44f 4eee 	mov.w	lr, #30464	; 0x7700
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000302:	f8c0 b014 	str.w	fp, [r0, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000306:	f8df b278 	ldr.w	fp, [pc, #632]	; 8000580 <__init_array_end+0x3c0>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800030a:	f8c0 e020 	str.w	lr, [r0, #32]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800030e:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000312:	6243      	str	r3, [r0, #36]	; 0x24
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000314:	f64f 7eff 	movw	lr, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000318:	f8c0 b000 	str.w	fp, [r0]
 800031c:	f04f 0b80 	mov.w	fp, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000320:	f8ca 4004 	str.w	r4, [sl, #4]
 8000324:	4b88      	ldr	r3, [pc, #544]	; (8000548 <__init_array_end+0x388>)
  gpiop->OSPEEDR = config->ospeedr;
 8000326:	f8ca 6008 	str.w	r6, [sl, #8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800032a:	f5a7 47a0 	sub.w	r7, r7, #20480	; 0x5000
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800032e:	f8ca c00c 	str.w	ip, [sl, #12]
 8000332:	4886      	ldr	r0, [pc, #536]	; (800054c <__init_array_end+0x38c>)
  gpiop->ODR     = config->odr;
 8000334:	f8ca e014 	str.w	lr, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8000338:	f8ca 4020 	str.w	r4, [sl, #32]
  gpiop->AFRH    = config->afrh;
 800033c:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000340:	f8ca b000 	str.w	fp, [sl]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000344:	f64f 0aff 	movw	sl, #63743	; 0xf8ff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000348:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800034a:	608e      	str	r6, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800034c:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 800034e:	f8c1 a014 	str.w	sl, [r1, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000352:	f44f 10a8 	mov.w	r0, #1376256	; 0x150000

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000356:	f04f 0a45 	mov.w	sl, #69	; 0x45
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800035a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800035c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800035e:	6008      	str	r0, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000360:	6054      	str	r4, [r2, #4]

#if HAL_USE_PAL || defined(__DOXYGEN__)
  palInit(&pal_default_config);
  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "palInit");
 8000362:	4972      	ldr	r1, [pc, #456]	; (800052c <__init_array_end+0x36c>)
  gpiop->OSPEEDR = config->ospeedr;
 8000364:	6096      	str	r6, [r2, #8]
 8000366:	4866      	ldr	r0, [pc, #408]	; (8000500 <__init_array_end+0x340>)
  gpiop->PUPDR   = config->pupdr;
 8000368:	f8c2 c00c 	str.w	ip, [r2, #12]
  gpiop->ODR     = config->odr;
 800036c:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000370:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000372:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000374:	6014      	str	r4, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000376:	607c      	str	r4, [r7, #4]
 8000378:	4a75      	ldr	r2, [pc, #468]	; (8000550 <__init_array_end+0x390>)
  gpiop->OSPEEDR = config->ospeedr;
 800037a:	60be      	str	r6, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800037c:	f8c7 a00c 	str.w	sl, [r7, #12]
  gpiop->ODR     = config->odr;
 8000380:	f8c7 e014 	str.w	lr, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000384:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8000386:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000388:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800038a:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800038c:	609e      	str	r6, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800038e:	60dc      	str	r4, [r3, #12]
  gpiop->ODR     = config->odr;
 8000390:	f8c3 e014 	str.w	lr, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000394:	621c      	str	r4, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000396:	625c      	str	r4, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000398:	601c      	str	r4, [r3, #0]
 800039a:	f002 fcb1 	bl	8002d00 <chprintf.constprop.20>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800039e:	f8d8 c040 	ldr.w	ip, [r8, #64]	; 0x40
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 80003a2:	4a6c      	ldr	r2, [pc, #432]	; (8000554 <__init_array_end+0x394>)
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80003a4:	496c      	ldr	r1, [pc, #432]	; (8000558 <__init_array_end+0x398>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80003a6:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8000584 <__init_array_end+0x3c4>
  uartp->txstate = UART_TX_IDLE;
 80003aa:	7054      	strb	r4, [r2, #1]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 80003ac:	2701      	movs	r7, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80003ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80003b2:	ea4c 0c07 	orr.w	ip, ip, r7
  uartp->txstate = UART_TX_IDLE;
  uartp->rxstate = UART_RX_IDLE;
 80003b6:	7094      	strb	r4, [r2, #2]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 80003b8:	7017      	strb	r7, [r2, #0]
  uartp->txstate = UART_TX_IDLE;
  uartp->rxstate = UART_RX_IDLE;
  uartp->config  = NULL;
 80003ba:	6054      	str	r4, [r2, #4]
 80003bc:	f8c8 c040 	str.w	ip, [r8, #64]	; 0x40
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80003c0:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80003c4:	f242 780f 	movw	r8, #9999	; 0x270f
 80003c8:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80003cc:	62de      	str	r6, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80003ce:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80003d0:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80003d2:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80003d4:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80003d6:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80003d8:	601f      	str	r7, [r3, #0]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80003da:	f88e b31c 	strb.w	fp, [lr, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80003de:	f8ce c180 	str.w	ip, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80003e2:	f8ce c000 	str.w	ip, [lr]
 80003e6:	608c      	str	r4, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003e8:	f8d1 800c 	ldr.w	r8, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80003ec:	485b      	ldr	r0, [pc, #364]	; (800055c <__init_array_end+0x39c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80003ee:	f8df c198 	ldr.w	ip, [pc, #408]	; 8000588 <__init_array_end+0x3c8>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80003f2:	f8df b198 	ldr.w	fp, [pc, #408]	; 800058c <__init_array_end+0x3cc>
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
 80003f6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80003fa:	6093      	str	r3, [r2, #8]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80003fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000400:	ea08 0303 	and.w	r3, r8, r3
  reg_value  =  (reg_value                                 |
 8000404:	4318      	orrs	r0, r3
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000406:	60c8      	str	r0, [r1, #12]
 8000408:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800040c:	606d      	str	r5, [r5, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800040e:	f5ae 4e51 	sub.w	lr, lr, #53504	; 0xd100

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000416:	f8cc 300c 	str.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800041a:	f8de 3000 	ldr.w	r3, [lr]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800041e:	60ac      	str	r4, [r5, #8]
 8000420:	433b      	orrs	r3, r7
 8000422:	f8ce 3000 	str.w	r3, [lr]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 8000426:	f105 0c1c 	add.w	ip, r5, #28

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800042e:	4668      	mov	r0, sp
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000430:	f04f 0820 	mov.w	r8, #32
 8000434:	f881 901f 	strb.w	r9, [r1, #31]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 8000438:	616d      	str	r5, [r5, #20]
 800043a:	f881 8022 	strb.w	r8, [r1, #34]	; 0x22
 800043e:	f8c5 c020 	str.w	ip, [r5, #32]
 8000442:	612d      	str	r5, [r5, #16]
 8000444:	602d      	str	r5, [r5, #0]
 8000446:	f8c5 c01c 	str.w	ip, [r5, #28]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800044a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
 800044e:	626e      	str	r6, [r5, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000450:	9600      	str	r6, [sp, #0]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 8000452:	62ac      	str	r4, [r5, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 8000454:	676c      	str	r4, [r5, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000456:	9401      	str	r4, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000458:	9402      	str	r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800045a:	9403      	str	r4, [sp, #12]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800045c:	f002 fa28 	bl	80028b0 <chTMStartMeasurementX.constprop.24>
  chTMStopMeasurementX(&tm);
 8000460:	4668      	mov	r0, sp
 8000462:	f001 fddd 	bl	8002020 <chTMStopMeasurementX>
 8000466:	4b3e      	ldr	r3, [pc, #248]	; (8000560 <__init_array_end+0x3a0>)
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000468:	483e      	ldr	r0, [pc, #248]	; (8000564 <__init_array_end+0x3a4>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800046a:	4a3f      	ldr	r2, [pc, #252]	; (8000568 <__init_array_end+0x3a8>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800046c:	f8d5 e014 	ldr.w	lr, [r5, #20]
  ch.tm.offset = tm.last;
 8000470:	9e02      	ldr	r6, [sp, #8]
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000472:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000590 <__init_array_end+0x3d0>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000476:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000594 <__init_array_end+0x3d4>
 800047a:	676e      	str	r6, [r5, #116]	; 0x74
 800047c:	f103 0c10 	add.w	ip, r3, #16
 8000480:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8000484:	f8c3 c014 	str.w	ip, [r3, #20]
 8000488:	f8c3 c010 	str.w	ip, [r3, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800048c:	2640      	movs	r6, #64	; 0x40
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800048e:	619c      	str	r4, [r3, #24]
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000490:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000494:	f022 0207 	bic.w	r2, r2, #7
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000498:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 800049a:	60dc      	str	r4, [r3, #12]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800049c:	f105 0c54 	add.w	ip, r5, #84	; 0x54
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80004a0:	f8c3 b000 	str.w	fp, [r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80004a4:	f105 0358 	add.w	r3, r5, #88	; 0x58
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80004a8:	f885 404d 	strb.w	r4, [r5, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80004ac:	66ac      	str	r4, [r5, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 80004ae:	666c      	str	r4, [r5, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 80004b0:	f885 704e 	strb.w	r7, [r5, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 80004b4:	64ac      	str	r4, [r5, #72]	; 0x48
  REG_INSERT(tp);
 80004b6:	642d      	str	r5, [r5, #64]	; 0x40
 80004b8:	f8c5 e044 	str.w	lr, [r5, #68]	; 0x44
 80004bc:	6169      	str	r1, [r5, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80004be:	63ae      	str	r6, [r5, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 80004c0:	66ee      	str	r6, [r5, #108]	; 0x6c
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80004c2:	f8c9 0000 	str.w	r0, [r9]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80004c6:	f8ce 1010 	str.w	r1, [lr, #16]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80004ca:	f8c8 2000 	str.w	r2, [r8]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80004ce:	61a9      	str	r1, [r5, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80004d0:	f885 704c 	strb.w	r7, [r5, #76]	; 0x4c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80004d4:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80004d8:	65eb      	str	r3, [r5, #92]	; 0x5c
 80004da:	65ab      	str	r3, [r5, #88]	; 0x58

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004dc:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004e0:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80004e2:	69ab      	ldr	r3, [r5, #24]
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <__init_array_end+0x3ac>)
 80004e6:	619a      	str	r2, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80004e8:	21d8      	movs	r1, #216	; 0xd8
 80004ea:	463a      	mov	r2, r7
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <__init_array_end+0x3b0>)
 80004ee:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80004f2:	f002 fba5 	bl	8002c40 <chThdCreateStatic.constprop.27>

	
  /*
   * Creates the blinker thread.
   */
  thread_t *tp = chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80004f6:	4632      	mov	r2, r6
 80004f8:	e04e      	b.n	8000598 <__init_array_end+0x3d8>
 80004fa:	bf00      	nop
 80004fc:	2000ae58 	.word	0x2000ae58
 8000500:	2000ae38 	.word	0x2000ae38
 8000504:	08005b40 	.word	0x08005b40
 8000508:	08005b10 	.word	0x08005b10
 800050c:	08005b14 	.word	0x08005b14
 8000510:	40023800 	.word	0x40023800
 8000514:	40007000 	.word	0x40007000
 8000518:	2000afcc 	.word	0x2000afcc
 800051c:	08005b50 	.word	0x08005b50
 8000520:	2000ab18 	.word	0x2000ab18
 8000524:	40026400 	.word	0x40026400
 8000528:	40026000 	.word	0x40026000
 800052c:	080059c0 	.word	0x080059c0
 8000530:	08005b24 	.word	0x08005b24
 8000534:	2000aba0 	.word	0x2000aba0
 8000538:	40020000 	.word	0x40020000
 800053c:	000aa770 	.word	0x000aa770
 8000540:	40020800 	.word	0x40020800
 8000544:	40020c00 	.word	0x40020c00
 8000548:	40021c00 	.word	0x40021c00
 800054c:	51405555 	.word	0x51405555
 8000550:	08005b34 	.word	0x08005b34
 8000554:	2000ae3c 	.word	0x2000ae3c
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	05fa0300 	.word	0x05fa0300
 8000560:	2000ae60 	.word	0x2000ae60
 8000564:	2000b00f 	.word	0x2000b00f
 8000568:	20020000 	.word	0x20020000
 800056c:	08005ae0 	.word	0x08005ae0
 8000570:	08000e51 	.word	0x08000e51
 8000574:	ffebfbaf 	.word	0xffebfbaf
 8000578:	40020400 	.word	0x40020400
 800057c:	64015105 	.word	0x64015105
 8000580:	2aa804a0 	.word	0x2aa804a0
 8000584:	e000e100 	.word	0xe000e100
 8000588:	e000edf0 	.word	0xe000edf0
 800058c:	08000da1 	.word	0x08000da1
 8000590:	2000afc8 	.word	0x2000afc8
 8000594:	2000ab98 	.word	0x2000ab98
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <__init_array_end+0x40c>)
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <__init_array_end+0x410>)
 800059c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005a0:	f002 fb4e 	bl	8002c40 <chThdCreateStatic.constprop.27>
  
  /*
   * Creates the modbus poll thread.
   */
  chThdCreateStatic(wa_freemodbus_thread, sizeof(wa_freemodbus_thread), NORMALPRIO + 5,
 80005a4:	4652      	mov	r2, sl
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__init_array_end+0x414>)
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <__init_array_end+0x418>)
 80005aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005ae:	f002 fb47 	bl	8002c40 <chThdCreateStatic.constprop.27>
					modbus_thread, NULL);
					
  /*
   * Creates the modbus request thread.
   */
  chThdCreateStatic(wa_modbusreq_thread, sizeof(wa_modbusreq_thread), NORMALPRIO,
 80005b2:	4632      	mov	r2, r6
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <__init_array_end+0x41c>)
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <__init_array_end+0x420>)
 80005b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005bc:	f002 fb40 	bl	8002c40 <chThdCreateStatic.constprop.27>
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    /*if (!palReadPad(GPIOC, GPIOC_BUTTON))
	TestThread(&SD2);*/
    chThdSleepMilliseconds(500);
 80005c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80005c4:	f001 fcdc 	bl	8001f80 <chThdSleep>
 80005c8:	e7fa      	b.n	80005c0 <__init_array_end+0x400>
 80005ca:	bf00      	nop
 80005cc:	080020c1 	.word	0x080020c1
 80005d0:	2000a9d0 	.word	0x2000a9d0
 80005d4:	080021c1 	.word	0x080021c1
 80005d8:	2000acf0 	.word	0x2000acf0
 80005dc:	2000ae80 	.word	0x2000ae80
 80005e0:	08002101 	.word	0x08002101
 80005e4:	f3af 8000 	nop.w
 80005e8:	f3af 8000 	nop.w
 80005ec:	f3af 8000 	nop.w

080005f0 <_port_switch>:
 80005f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005f4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80005f8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80005fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000600 <_port_thread_start>:
 8000600:	2300      	movs	r3, #0
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	4628      	mov	r0, r5
 8000608:	47a0      	blx	r4
 800060a:	f001 fb89 	bl	8001d20 <chThdExit>

0800060e <_port_switch_from_isr>:
 800060e:	f001 fce7 	bl	8001fe0 <chSchDoReschedule>

08000612 <_port_exit_from_isr>:
 8000612:	df00      	svc	0
 8000614:	e7fe      	b.n	8000614 <_port_exit_from_isr+0x2>
	...

08000620 <memcpy>:
 8000620:	4684      	mov	ip, r0
 8000622:	ea41 0300 	orr.w	r3, r1, r0
 8000626:	f013 0303 	ands.w	r3, r3, #3
 800062a:	d16d      	bne.n	8000708 <memcpy+0xe8>
 800062c:	3a40      	subs	r2, #64	; 0x40
 800062e:	d341      	bcc.n	80006b4 <memcpy+0x94>
 8000630:	f851 3b04 	ldr.w	r3, [r1], #4
 8000634:	f840 3b04 	str.w	r3, [r0], #4
 8000638:	f851 3b04 	ldr.w	r3, [r1], #4
 800063c:	f840 3b04 	str.w	r3, [r0], #4
 8000640:	f851 3b04 	ldr.w	r3, [r1], #4
 8000644:	f840 3b04 	str.w	r3, [r0], #4
 8000648:	f851 3b04 	ldr.w	r3, [r1], #4
 800064c:	f840 3b04 	str.w	r3, [r0], #4
 8000650:	f851 3b04 	ldr.w	r3, [r1], #4
 8000654:	f840 3b04 	str.w	r3, [r0], #4
 8000658:	f851 3b04 	ldr.w	r3, [r1], #4
 800065c:	f840 3b04 	str.w	r3, [r0], #4
 8000660:	f851 3b04 	ldr.w	r3, [r1], #4
 8000664:	f840 3b04 	str.w	r3, [r0], #4
 8000668:	f851 3b04 	ldr.w	r3, [r1], #4
 800066c:	f840 3b04 	str.w	r3, [r0], #4
 8000670:	f851 3b04 	ldr.w	r3, [r1], #4
 8000674:	f840 3b04 	str.w	r3, [r0], #4
 8000678:	f851 3b04 	ldr.w	r3, [r1], #4
 800067c:	f840 3b04 	str.w	r3, [r0], #4
 8000680:	f851 3b04 	ldr.w	r3, [r1], #4
 8000684:	f840 3b04 	str.w	r3, [r0], #4
 8000688:	f851 3b04 	ldr.w	r3, [r1], #4
 800068c:	f840 3b04 	str.w	r3, [r0], #4
 8000690:	f851 3b04 	ldr.w	r3, [r1], #4
 8000694:	f840 3b04 	str.w	r3, [r0], #4
 8000698:	f851 3b04 	ldr.w	r3, [r1], #4
 800069c:	f840 3b04 	str.w	r3, [r0], #4
 80006a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a4:	f840 3b04 	str.w	r3, [r0], #4
 80006a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80006ac:	f840 3b04 	str.w	r3, [r0], #4
 80006b0:	3a40      	subs	r2, #64	; 0x40
 80006b2:	d2bd      	bcs.n	8000630 <memcpy+0x10>
 80006b4:	3230      	adds	r2, #48	; 0x30
 80006b6:	d311      	bcc.n	80006dc <memcpy+0xbc>
 80006b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80006bc:	f840 3b04 	str.w	r3, [r0], #4
 80006c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c4:	f840 3b04 	str.w	r3, [r0], #4
 80006c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80006cc:	f840 3b04 	str.w	r3, [r0], #4
 80006d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d4:	f840 3b04 	str.w	r3, [r0], #4
 80006d8:	3a10      	subs	r2, #16
 80006da:	d2ed      	bcs.n	80006b8 <memcpy+0x98>
 80006dc:	320c      	adds	r2, #12
 80006de:	d305      	bcc.n	80006ec <memcpy+0xcc>
 80006e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e4:	f840 3b04 	str.w	r3, [r0], #4
 80006e8:	3a04      	subs	r2, #4
 80006ea:	d2f9      	bcs.n	80006e0 <memcpy+0xc0>
 80006ec:	3204      	adds	r2, #4
 80006ee:	d008      	beq.n	8000702 <memcpy+0xe2>
 80006f0:	07d2      	lsls	r2, r2, #31
 80006f2:	bf1c      	itt	ne
 80006f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80006fc:	d301      	bcc.n	8000702 <memcpy+0xe2>
 80006fe:	880b      	ldrh	r3, [r1, #0]
 8000700:	8003      	strh	r3, [r0, #0]
 8000702:	4660      	mov	r0, ip
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	2a08      	cmp	r2, #8
 800070a:	d313      	bcc.n	8000734 <memcpy+0x114>
 800070c:	078b      	lsls	r3, r1, #30
 800070e:	d08d      	beq.n	800062c <memcpy+0xc>
 8000710:	f010 0303 	ands.w	r3, r0, #3
 8000714:	d08a      	beq.n	800062c <memcpy+0xc>
 8000716:	f1c3 0304 	rsb	r3, r3, #4
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	07db      	lsls	r3, r3, #31
 800071e:	bf1c      	itt	ne
 8000720:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000724:	f800 3b01 	strbne.w	r3, [r0], #1
 8000728:	d380      	bcc.n	800062c <memcpy+0xc>
 800072a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800072e:	f820 3b02 	strh.w	r3, [r0], #2
 8000732:	e77b      	b.n	800062c <memcpy+0xc>
 8000734:	3a04      	subs	r2, #4
 8000736:	d3d9      	bcc.n	80006ec <memcpy+0xcc>
 8000738:	3a01      	subs	r2, #1
 800073a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800073e:	f800 3b01 	strb.w	r3, [r0], #1
 8000742:	d2f9      	bcs.n	8000738 <memcpy+0x118>
 8000744:	780b      	ldrb	r3, [r1, #0]
 8000746:	7003      	strb	r3, [r0, #0]
 8000748:	784b      	ldrb	r3, [r1, #1]
 800074a:	7043      	strb	r3, [r0, #1]
 800074c:	788b      	ldrb	r3, [r1, #2]
 800074e:	7083      	strb	r3, [r0, #2]
 8000750:	4660      	mov	r0, ip
 8000752:	4770      	bx	lr
	...

08000760 <__aeabi_uldivmod>:
 8000760:	b94b      	cbnz	r3, 8000776 <__aeabi_uldivmod+0x16>
 8000762:	b942      	cbnz	r2, 8000776 <__aeabi_uldivmod+0x16>
 8000764:	2900      	cmp	r1, #0
 8000766:	bf08      	it	eq
 8000768:	2800      	cmpeq	r0, #0
 800076a:	d002      	beq.n	8000772 <__aeabi_uldivmod+0x12>
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	4608      	mov	r0, r1
 8000772:	f000 b83d 	b.w	80007f0 <__aeabi_idiv0>
 8000776:	b082      	sub	sp, #8
 8000778:	46ec      	mov	ip, sp
 800077a:	e92d 5000 	stmdb	sp!, {ip, lr}
 800077e:	f000 f81f 	bl	80007c0 <__gnu_uldivmod_helper>
 8000782:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000786:	b002      	add	sp, #8
 8000788:	bc0c      	pop	{r2, r3}
 800078a:	4770      	bx	lr
 800078c:	0000      	movs	r0, r0
	...

08000790 <__gnu_ldivmod_helper>:
 8000790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000794:	9c06      	ldr	r4, [sp, #24]
 8000796:	4615      	mov	r5, r2
 8000798:	4606      	mov	r6, r0
 800079a:	460f      	mov	r7, r1
 800079c:	4698      	mov	r8, r3
 800079e:	f000 f82f 	bl	8000800 <__divdi3>
 80007a2:	fb05 f301 	mul.w	r3, r5, r1
 80007a6:	fb00 3808 	mla	r8, r0, r8, r3
 80007aa:	fba5 2300 	umull	r2, r3, r5, r0
 80007ae:	1ab2      	subs	r2, r6, r2
 80007b0:	4443      	add	r3, r8
 80007b2:	eb67 0303 	sbc.w	r3, r7, r3
 80007b6:	e9c4 2300 	strd	r2, r3, [r4]
 80007ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007be:	bf00      	nop

080007c0 <__gnu_uldivmod_helper>:
 80007c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007c4:	9c06      	ldr	r4, [sp, #24]
 80007c6:	4690      	mov	r8, r2
 80007c8:	4606      	mov	r6, r0
 80007ca:	460f      	mov	r7, r1
 80007cc:	461d      	mov	r5, r3
 80007ce:	f000 f967 	bl	8000aa0 <__udivdi3>
 80007d2:	fb00 f505 	mul.w	r5, r0, r5
 80007d6:	fba0 2308 	umull	r2, r3, r0, r8
 80007da:	fb08 5501 	mla	r5, r8, r1, r5
 80007de:	1ab2      	subs	r2, r6, r2
 80007e0:	442b      	add	r3, r5
 80007e2:	eb67 0303 	sbc.w	r3, r7, r3
 80007e6:	e9c4 2300 	strd	r2, r3, [r4]
 80007ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007ee:	bf00      	nop

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
	...

08000800 <__divdi3>:
 8000800:	2900      	cmp	r1, #0
 8000802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000806:	f2c0 80a6 	blt.w	8000956 <__divdi3+0x156>
 800080a:	2600      	movs	r6, #0
 800080c:	2b00      	cmp	r3, #0
 800080e:	f2c0 809c 	blt.w	800094a <__divdi3+0x14a>
 8000812:	4688      	mov	r8, r1
 8000814:	4694      	mov	ip, r2
 8000816:	469e      	mov	lr, r3
 8000818:	4615      	mov	r5, r2
 800081a:	4604      	mov	r4, r0
 800081c:	460f      	mov	r7, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d13d      	bne.n	800089e <__divdi3+0x9e>
 8000822:	428a      	cmp	r2, r1
 8000824:	d959      	bls.n	80008da <__divdi3+0xda>
 8000826:	fab2 f382 	clz	r3, r2
 800082a:	b13b      	cbz	r3, 800083c <__divdi3+0x3c>
 800082c:	f1c3 0220 	rsb	r2, r3, #32
 8000830:	409f      	lsls	r7, r3
 8000832:	fa20 f202 	lsr.w	r2, r0, r2
 8000836:	409d      	lsls	r5, r3
 8000838:	4317      	orrs	r7, r2
 800083a:	409c      	lsls	r4, r3
 800083c:	0c29      	lsrs	r1, r5, #16
 800083e:	0c22      	lsrs	r2, r4, #16
 8000840:	fbb7 fef1 	udiv	lr, r7, r1
 8000844:	b2a8      	uxth	r0, r5
 8000846:	fb01 771e 	mls	r7, r1, lr, r7
 800084a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800084e:	fb00 f30e 	mul.w	r3, r0, lr
 8000852:	42bb      	cmp	r3, r7
 8000854:	d90a      	bls.n	800086c <__divdi3+0x6c>
 8000856:	197f      	adds	r7, r7, r5
 8000858:	f10e 32ff 	add.w	r2, lr, #4294967295
 800085c:	f080 8105 	bcs.w	8000a6a <__divdi3+0x26a>
 8000860:	42bb      	cmp	r3, r7
 8000862:	f240 8102 	bls.w	8000a6a <__divdi3+0x26a>
 8000866:	f1ae 0e02 	sub.w	lr, lr, #2
 800086a:	442f      	add	r7, r5
 800086c:	1aff      	subs	r7, r7, r3
 800086e:	b2a4      	uxth	r4, r4
 8000870:	fbb7 f3f1 	udiv	r3, r7, r1
 8000874:	fb01 7713 	mls	r7, r1, r3, r7
 8000878:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800087c:	fb00 f003 	mul.w	r0, r0, r3
 8000880:	42b8      	cmp	r0, r7
 8000882:	d908      	bls.n	8000896 <__divdi3+0x96>
 8000884:	197f      	adds	r7, r7, r5
 8000886:	f103 32ff 	add.w	r2, r3, #4294967295
 800088a:	f080 80f0 	bcs.w	8000a6e <__divdi3+0x26e>
 800088e:	42b8      	cmp	r0, r7
 8000890:	f240 80ed 	bls.w	8000a6e <__divdi3+0x26e>
 8000894:	3b02      	subs	r3, #2
 8000896:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800089a:	2200      	movs	r2, #0
 800089c:	e003      	b.n	80008a6 <__divdi3+0xa6>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d90f      	bls.n	80008c2 <__divdi3+0xc2>
 80008a2:	2200      	movs	r2, #0
 80008a4:	4613      	mov	r3, r2
 80008a6:	1c34      	adds	r4, r6, #0
 80008a8:	bf18      	it	ne
 80008aa:	2401      	movne	r4, #1
 80008ac:	4260      	negs	r0, r4
 80008ae:	f04f 0500 	mov.w	r5, #0
 80008b2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80008b6:	4058      	eors	r0, r3
 80008b8:	4051      	eors	r1, r2
 80008ba:	1900      	adds	r0, r0, r4
 80008bc:	4169      	adcs	r1, r5
 80008be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008c2:	fab3 f283 	clz	r2, r3
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	f040 8086 	bne.w	80009d8 <__divdi3+0x1d8>
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d302      	bcc.n	80008d6 <__divdi3+0xd6>
 80008d0:	4584      	cmp	ip, r0
 80008d2:	f200 80db 	bhi.w	8000a8c <__divdi3+0x28c>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e7e5      	b.n	80008a6 <__divdi3+0xa6>
 80008da:	b912      	cbnz	r2, 80008e2 <__divdi3+0xe2>
 80008dc:	2301      	movs	r3, #1
 80008de:	fbb3 f5f2 	udiv	r5, r3, r2
 80008e2:	fab5 f085 	clz	r0, r5
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d13b      	bne.n	8000962 <__divdi3+0x162>
 80008ea:	1b78      	subs	r0, r7, r5
 80008ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008f0:	fa1f fc85 	uxth.w	ip, r5
 80008f4:	2201      	movs	r2, #1
 80008f6:	fbb0 f8fe 	udiv	r8, r0, lr
 80008fa:	0c21      	lsrs	r1, r4, #16
 80008fc:	fb0e 0718 	mls	r7, lr, r8, r0
 8000900:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000904:	fb0c f308 	mul.w	r3, ip, r8
 8000908:	42bb      	cmp	r3, r7
 800090a:	d907      	bls.n	800091c <__divdi3+0x11c>
 800090c:	197f      	adds	r7, r7, r5
 800090e:	f108 31ff 	add.w	r1, r8, #4294967295
 8000912:	d202      	bcs.n	800091a <__divdi3+0x11a>
 8000914:	42bb      	cmp	r3, r7
 8000916:	f200 80bd 	bhi.w	8000a94 <__divdi3+0x294>
 800091a:	4688      	mov	r8, r1
 800091c:	1aff      	subs	r7, r7, r3
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb7 f3fe 	udiv	r3, r7, lr
 8000924:	fb0e 7713 	mls	r7, lr, r3, r7
 8000928:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800092c:	fb0c fc03 	mul.w	ip, ip, r3
 8000930:	45bc      	cmp	ip, r7
 8000932:	d907      	bls.n	8000944 <__divdi3+0x144>
 8000934:	197f      	adds	r7, r7, r5
 8000936:	f103 31ff 	add.w	r1, r3, #4294967295
 800093a:	d202      	bcs.n	8000942 <__divdi3+0x142>
 800093c:	45bc      	cmp	ip, r7
 800093e:	f200 80a7 	bhi.w	8000a90 <__divdi3+0x290>
 8000942:	460b      	mov	r3, r1
 8000944:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000948:	e7ad      	b.n	80008a6 <__divdi3+0xa6>
 800094a:	4252      	negs	r2, r2
 800094c:	ea6f 0606 	mvn.w	r6, r6
 8000950:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000954:	e75d      	b.n	8000812 <__divdi3+0x12>
 8000956:	4240      	negs	r0, r0
 8000958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800095c:	f04f 36ff 	mov.w	r6, #4294967295
 8000960:	e754      	b.n	800080c <__divdi3+0xc>
 8000962:	f1c0 0220 	rsb	r2, r0, #32
 8000966:	fa24 f102 	lsr.w	r1, r4, r2
 800096a:	fa07 f300 	lsl.w	r3, r7, r0
 800096e:	4085      	lsls	r5, r0
 8000970:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000974:	40d7      	lsrs	r7, r2
 8000976:	4319      	orrs	r1, r3
 8000978:	fbb7 f2fe 	udiv	r2, r7, lr
 800097c:	0c0b      	lsrs	r3, r1, #16
 800097e:	fb0e 7712 	mls	r7, lr, r2, r7
 8000982:	fa1f fc85 	uxth.w	ip, r5
 8000986:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800098a:	fb0c f702 	mul.w	r7, ip, r2
 800098e:	429f      	cmp	r7, r3
 8000990:	fa04 f400 	lsl.w	r4, r4, r0
 8000994:	d907      	bls.n	80009a6 <__divdi3+0x1a6>
 8000996:	195b      	adds	r3, r3, r5
 8000998:	f102 30ff 	add.w	r0, r2, #4294967295
 800099c:	d274      	bcs.n	8000a88 <__divdi3+0x288>
 800099e:	429f      	cmp	r7, r3
 80009a0:	d972      	bls.n	8000a88 <__divdi3+0x288>
 80009a2:	3a02      	subs	r2, #2
 80009a4:	442b      	add	r3, r5
 80009a6:	1bdf      	subs	r7, r3, r7
 80009a8:	b289      	uxth	r1, r1
 80009aa:	fbb7 f8fe 	udiv	r8, r7, lr
 80009ae:	fb0e 7318 	mls	r3, lr, r8, r7
 80009b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009b6:	fb0c f708 	mul.w	r7, ip, r8
 80009ba:	429f      	cmp	r7, r3
 80009bc:	d908      	bls.n	80009d0 <__divdi3+0x1d0>
 80009be:	195b      	adds	r3, r3, r5
 80009c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80009c4:	d25c      	bcs.n	8000a80 <__divdi3+0x280>
 80009c6:	429f      	cmp	r7, r3
 80009c8:	d95a      	bls.n	8000a80 <__divdi3+0x280>
 80009ca:	f1a8 0802 	sub.w	r8, r8, #2
 80009ce:	442b      	add	r3, r5
 80009d0:	1bd8      	subs	r0, r3, r7
 80009d2:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80009d6:	e78e      	b.n	80008f6 <__divdi3+0xf6>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa2c f103 	lsr.w	r1, ip, r3
 80009e0:	fa0e fe02 	lsl.w	lr, lr, r2
 80009e4:	fa20 f703 	lsr.w	r7, r0, r3
 80009e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80009ec:	fa08 f002 	lsl.w	r0, r8, r2
 80009f0:	fa28 f103 	lsr.w	r1, r8, r3
 80009f4:	ea4f 451e 	mov.w	r5, lr, lsr #16
 80009f8:	4338      	orrs	r0, r7
 80009fa:	fbb1 f8f5 	udiv	r8, r1, r5
 80009fe:	0c03      	lsrs	r3, r0, #16
 8000a00:	fb05 1118 	mls	r1, r5, r8, r1
 8000a04:	fa1f f78e 	uxth.w	r7, lr
 8000a08:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a0c:	fb07 f308 	mul.w	r3, r7, r8
 8000a10:	428b      	cmp	r3, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	d909      	bls.n	8000a2c <__divdi3+0x22c>
 8000a18:	eb11 010e 	adds.w	r1, r1, lr
 8000a1c:	f108 39ff 	add.w	r9, r8, #4294967295
 8000a20:	d230      	bcs.n	8000a84 <__divdi3+0x284>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d92e      	bls.n	8000a84 <__divdi3+0x284>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4471      	add	r1, lr
 8000a2c:	1ac9      	subs	r1, r1, r3
 8000a2e:	b280      	uxth	r0, r0
 8000a30:	fbb1 f3f5 	udiv	r3, r1, r5
 8000a34:	fb05 1113 	mls	r1, r5, r3, r1
 8000a38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a3c:	fb07 f703 	mul.w	r7, r7, r3
 8000a40:	428f      	cmp	r7, r1
 8000a42:	d908      	bls.n	8000a56 <__divdi3+0x256>
 8000a44:	eb11 010e 	adds.w	r1, r1, lr
 8000a48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a4c:	d216      	bcs.n	8000a7c <__divdi3+0x27c>
 8000a4e:	428f      	cmp	r7, r1
 8000a50:	d914      	bls.n	8000a7c <__divdi3+0x27c>
 8000a52:	3b02      	subs	r3, #2
 8000a54:	4471      	add	r1, lr
 8000a56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5a:	1bc9      	subs	r1, r1, r7
 8000a5c:	fba3 890c 	umull	r8, r9, r3, ip
 8000a60:	4549      	cmp	r1, r9
 8000a62:	d309      	bcc.n	8000a78 <__divdi3+0x278>
 8000a64:	d005      	beq.n	8000a72 <__divdi3+0x272>
 8000a66:	2200      	movs	r2, #0
 8000a68:	e71d      	b.n	80008a6 <__divdi3+0xa6>
 8000a6a:	4696      	mov	lr, r2
 8000a6c:	e6fe      	b.n	800086c <__divdi3+0x6c>
 8000a6e:	4613      	mov	r3, r2
 8000a70:	e711      	b.n	8000896 <__divdi3+0x96>
 8000a72:	4094      	lsls	r4, r2
 8000a74:	4544      	cmp	r4, r8
 8000a76:	d2f6      	bcs.n	8000a66 <__divdi3+0x266>
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	e7f4      	b.n	8000a66 <__divdi3+0x266>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	e7ea      	b.n	8000a56 <__divdi3+0x256>
 8000a80:	4688      	mov	r8, r1
 8000a82:	e7a5      	b.n	80009d0 <__divdi3+0x1d0>
 8000a84:	46c8      	mov	r8, r9
 8000a86:	e7d1      	b.n	8000a2c <__divdi3+0x22c>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	e78c      	b.n	80009a6 <__divdi3+0x1a6>
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	e70a      	b.n	80008a6 <__divdi3+0xa6>
 8000a90:	3b02      	subs	r3, #2
 8000a92:	e757      	b.n	8000944 <__divdi3+0x144>
 8000a94:	f1a8 0802 	sub.w	r8, r8, #2
 8000a98:	442f      	add	r7, r5
 8000a9a:	e73f      	b.n	800091c <__divdi3+0x11c>
 8000a9c:	0000      	movs	r0, r0
	...

08000aa0 <__udivdi3>:
 8000aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d144      	bne.n	8000b32 <__udivdi3+0x92>
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	4615      	mov	r5, r2
 8000aac:	4604      	mov	r4, r0
 8000aae:	d94f      	bls.n	8000b50 <__udivdi3+0xb0>
 8000ab0:	fab2 f782 	clz	r7, r2
 8000ab4:	460e      	mov	r6, r1
 8000ab6:	b14f      	cbz	r7, 8000acc <__udivdi3+0x2c>
 8000ab8:	f1c7 0320 	rsb	r3, r7, #32
 8000abc:	40b9      	lsls	r1, r7
 8000abe:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac2:	fa02 f507 	lsl.w	r5, r2, r7
 8000ac6:	430e      	orrs	r6, r1
 8000ac8:	fa00 f407 	lsl.w	r4, r0, r7
 8000acc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	fbb6 f0fe 	udiv	r0, r6, lr
 8000ad6:	b2af      	uxth	r7, r5
 8000ad8:	fb0e 6110 	mls	r1, lr, r0, r6
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb07 f100 	mul.w	r1, r7, r0
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivdi3+0x5c>
 8000ae8:	195b      	adds	r3, r3, r5
 8000aea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aee:	f080 80ec 	bcs.w	8000cca <__udivdi3+0x22a>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 80e9 	bls.w	8000cca <__udivdi3+0x22a>
 8000af8:	3802      	subs	r0, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5a      	subs	r2, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb2 f3fe 	udiv	r3, r2, lr
 8000b04:	fb0e 2213 	mls	r2, lr, r3, r2
 8000b08:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000b0c:	fb07 f703 	mul.w	r7, r7, r3
 8000b10:	4297      	cmp	r7, r2
 8000b12:	d908      	bls.n	8000b26 <__udivdi3+0x86>
 8000b14:	1952      	adds	r2, r2, r5
 8000b16:	f103 31ff 	add.w	r1, r3, #4294967295
 8000b1a:	f080 80d8 	bcs.w	8000cce <__udivdi3+0x22e>
 8000b1e:	4297      	cmp	r7, r2
 8000b20:	f240 80d5 	bls.w	8000cce <__udivdi3+0x22e>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d847      	bhi.n	8000bc6 <__udivdi3+0x126>
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d148      	bne.n	8000bd0 <__udivdi3+0x130>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivdi3+0xa8>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80cd 	bhi.w	8000ce2 <__udivdi3+0x242>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b50:	b912      	cbnz	r2, 8000b58 <__udivdi3+0xb8>
 8000b52:	2501      	movs	r5, #1
 8000b54:	fbb5 f5f2 	udiv	r5, r5, r2
 8000b58:	fab5 f885 	clz	r8, r5
 8000b5c:	f1b8 0f00 	cmp.w	r8, #0
 8000b60:	d177      	bne.n	8000c52 <__udivdi3+0x1b2>
 8000b62:	1b4a      	subs	r2, r1, r5
 8000b64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b68:	b2af      	uxth	r7, r5
 8000b6a:	2601      	movs	r6, #1
 8000b6c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 2110 	mls	r1, lr, r0, r2
 8000b76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b7a:	fb07 f300 	mul.w	r3, r7, r0
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d907      	bls.n	8000b92 <__udivdi3+0xf2>
 8000b82:	1949      	adds	r1, r1, r5
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivdi3+0xf0>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	f200 80ba 	bhi.w	8000d04 <__udivdi3+0x264>
 8000b90:	4610      	mov	r0, r2
 8000b92:	1ac9      	subs	r1, r1, r3
 8000b94:	b2a4      	uxth	r4, r4
 8000b96:	fbb1 f3fe 	udiv	r3, r1, lr
 8000b9a:	fb0e 1113 	mls	r1, lr, r3, r1
 8000b9e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba2:	fb07 f703 	mul.w	r7, r7, r3
 8000ba6:	42a7      	cmp	r7, r4
 8000ba8:	d908      	bls.n	8000bbc <__udivdi3+0x11c>
 8000baa:	1964      	adds	r4, r4, r5
 8000bac:	f103 32ff 	add.w	r2, r3, #4294967295
 8000bb0:	f080 808f 	bcs.w	8000cd2 <__udivdi3+0x232>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 808c 	bls.w	8000cd2 <__udivdi3+0x232>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4630      	mov	r0, r6
 8000bca:	4631      	mov	r1, r6
 8000bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bd0:	f1c6 0420 	rsb	r4, r6, #32
 8000bd4:	fa22 f504 	lsr.w	r5, r2, r4
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	432b      	orrs	r3, r5
 8000bdc:	fa20 fc04 	lsr.w	ip, r0, r4
 8000be0:	fa01 f706 	lsl.w	r7, r1, r6
 8000be4:	fa21 f504 	lsr.w	r5, r1, r4
 8000be8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000bec:	ea4c 0707 	orr.w	r7, ip, r7
 8000bf0:	fbb5 f8fe 	udiv	r8, r5, lr
 8000bf4:	0c39      	lsrs	r1, r7, #16
 8000bf6:	fb0e 5518 	mls	r5, lr, r8, r5
 8000bfa:	fa1f fc83 	uxth.w	ip, r3
 8000bfe:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8000c02:	fb0c f108 	mul.w	r1, ip, r8
 8000c06:	42a9      	cmp	r1, r5
 8000c08:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0c:	d904      	bls.n	8000c18 <__udivdi3+0x178>
 8000c0e:	18ed      	adds	r5, r5, r3
 8000c10:	f108 34ff 	add.w	r4, r8, #4294967295
 8000c14:	d367      	bcc.n	8000ce6 <__udivdi3+0x246>
 8000c16:	46a0      	mov	r8, r4
 8000c18:	1a6d      	subs	r5, r5, r1
 8000c1a:	b2bf      	uxth	r7, r7
 8000c1c:	fbb5 f4fe 	udiv	r4, r5, lr
 8000c20:	fb0e 5514 	mls	r5, lr, r4, r5
 8000c24:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8000c28:	fb0c fc04 	mul.w	ip, ip, r4
 8000c2c:	458c      	cmp	ip, r1
 8000c2e:	d904      	bls.n	8000c3a <__udivdi3+0x19a>
 8000c30:	18c9      	adds	r1, r1, r3
 8000c32:	f104 35ff 	add.w	r5, r4, #4294967295
 8000c36:	d35c      	bcc.n	8000cf2 <__udivdi3+0x252>
 8000c38:	462c      	mov	r4, r5
 8000c3a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000c3e:	ebcc 0101 	rsb	r1, ip, r1
 8000c42:	fba4 2302 	umull	r2, r3, r4, r2
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d348      	bcc.n	8000cdc <__udivdi3+0x23c>
 8000c4a:	d044      	beq.n	8000cd6 <__udivdi3+0x236>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	2600      	movs	r6, #0
 8000c50:	e76c      	b.n	8000b2c <__udivdi3+0x8c>
 8000c52:	f1c8 0420 	rsb	r4, r8, #32
 8000c56:	fa01 f308 	lsl.w	r3, r1, r8
 8000c5a:	fa05 f508 	lsl.w	r5, r5, r8
 8000c5e:	fa20 f704 	lsr.w	r7, r0, r4
 8000c62:	40e1      	lsrs	r1, r4
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	431f      	orrs	r7, r3
 8000c6a:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c6e:	0c3a      	lsrs	r2, r7, #16
 8000c70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c74:	fa1f fc85 	uxth.w	ip, r5
 8000c78:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8000c7c:	fb0c f206 	mul.w	r2, ip, r6
 8000c80:	429a      	cmp	r2, r3
 8000c82:	fa00 f408 	lsl.w	r4, r0, r8
 8000c86:	d907      	bls.n	8000c98 <__udivdi3+0x1f8>
 8000c88:	195b      	adds	r3, r3, r5
 8000c8a:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c8e:	d237      	bcs.n	8000d00 <__udivdi3+0x260>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d935      	bls.n	8000d00 <__udivdi3+0x260>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	b2bf      	uxth	r7, r7
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8000ca8:	fb0c f100 	mul.w	r1, ip, r0
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivdi3+0x220>
 8000cb0:	195b      	adds	r3, r3, r5
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d221      	bcs.n	8000cfc <__udivdi3+0x25c>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d91f      	bls.n	8000cfc <__udivdi3+0x25c>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	442b      	add	r3, r5
 8000cc0:	1a5a      	subs	r2, r3, r1
 8000cc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cc6:	4667      	mov	r7, ip
 8000cc8:	e750      	b.n	8000b6c <__udivdi3+0xcc>
 8000cca:	4610      	mov	r0, r2
 8000ccc:	e716      	b.n	8000afc <__udivdi3+0x5c>
 8000cce:	460b      	mov	r3, r1
 8000cd0:	e729      	b.n	8000b26 <__udivdi3+0x86>
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	e772      	b.n	8000bbc <__udivdi3+0x11c>
 8000cd6:	40b0      	lsls	r0, r6
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	d2b7      	bcs.n	8000c4c <__udivdi3+0x1ac>
 8000cdc:	1e60      	subs	r0, r4, #1
 8000cde:	2600      	movs	r6, #0
 8000ce0:	e724      	b.n	8000b2c <__udivdi3+0x8c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e722      	b.n	8000b2c <__udivdi3+0x8c>
 8000ce6:	42a9      	cmp	r1, r5
 8000ce8:	d995      	bls.n	8000c16 <__udivdi3+0x176>
 8000cea:	f1a8 0802 	sub.w	r8, r8, #2
 8000cee:	441d      	add	r5, r3
 8000cf0:	e792      	b.n	8000c18 <__udivdi3+0x178>
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	d9a0      	bls.n	8000c38 <__udivdi3+0x198>
 8000cf6:	3c02      	subs	r4, #2
 8000cf8:	4419      	add	r1, r3
 8000cfa:	e79e      	b.n	8000c3a <__udivdi3+0x19a>
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	e7df      	b.n	8000cc0 <__udivdi3+0x220>
 8000d00:	460e      	mov	r6, r1
 8000d02:	e7c9      	b.n	8000c98 <__udivdi3+0x1f8>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4429      	add	r1, r5
 8000d08:	e743      	b.n	8000b92 <__udivdi3+0xf2>
 8000d0a:	bf00      	nop
 8000d0c:	0000      	movs	r0, r0
	...

08000d10 <eMBMasterFuncReadInputRegister>:
}

/* The master request is broadcast? */
BOOL 
xMBMasterRequestIsBroadcast( void ){
	return xFrameIsBroadcast;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <eMBMasterFuncReadInputRegister+0x7c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 8000d14:	b983      	cbnz	r3, 8000d38 <eMBMasterFuncReadInputRegister+0x28>
	{
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8000d16:	880b      	ldrh	r3, [r1, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d801      	bhi.n	8000d20 <eMBMasterFuncReadInputRegister+0x10>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	4770      	bx	lr
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8000d20:	b470      	push	{r4, r5, r6}
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <eMBMasterFuncReadInputRegister+0x80>)
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8000d24:	7919      	ldrb	r1, [r3, #4]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8000d26:	795a      	ldrb	r2, [r3, #5]
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8000d28:	789c      	ldrb	r4, [r3, #2]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8000d2a:	78db      	ldrb	r3, [r3, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8000d2c:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8000d30:	d104      	bne.n	8000d3c <eMBMasterFuncReadInputRegister+0x2c>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000d32:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8000d34:	bc70      	pop	{r4, r5, r6}
 8000d36:	4770      	bx	lr
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
	{
		eStatus = MB_EX_NONE;
 8000d38:	2000      	movs	r0, #0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8000d3a:	4770      	bx	lr
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8000d3c:	7841      	ldrb	r1, [r0, #1]
 8000d3e:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8000d42:	d1f6      	bne.n	8000d32 <eMBMasterFuncReadInputRegister+0x22>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8000d44:	ea43 2104 	orr.w	r1, r3, r4, lsl #8

    /* it already plus one in modbus function method. */
    usAddress--;

    if ((usAddress >= REG_INPUT_START)
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8000d48:	440a      	add	r2, r1
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <eMBMasterFuncReadInputRegister+0x84>)
 8000d4c:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	dc19      	bgt.n	8000d88 <eMBMasterFuncReadInputRegister+0x78>
 8000d54:	4d10      	ldr	r5, [pc, #64]	; (8000d98 <eMBMasterFuncReadInputRegister+0x88>)
 8000d56:	1e5c      	subs	r4, r3, #1
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8000d58:	f44f 6696 	mov.w	r6, #1200	; 0x4b0
 8000d5c:	3004      	adds	r0, #4
 8000d5e:	b293      	uxth	r3, r2
 8000d60:	fb06 5504 	mla	r5, r6, r4, r5
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
    {
        iRegIndex = usAddress - usRegInStart;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8000d64:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8000d68:	0212      	lsls	r2, r2, #8
 8000d6a:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8000d6e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
            iRegIndex++;
 8000d72:	1c4e      	adds	r6, r1, #1
    {
        iRegIndex = usAddress - usRegInStart;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8000d74:	4322      	orrs	r2, r4
 8000d76:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
            iRegIndex++;
 8000d7a:	b2b1      	uxth	r1, r6

    if ((usAddress >= REG_INPUT_START)
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
    {
        iRegIndex = usAddress - usRegInStart;
        while (usNRegs > 0)
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	f100 0002 	add.w	r0, r0, #2
 8000d82:	d1ef      	bne.n	8000d64 <eMBMasterFuncReadInputRegister+0x54>
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
	{
		eStatus = MB_EX_NONE;
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7d5      	b.n	8000d34 <eMBMasterFuncReadInputRegister+0x24>
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000d88:	2002      	movs	r0, #2
 8000d8a:	e7d3      	b.n	8000d34 <eMBMasterFuncReadInputRegister+0x24>
 8000d8c:	20005cf8 	.word	0x20005cf8
 8000d90:	2000a8cc 	.word	0x2000a8cc
 8000d94:	2000a8a9 	.word	0x2000a8a9
 8000d98:	2000108c 	.word	0x2000108c
 8000d9c:	f3af 8000 	nop.w

08000da0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000da0:	b410      	push	{r4}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000da2:	2320      	movs	r3, #32
 8000da4:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size) {
 8000da8:	4c09      	ldr	r4, [pc, #36]	; (8000dd0 <chCoreAlloc+0x30>)
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <chCoreAlloc+0x34>)
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000db0:	1dc3      	adds	r3, r0, #7
 8000db2:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000db6:	1a89      	subs	r1, r1, r2
 8000db8:	428b      	cmp	r3, r1
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000dba:	bf9d      	ittte	ls
 8000dbc:	189b      	addls	r3, r3, r2
 8000dbe:	6023      	strls	r3, [r4, #0]

  return p;
 8000dc0:	4610      	movls	r0, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size) {
    return NULL;
 8000dc2:	2000      	movhi	r0, #0
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	2000afc8 	.word	0x2000afc8
 8000dd4:	2000ab98 	.word	0x2000ab98
 8000dd8:	f3af 8000 	nop.w
 8000ddc:	f3af 8000 	nop.w

08000de0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000de0:	b410      	push	{r4}
 8000de2:	2320      	movs	r3, #32
 8000de4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000de8:	7f03      	ldrb	r3, [r0, #28]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d80e      	bhi.n	8000e0c <wakeup+0x2c>
 8000dee:	e8df f003 	tbb	[pc, r3]
 8000df2:	0d27      	.short	0x0d27
 8000df4:	0408230d 	.word	0x0408230d
 8000df8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 8000dfa:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000dfc:	6893      	ldr	r3, [r2, #8]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000e02:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000e06:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000e08:	6802      	ldr	r2, [r0, #0]
 8000e0a:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000e0c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e10:	2200      	movs	r2, #0
 8000e12:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <wakeup+0x6c>)
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000e16:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e18:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000e1a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	428a      	cmp	r2, r1
 8000e20:	d2fb      	bcs.n	8000e1a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000e26:	6003      	str	r3, [r0, #0]
 8000e28:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8000e2a:	6058      	str	r0, [r3, #4]
 8000e2c:	6010      	str	r0, [r2, #0]
 8000e2e:	f381 8811 	msr	BASEPRI, r1
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e36:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 8000e38:	6a03      	ldr	r3, [r0, #32]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e7e5      	b.n	8000e0c <wakeup+0x2c>
 8000e40:	2300      	movs	r3, #0
 8000e42:	f383 8811 	msr	BASEPRI, r3
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	2000aba0 	.word	0x2000aba0

08000e50 <_idle_thread.lto_priv.37>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <_idle_thread.lto_priv.37+0xc>)
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <_idle_thread.lto_priv.37+0x10>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	e7fe      	b.n	8000e58 <_idle_thread.lto_priv.37+0x8>
 8000e5a:	bf00      	nop
 8000e5c:	2000aba0 	.word	0x2000aba0
 8000e60:	08005590 	.word	0x08005590
 8000e64:	f3af 8000 	nop.w
 8000e68:	f3af 8000 	nop.w
 8000e6c:	f3af 8000 	nop.w

08000e70 <_port_irq_epilogue>:
 8000e70:	2320      	movs	r3, #32
 8000e72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <_port_irq_epilogue+0x44>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000e7e:	d102      	bne.n	8000e86 <_port_irq_epilogue+0x16>
 8000e80:	f383 8811 	msr	BASEPRI, r3
 8000e84:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000e86:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e8e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000e92:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000e96:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <_port_irq_epilogue+0x48>)
 8000e9c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000e9e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000ea0:	6889      	ldr	r1, [r1, #8]
 8000ea2:	6892      	ldr	r2, [r2, #8]
 8000ea4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000ea6:	bf8c      	ite	hi
 8000ea8:	4a04      	ldrhi	r2, [pc, #16]	; (8000ebc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000eaa:	4a05      	ldrls	r2, [pc, #20]	; (8000ec0 <_port_irq_epilogue+0x50>)
 8000eac:	f843 2c08 	str.w	r2, [r3, #-8]
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	2000aba0 	.word	0x2000aba0
 8000ebc:	0800060f 	.word	0x0800060f
 8000ec0:	08000612 	.word	0x08000612
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	f3af 8000 	nop.w

08000ed0 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {

  uint32_t isr;
  USART_TypeDef *u = uartp->usart;
 8000ed2:	4e29      	ldr	r6, [pc, #164]	; (8000f78 <VectorD4+0xa8>)
 8000ed4:	68b7      	ldr	r7, [r6, #8]

  /* Reading and clearing status.*/
  isr = u->SR;
 8000ed6:	683c      	ldr	r4, [r7, #0]
  //u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8000ed8:	f240 130f 	movw	r3, #271	; 0x10f
 8000edc:	4023      	ands	r3, r4
 8000ede:	b1cb      	cbz	r3, 8000f14 <VectorD4+0x44>
             USART_SR_FE  | USART_SR_PE)) {
    if (uartp->config->rxerr_cb != NULL)
 8000ee0:	6873      	ldr	r3, [r6, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	b1b3      	cbz	r3, 8000f14 <VectorD4+0x44>
static uartflags_t translate_errors(uint32_t isr) 
{
  uartflags_t sts = 0;

  if (isr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8000ee6:	f014 0f08 	tst.w	r4, #8
 8000eea:	bf0c      	ite	eq
 8000eec:	2100      	moveq	r1, #0
 8000eee:	2110      	movne	r1, #16
  if (isr & USART_SR_PE)
 8000ef0:	07e0      	lsls	r0, r4, #31
    sts |= UART_PARITY_ERROR;
 8000ef2:	bf48      	it	mi
 8000ef4:	f041 0104 	orrmi.w	r1, r1, #4
  if (isr & USART_SR_FE)
 8000ef8:	07a2      	lsls	r2, r4, #30
    sts |= UART_FRAMING_ERROR;
 8000efa:	bf48      	it	mi
 8000efc:	f041 0108 	orrmi.w	r1, r1, #8
  if (isr & USART_SR_NE)
 8000f00:	0765      	lsls	r5, r4, #29
    sts |= UART_NOISE_ERROR;
 8000f02:	bf48      	it	mi
 8000f04:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_SR_LBD)
 8000f08:	05e0      	lsls	r0, r4, #23
    sts |= UART_BREAK_DETECTED;
 8000f0a:	bf48      	it	mi
 8000f0c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  /* Error condition detection.*/
  if (isr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
             USART_SR_FE  | USART_SR_PE)) {
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(isr));        // Receive error callback
 8000f10:	4819      	ldr	r0, [pc, #100]	; (8000f78 <VectorD4+0xa8>)
 8000f12:	4798      	blx	r3
  }

#if STM32_UART_USE_INTERRUPTS
  uint32_t cr1 = u->CR1;
 8000f14:	68fd      	ldr	r5, [r7, #12]

  /* Data available (receive). */
  if ((cr1 & USART_CR1_RXNEIE) && (isr & USART_SR_RXNE))
 8000f16:	06aa      	lsls	r2, r5, #26
 8000f18:	d501      	bpl.n	8000f1e <VectorD4+0x4e>
 8000f1a:	06a3      	lsls	r3, r4, #26
 8000f1c:	d423      	bmi.n	8000f66 <VectorD4+0x96>
        uartp->config->rxchar_cb(uartp, uartp->rxbuf);				// Receive character callback
	//}
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_SR_TXE)) 
 8000f1e:	0628      	lsls	r0, r5, #24
 8000f20:	d501      	bpl.n	8000f26 <VectorD4+0x56>
 8000f22:	0621      	lsls	r1, r4, #24
 8000f24:	d413      	bmi.n	8000f4e <VectorD4+0x7e>
	    uartp->txstate = UART_TX_IDLE;
      //u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;       // Disable transmit data interrupt, enable TxBuffer empty
    //}
  }
  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_SR_TC))
 8000f26:	066a      	lsls	r2, r5, #25
 8000f28:	d50d      	bpl.n	8000f46 <VectorD4+0x76>
 8000f2a:	0663      	lsls	r3, r4, #25
 8000f2c:	d50b      	bpl.n	8000f46 <VectorD4+0x76>
  {
	palClearPad(GPIOC, GPIOC_PIN8);
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <VectorD4+0xac>)
    if (uartp->config->txend2_cb != NULL)
 8000f30:	6873      	ldr	r3, [r6, #4]
    //}
  }
  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_SR_TC))
  {
	palClearPad(GPIOC, GPIOC_PIN8);
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	8351      	strh	r1, [r2, #26]
    if (uartp->config->txend2_cb != NULL)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b10b      	cbz	r3, 8000f40 <VectorD4+0x70>
      uartp->config->txend2_cb(uartp);      // Signal that whole transmit message gone
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <VectorD4+0xa8>)
 8000f3e:	4798      	blx	r3
    u->CR1 = cr1 & ~USART_CR1_TCIE;         // Disable transmit buffer empty interrupt
 8000f40:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8000f44:	60fd      	str	r5, [r7, #12]
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
}
 8000f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
 8000f4a:	f7ff bf91 	b.w	8000e70 <_port_irq_epilogue>
    //if (--(uartp->txCount) == 0)
    //{
      //uartp->txBuf = NULL;
      /* A callback is generated, if enabled, after a completed transfer.*/
      //uartp->txstate = UART_TX_COMPLETE;
	  if (uartp->config->txend1_cb != NULL)
 8000f4e:	6873      	ldr	r3, [r6, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	b10b      	cbz	r3, 8000f58 <VectorD4+0x88>
		uartp->config->txend1_cb(uartp);            // Signal that Tx buffer finished with
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <VectorD4+0xa8>)
 8000f56:	4798      	blx	r3

	  /* If the callback didn't explicitly change state then the transmitter
	     automatically returns to the idle state.*/
	  if (uartp->txstate == UART_TX_COMPLETE)
 8000f58:	7873      	ldrb	r3, [r6, #1]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <VectorD4+0xa8>)
 8000f5c:	2b02      	cmp	r3, #2
	    uartp->txstate = UART_TX_IDLE;
 8000f5e:	bf04      	itt	eq
 8000f60:	2300      	moveq	r3, #0
 8000f62:	7053      	strbeq	r3, [r2, #1]
 8000f64:	e7df      	b.n	8000f26 <VectorD4+0x56>
	    }
	  }
	}*/
	//else
	//{   // Receive character while in UART_RX_IDLE mode
      if (uartp->config->rxchar_cb != NULL)
 8000f66:	6873      	ldr	r3, [r6, #4]
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <VectorD4+0xa8>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0d6      	beq.n	8000f1e <VectorD4+0x4e>
        uartp->config->rxchar_cb(uartp, uartp->rxbuf);				// Receive character callback
 8000f70:	8981      	ldrh	r1, [r0, #12]
 8000f72:	b289      	uxth	r1, r1
 8000f74:	4798      	blx	r3
 8000f76:	e7d2      	b.n	8000f1e <VectorD4+0x4e>
 8000f78:	2000ae3c 	.word	0x2000ae3c
 8000f7c:	40020800 	.word	0x40020800

08000f80 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 8000f84:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f88:	2000      	movs	r0, #0
 8000f8a:	6120      	str	r0, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f8c:	2520      	movs	r5, #32
 8000f8e:	f385 8811 	msr	BASEPRI, r5
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8000f92:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001010 <VectorB0+0x90>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000f96:	6a61      	ldr	r1, [r4, #36]	; 0x24

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000f98:	f8d9 301c 	ldr.w	r3, [r9, #28]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8000f9c:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000fa0:	689a      	ldr	r2, [r3, #8]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8000fa2:	ebce 0601 	rsb	r6, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000fa6:	4296      	cmp	r6, r2
 8000fa8:	bf38      	it	cc
 8000faa:	f109 061c 	addcc.w	r6, r9, #28
 8000fae:	d31c      	bcc.n	8000fea <VectorB0+0x6a>

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	f109 061c 	add.w	r6, r9, #28
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fb6:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000fb8:	68df      	ldr	r7, [r3, #12]
      break;
    }

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000fba:	4472      	add	r2, lr
 8000fbc:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fc0:	604e      	str	r6, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000fc2:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8000fc6:	f8c3 800c 	str.w	r8, [r3, #12]
 8000fca:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8000fce:	6918      	ldr	r0, [r3, #16]
 8000fd0:	47b8      	blx	r7
 8000fd2:	f385 8811 	msr	BASEPRI, r5
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000fd6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8000fda:	6a61      	ldr	r1, [r4, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8000fdc:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000fe0:	689a      	ldr	r2, [r3, #8]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8000fe2:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	d2e5      	bcs.n	8000fb6 <VectorB0+0x36>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fea:	42b3      	cmp	r3, r6
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff0:	d00b      	beq.n	800100a <VectorB0+0x8a>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA) {
 8000ff2:	2a01      	cmp	r2, #1
      port_timer_set_alarm(now + vtp->vt_delta);
 8000ff4:	bf14      	ite	ne
 8000ff6:	1852      	addne	r2, r2, r1
    }
    else {
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8000ff8:	1c8a      	addeq	r2, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8001002:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8001006:	f7ff bf33 	b.w	8000e70 <_port_irq_epilogue>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e7f5      	b.n	8000ffc <VectorB0+0x7c>
 8001010:	2000aba0 	.word	0x2000aba0
 8001014:	f3af 8000 	nop.w
 8001018:	f3af 8000 	nop.w
 800101c:	f3af 8000 	nop.w

08001020 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001024:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8001026:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001028:	0d89      	lsrs	r1, r1, #22
 800102a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800102e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 8001030:	058c      	lsls	r4, r1, #22
 8001032:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001034:	b10a      	cbz	r2, 800103a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001036:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001038:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800103a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800103e:	f7ff bf17 	b.w	8000e70 <_port_irq_epilogue>
 8001042:	bf00      	nop
 8001044:	40026400 	.word	0x40026400
 8001048:	2000ab18 	.word	0x2000ab18
 800104c:	f3af 8000 	nop.w

08001050 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001054:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8001056:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001058:	0c09      	lsrs	r1, r1, #16
 800105a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800105e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 8001060:	040c      	lsls	r4, r1, #16
 8001062:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8001064:	b10a      	cbz	r2, 800106a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8001066:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001068:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800106a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800106e:	f7ff beff 	b.w	8000e70 <_port_irq_epilogue>
 8001072:	bf00      	nop
 8001074:	40026400 	.word	0x40026400
 8001078:	2000ab18 	.word	0x2000ab18
 800107c:	f3af 8000 	nop.w

08001080 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001084:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001086:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001088:	0989      	lsrs	r1, r1, #6
 800108a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800108e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 8001090:	018c      	lsls	r4, r1, #6
 8001092:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001094:	b10a      	cbz	r2, 800109a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001096:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001098:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800109a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800109e:	f7ff bee7 	b.w	8000e70 <_port_irq_epilogue>
 80010a2:	bf00      	nop
 80010a4:	40026400 	.word	0x40026400
 80010a8:	2000ab18 	.word	0x2000ab18
 80010ac:	f3af 8000 	nop.w

080010b0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 80010b0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010b6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80010b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80010ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 80010be:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80010c0:	b10a      	cbz	r2, 80010c6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80010c2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80010c4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80010c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80010ca:	f7ff bed1 	b.w	8000e70 <_port_irq_epilogue>
 80010ce:	bf00      	nop
 80010d0:	40026400 	.word	0x40026400
 80010d4:	2000ab18 	.word	0x2000ab18
 80010d8:	f3af 8000 	nop.w
 80010dc:	f3af 8000 	nop.w

080010e0 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010e4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80010e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80010e8:	0d89      	lsrs	r1, r1, #22
 80010ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 80010ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 80010f0:	058c      	lsls	r4, r1, #22
 80010f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80010f4:	b10a      	cbz	r2, 80010fa <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80010f6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80010f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80010fe:	f7ff beb7 	b.w	8000e70 <_port_irq_epilogue>
 8001102:	bf00      	nop
 8001104:	40026400 	.word	0x40026400
 8001108:	2000ab18 	.word	0x2000ab18
 800110c:	f3af 8000 	nop.w

08001110 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001114:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001116:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001118:	0c09      	lsrs	r1, r1, #16
 800111a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800111e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 8001120:	040c      	lsls	r4, r1, #16
 8001122:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001124:	b10a      	cbz	r2, 800112a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001126:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001128:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800112a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800112e:	f7ff be9f 	b.w	8000e70 <_port_irq_epilogue>
 8001132:	bf00      	nop
 8001134:	40026400 	.word	0x40026400
 8001138:	2000ab18 	.word	0x2000ab18
 800113c:	f3af 8000 	nop.w

08001140 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001144:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001146:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001148:	0989      	lsrs	r1, r1, #6
 800114a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800114e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 8001150:	018c      	lsls	r4, r1, #6
 8001152:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8001154:	b10a      	cbz	r2, 800115a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8001156:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001158:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800115a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800115e:	f7ff be87 	b.w	8000e70 <_port_irq_epilogue>
 8001162:	bf00      	nop
 8001164:	40026400 	.word	0x40026400
 8001168:	2000ab18 	.word	0x2000ab18
 800116c:	f3af 8000 	nop.w

08001170 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 8001170:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001176:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001178:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800117a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800117e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8001180:	b10a      	cbz	r2, 8001186 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8001182:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001184:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800118a:	f7ff be71 	b.w	8000e70 <_port_irq_epilogue>
 800118e:	bf00      	nop
 8001190:	40026400 	.word	0x40026400
 8001194:	2000ab18 	.word	0x2000ab18
 8001198:	f3af 8000 	nop.w
 800119c:	f3af 8000 	nop.w

080011a0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80011a4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80011a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80011a8:	0d89      	lsrs	r1, r1, #22
 80011aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 80011ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 80011b0:	058c      	lsls	r4, r1, #22
 80011b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80011b4:	b10a      	cbz	r2, 80011ba <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80011b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80011b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80011ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80011be:	f7ff be57 	b.w	8000e70 <_port_irq_epilogue>
 80011c2:	bf00      	nop
 80011c4:	40026000 	.word	0x40026000
 80011c8:	2000ab18 	.word	0x2000ab18
 80011cc:	f3af 8000 	nop.w

080011d0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 80011d4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 80011d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 80011d8:	0c09      	lsrs	r1, r1, #16
 80011da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 80011de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 80011e0:	040c      	lsls	r4, r1, #16
 80011e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 80011e4:	b10a      	cbz	r2, 80011ea <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80011e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80011e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80011ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80011ee:	f7ff be3f 	b.w	8000e70 <_port_irq_epilogue>
 80011f2:	bf00      	nop
 80011f4:	40026000 	.word	0x40026000
 80011f8:	2000ab18 	.word	0x2000ab18
 80011fc:	f3af 8000 	nop.w

08001200 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001204:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001206:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001208:	0989      	lsrs	r1, r1, #6
 800120a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800120e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 8001210:	018c      	lsls	r4, r1, #6
 8001212:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001214:	b10a      	cbz	r2, 800121a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001216:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001218:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800121e:	f7ff be27 	b.w	8000e70 <_port_irq_epilogue>
 8001222:	bf00      	nop
 8001224:	40026000 	.word	0x40026000
 8001228:	2000ab18 	.word	0x2000ab18
 800122c:	f3af 8000 	nop.w

08001230 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8001230:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001236:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001238:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800123a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800123e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001240:	b10a      	cbz	r2, 8001246 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8001242:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001244:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800124a:	f7ff be11 	b.w	8000e70 <_port_irq_epilogue>
 800124e:	bf00      	nop
 8001250:	40026000 	.word	0x40026000
 8001254:	2000ab18 	.word	0x2000ab18
 8001258:	f3af 8000 	nop.w
 800125c:	f3af 8000 	nop.w

08001260 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001264:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8001266:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001268:	0d89      	lsrs	r1, r1, #22
 800126a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800126e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 8001270:	058c      	lsls	r4, r1, #22
 8001272:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8001274:	b10a      	cbz	r2, 800127a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8001276:	69c0      	ldr	r0, [r0, #28]
 8001278:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800127e:	f7ff bdf7 	b.w	8000e70 <_port_irq_epilogue>
 8001282:	bf00      	nop
 8001284:	40026000 	.word	0x40026000
 8001288:	2000ab18 	.word	0x2000ab18
 800128c:	f3af 8000 	nop.w

08001290 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001294:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001296:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001298:	0c09      	lsrs	r1, r1, #16
 800129a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800129e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 80012a0:	040c      	lsls	r4, r1, #16
 80012a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80012a4:	b10a      	cbz	r2, 80012aa <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80012a6:	6940      	ldr	r0, [r0, #20]
 80012a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80012aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012ae:	f7ff bddf 	b.w	8000e70 <_port_irq_epilogue>
 80012b2:	bf00      	nop
 80012b4:	40026000 	.word	0x40026000
 80012b8:	2000ab18 	.word	0x2000ab18
 80012bc:	f3af 8000 	nop.w

080012c0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80012c4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80012c6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80012c8:	0989      	lsrs	r1, r1, #6
 80012ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 80012ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 80012d0:	018c      	lsls	r4, r1, #6
 80012d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80012d4:	b10a      	cbz	r2, 80012da <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80012d6:	68c0      	ldr	r0, [r0, #12]
 80012d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80012da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012de:	f7ff bdc7 	b.w	8000e70 <_port_irq_epilogue>
 80012e2:	bf00      	nop
 80012e4:	40026000 	.word	0x40026000
 80012e8:	2000ab18 	.word	0x2000ab18
 80012ec:	f3af 8000 	nop.w

080012f0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 80012f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 80012fc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	b10b      	cbz	r3, 8001306 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001302:	6850      	ldr	r0, [r2, #4]
 8001304:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800130a:	f7ff bdb1 	b.w	8000e70 <_port_irq_epilogue>
 800130e:	bf00      	nop
 8001310:	40026000 	.word	0x40026000
 8001314:	2000ab18 	.word	0x2000ab18
 8001318:	f3af 8000 	nop.w
 800131c:	f3af 8000 	nop.w

08001320 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001320:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001324:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001326:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800132a:	2300      	movs	r3, #0
 800132c:	f383 8811 	msr	BASEPRI, r3
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	f3af 8000 	nop.w
 800133c:	f3af 8000 	nop.w

08001340 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8001340:	e7fe      	b.n	8001340 <BusFault_Handler>
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	f3af 8000 	nop.w
 800134c:	f3af 8000 	nop.w

08001350 <xMBMasterRTUTimerExpired>:
    return xNeedPoll;
}

BOOL
xMBMasterRTUTimerExpired(void)
{
 8001350:	b538      	push	{r3, r4, r5, lr}
	BOOL xNeedPoll = FALSE;
	palClearPad(GPIOC, GPIOC_PIN9);
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <xMBMasterRTUTimerExpired+0xdc>)
	palClearPad(GPIOC, GPIOC_PIN10);
	//printf("eRcvState: %d\n", eRcvState);
	switch (eRcvState)
 8001354:	4a36      	ldr	r2, [pc, #216]	; (8001430 <xMBMasterRTUTimerExpired+0xe0>)

BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;
	palClearPad(GPIOC, GPIOC_PIN9);
 8001356:	f44f 7000 	mov.w	r0, #512	; 0x200
	palClearPad(GPIOC, GPIOC_PIN10);
 800135a:	f44f 6180 	mov.w	r1, #1024	; 0x400

BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;
	palClearPad(GPIOC, GPIOC_PIN9);
 800135e:	8358      	strh	r0, [r3, #26]
	palClearPad(GPIOC, GPIOC_PIN10);
 8001360:	8359      	strh	r1, [r3, #26]
	//printf("eRcvState: %d\n", eRcvState);
	switch (eRcvState)
 8001362:	7813      	ldrb	r3, [r2, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d041      	beq.n	80013ee <xMBMasterRTUTimerExpired+0x9e>
 800136a:	2b03      	cmp	r3, #3
 800136c:	d036      	beq.n	80013dc <xMBMasterRTUTimerExpired+0x8c>
 800136e:	b173      	cbz	r3, 800138e <xMBMasterRTUTimerExpired+0x3e>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
		break;

		/* Function called in an illegal state. */
	default:
		assert(
 8001370:	7813      	ldrb	r3, [r2, #0]
 8001372:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8001376:	b17b      	cbz	r3, 8001398 <xMBMasterRTUTimerExpired+0x48>
 8001378:	7813      	ldrb	r3, [r2, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d005      	beq.n	800138a <xMBMasterRTUTimerExpired+0x3a>
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d002      	beq.n	800138a <xMBMasterRTUTimerExpired+0x3a>
 8001384:	7813      	ldrb	r3, [r2, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d148      	bne.n	800141c <xMBMasterRTUTimerExpired+0xcc>
}

BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;
 800138a:	2400      	movs	r4, #0
 800138c:	e004      	b.n	8001398 <xMBMasterRTUTimerExpired+0x48>
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 800138e:	4929      	ldr	r1, [pc, #164]	; (8001434 <xMBMasterRTUTimerExpired+0xe4>)
    eQueuedEvent = eEvent;
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <xMBMasterRTUTimerExpired+0xe8>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001392:	2401      	movs	r4, #1
 8001394:	700c      	strb	r4, [r1, #0]
    eQueuedEvent = eEvent;
 8001396:	701c      	strb	r4, [r3, #0]
		assert(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
	}
	eRcvState = STATE_M_RX_IDLE;
 8001398:	2101      	movs	r1, #1

	//printf("eSndState: %d\n", eSndState);
	switch (eSndState)
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <xMBMasterRTUTimerExpired+0xec>)
		assert(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
	}
	eRcvState = STATE_M_RX_IDLE;
 800139c:	7011      	strb	r1, [r2, #0]

	//printf("eSndState: %d\n", eSndState);
	switch (eSndState)
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	2a02      	cmp	r2, #2
 80013a2:	d10e      	bne.n	80013c2 <xMBMasterRTUTimerExpired+0x72>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <xMBMasterRTUTimerExpired+0xf0>)
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80013ac:	b36a      	cbz	r2, 800140a <xMBMasterRTUTimerExpired+0xba>
	default:
		assert(
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
	}
	eSndState = STATE_M_TX_IDLE;
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 80013b2:	f001 f95d 	bl	8002670 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <xMBMasterRTUTimerExpired+0xf4>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d01d      	beq.n	80013fa <xMBMasterRTUTimerExpired+0xaa>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
	}

	return xNeedPoll;
}
 80013be:	4620      	mov	r0, r4
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
		}
		break;
		/* Function called in an illegal state. */
	default:
		assert(
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	2a02      	cmp	r2, #2
 80013c6:	d0f2      	beq.n	80013ae <xMBMasterRTUTimerExpired+0x5e>
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d0ef      	beq.n	80013ae <xMBMasterRTUTimerExpired+0x5e>
 80013ce:	481e      	ldr	r0, [pc, #120]	; (8001448 <xMBMasterRTUTimerExpired+0xf8>)
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <xMBMasterRTUTimerExpired+0xfc>)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <xMBMasterRTUTimerExpired+0x100>)
 80013d4:	f240 1191 	movw	r1, #401	; 0x191
 80013d8:	f001 fcd2 	bl	8002d80 <__assert_func>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 80013dc:	4d1d      	ldr	r5, [pc, #116]	; (8001454 <xMBMasterRTUTimerExpired+0x104>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <xMBMasterRTUTimerExpired+0xe4>)
    eQueuedEvent = eEvent;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <xMBMasterRTUTimerExpired+0xe8>)
 80013e2:	2401      	movs	r4, #1
 80013e4:	2110      	movs	r1, #16
 80013e6:	702c      	strb	r4, [r5, #0]
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013e8:	7004      	strb	r4, [r0, #0]
    eQueuedEvent = eEvent;
 80013ea:	7019      	strb	r1, [r3, #0]
 80013ec:	e7d4      	b.n	8001398 <xMBMasterRTUTimerExpired+0x48>
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013ee:	4811      	ldr	r0, [pc, #68]	; (8001434 <xMBMasterRTUTimerExpired+0xe4>)
    eQueuedEvent = eEvent;
 80013f0:	4911      	ldr	r1, [pc, #68]	; (8001438 <xMBMasterRTUTimerExpired+0xe8>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013f2:	2401      	movs	r4, #1
 80013f4:	7004      	strb	r4, [r0, #0]
    eQueuedEvent = eEvent;
 80013f6:	700b      	strb	r3, [r1, #0]
 80013f8:	e7ce      	b.n	8001398 <xMBMasterRTUTimerExpired+0x48>
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <xMBMasterRTUTimerExpired+0xe4>)
    eQueuedEvent = eEvent;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <xMBMasterRTUTimerExpired+0xe8>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80013fe:	2401      	movs	r4, #1
    eQueuedEvent = eEvent;
 8001400:	2204      	movs	r2, #4
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001402:	700c      	strb	r4, [r1, #0]
    eQueuedEvent = eEvent;
 8001404:	701a      	strb	r2, [r3, #0]
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
	}

	return xNeedPoll;
}
 8001406:	4620      	mov	r0, r4
 8001408:	bd38      	pop	{r3, r4, r5, pc}
 800140a:	4d12      	ldr	r5, [pc, #72]	; (8001454 <xMBMasterRTUTimerExpired+0x104>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 800140c:	4c09      	ldr	r4, [pc, #36]	; (8001434 <xMBMasterRTUTimerExpired+0xe4>)
    eQueuedEvent = eEvent;
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <xMBMasterRTUTimerExpired+0xe8>)
 8001410:	7028      	strb	r0, [r5, #0]
 8001412:	2010      	movs	r0, #16
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001414:	7021      	strb	r1, [r4, #0]
    eQueuedEvent = eEvent;
 8001416:	7010      	strb	r0, [r2, #0]
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8001418:	460c      	mov	r4, r1
 800141a:	e7c8      	b.n	80013ae <xMBMasterRTUTimerExpired+0x5e>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
		break;

		/* Function called in an illegal state. */
	default:
		assert(
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <xMBMasterRTUTimerExpired+0xf8>)
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <xMBMasterRTUTimerExpired+0xfc>)
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <xMBMasterRTUTimerExpired+0x108>)
 8001422:	f240 117d 	movw	r1, #381	; 0x17d
 8001426:	f001 fcab 	bl	8002d80 <__assert_func>
 800142a:	bf00      	nop
 800142c:	40020800 	.word	0x40020800
 8001430:	20005cb3 	.word	0x20005cb3
 8001434:	20005cf9 	.word	0x20005cf9
 8001438:	2000a8c8 	.word	0x2000a8c8
 800143c:	20005cb2 	.word	0x20005cb2
 8001440:	20005cf8 	.word	0x20005cf8
 8001444:	20005cc8 	.word	0x20005cc8
 8001448:	08005598 	.word	0x08005598
 800144c:	08005530 	.word	0x08005530
 8001450:	08005648 	.word	0x08005648
 8001454:	2000a8a8 	.word	0x2000a8a8
 8001458:	080055b8 	.word	0x080055b8
 800145c:	f3af 8000 	nop.w

08001460 <eMBMasterRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8001460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001464:	4e20      	ldr	r6, [pc, #128]	; (80014e8 <eMBMasterRTUReceive+0x88>)
 8001466:	8833      	ldrh	r3, [r6, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d835      	bhi.n	80014da <eMBMasterRTUReceive+0x7a>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800146e:	8833      	ldrh	r3, [r6, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d802      	bhi.n	800147c <eMBMasterRTUReceive+0x1c>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 8001476:	2005      	movs	r0, #5
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8001478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 800147c:	8833      	ldrh	r3, [r6, #0]
 800147e:	b29b      	uxth	r3, r3
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8001480:	f103 3eff 	add.w	lr, r3, #4294967295
 8001484:	fa1f fe8e 	uxth.w	lr, lr
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f4      	beq.n	8001476 <eMBMasterRTUReceive+0x16>
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <eMBMasterRTUReceive+0x8c>)
 800148e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001500 <eMBMasterRTUReceive+0xa0>
 8001492:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001504 <eMBMasterRTUReceive+0xa4>
 8001496:	f10e 0e01 	add.w	lr, lr, #1
 800149a:	27ff      	movs	r7, #255	; 0xff
 800149c:	469c      	mov	ip, r3
 800149e:	449e      	add	lr, r3
 80014a0:	461d      	mov	r5, r3
 80014a2:	463b      	mov	r3, r7
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80014a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014a8:	405c      	eors	r4, r3
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80014aa:	4575      	cmp	r5, lr
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80014ac:	f819 3004 	ldrb.w	r3, [r9, r4]
 80014b0:	ea83 0307 	eor.w	r3, r3, r7
        ucCRCHi = aucCRCLo[iIndex];
 80014b4:	f818 7004 	ldrb.w	r7, [r8, r4]
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 80014b8:	d1f4      	bne.n	80014a4 <eMBMasterRTUReceive+0x44>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
        ucCRCHi = aucCRCLo[iIndex];
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80014ba:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80014be:	b21b      	sxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1d8      	bne.n	8001476 <eMBMasterRTUReceive+0x16>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80014c4:	f89c 7000 	ldrb.w	r7, [ip]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80014c8:	8834      	ldrh	r4, [r6, #0]
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80014ca:	7007      	strb	r7, [r0, #0]
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 80014cc:	4d08      	ldr	r5, [pc, #32]	; (80014f0 <eMBMasterRTUReceive+0x90>)
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80014ce:	1ee0      	subs	r0, r4, #3
 80014d0:	8010      	strh	r0, [r2, #0]
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 80014d2:	4618      	mov	r0, r3
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 80014d4:	600d      	str	r5, [r1, #0]
 80014d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <eMBMasterRTUReceive+0x94>)
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <eMBMasterRTUReceive+0x98>)
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <eMBMasterRTUReceive+0x9c>)
 80014e0:	21a4      	movs	r1, #164	; 0xa4
 80014e2:	f001 fc4d 	bl	8002d80 <__assert_func>
 80014e6:	bf00      	nop
 80014e8:	20005cb0 	.word	0x20005cb0
 80014ec:	20005b8c 	.word	0x20005b8c
 80014f0:	20005b8d 	.word	0x20005b8d
 80014f4:	08005598 	.word	0x08005598
 80014f8:	08005570 	.word	0x08005570
 80014fc:	08005690 	.word	0x08005690
 8001500:	08005860 	.word	0x08005860
 8001504:	08005760 	.word	0x08005760
 8001508:	f3af 8000 	nop.w
 800150c:	f3af 8000 	nop.w

08001510 <eMBMasterRTUSend>:
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8001510:	2810      	cmp	r0, #16
 8001512:	d901      	bls.n	8001518 <eMBMasterRTUSend+0x8>
 8001514:	2002      	movs	r0, #2
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8001516:	4770      	bx	lr
    return eStatus;
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <eMBMasterRTUSend+0x98>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d001      	beq.n	8001528 <eMBMasterRTUSend+0x18>
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
 8001524:	2005      	movs	r0, #5
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8001526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usMasterSndBufferCount = 1;
 8001528:	4c20      	ldr	r4, [pc, #128]	; (80015ac <eMBMasterRTUSend+0x9c>)
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800152a:	4d21      	ldr	r5, [pc, #132]	; (80015b0 <eMBMasterRTUSend+0xa0>)
        usMasterSndBufferCount = 1;
 800152c:	8023      	strh	r3, [r4, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800152e:	f801 0c01 	strb.w	r0, [r1, #-1]
        usMasterSndBufferCount += usLength;
 8001532:	8823      	ldrh	r3, [r4, #0]
 8001534:	fa12 f283 	uxtah	r2, r2, r3
 8001538:	b292      	uxth	r2, r2
 800153a:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 800153c:	8822      	ldrh	r2, [r4, #0]
 800153e:	b292      	uxth	r2, r2
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8001540:	1e53      	subs	r3, r2, #1
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001542:	1e48      	subs	r0, r1, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	6028      	str	r0, [r5, #0]
 8001548:	b352      	cbz	r2, 80015a0 <eMBMasterRTUSend+0x90>
 800154a:	25ff      	movs	r5, #255	; 0xff
 800154c:	4f19      	ldr	r7, [pc, #100]	; (80015b4 <eMBMasterRTUSend+0xa4>)
 800154e:	4e1a      	ldr	r6, [pc, #104]	; (80015b8 <eMBMasterRTUSend+0xa8>)
 8001550:	4419      	add	r1, r3
 8001552:	462a      	mov	r2, r5
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8001554:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001558:	4053      	eors	r3, r2
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 800155a:	4288      	cmp	r0, r1
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800155c:	5cfa      	ldrb	r2, [r7, r3]
 800155e:	ea82 0205 	eor.w	r2, r2, r5
        ucCRCHi = aucCRCLo[iIndex];
 8001562:	5cf5      	ldrb	r5, [r6, r3]
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8001564:	d1f6      	bne.n	8001554 <eMBMasterRTUSend+0x44>
 8001566:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800156a:	b2d0      	uxtb	r0, r2
 800156c:	f3c2 2207 	ubfx	r2, r2, #8, #8
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usMasterSndBufferCount += usLength;

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8001570:	8823      	ldrh	r3, [r4, #0]
 8001572:	4e12      	ldr	r6, [pc, #72]	; (80015bc <eMBMasterRTUSend+0xac>)
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8001574:	4f12      	ldr	r7, [pc, #72]	; (80015c0 <eMBMasterRTUSend+0xb0>)
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usMasterSndBufferCount += usLength;

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8001576:	b29b      	uxth	r3, r3
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	b289      	uxth	r1, r1
 800157c:	8021      	strh	r1, [r4, #0]
 800157e:	54f0      	strb	r0, [r6, r3]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001580:	8823      	ldrh	r3, [r4, #0]
 8001582:	b29b      	uxth	r3, r3

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8001584:	f04f 0e01 	mov.w	lr, #1
        usMasterSndBufferCount += usLength;

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001588:	1c5d      	adds	r5, r3, #1
 800158a:	b2ad      	uxth	r5, r5

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800158c:	4671      	mov	r1, lr
 800158e:	2000      	movs	r0, #0
        usMasterSndBufferCount += usLength;

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001590:	8025      	strh	r5, [r4, #0]
 8001592:	54f2      	strb	r2, [r6, r3]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8001594:	f887 e000 	strb.w	lr, [r7]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8001598:	f001 f8ba 	bl	8002710 <vMBMasterPortSerialEnable>
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 800159c:	2000      	movs	r0, #0
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	4610      	mov	r0, r2
 80015a4:	e7e4      	b.n	8001570 <eMBMasterRTUSend+0x60>
 80015a6:	bf00      	nop
 80015a8:	20005cb3 	.word	0x20005cb3
 80015ac:	20005c8c 	.word	0x20005c8c
 80015b0:	20005cb8 	.word	0x20005cb8
 80015b4:	08005860 	.word	0x08005860
 80015b8:	08005760 	.word	0x08005760
 80015bc:	2000a8cc 	.word	0x2000a8cc
 80015c0:	20005cb2 	.word	0x20005cb2
 80015c4:	f3af 8000 	nop.w
 80015c8:	f3af 8000 	nop.w
 80015cc:	f3af 8000 	nop.w

080015d0 <eMBMasterRTUStop>:
    EXIT_CRITICAL_SECTION(  );
}

void
eMBMasterRTUStop( void )
{
 80015d0:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
    vMBMasterPortSerialEnable( FALSE, FALSE );
 80015d2:	2000      	movs	r0, #0
 80015d4:	4601      	mov	r1, r0
 80015d6:	f001 f89b 	bl	8002710 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
}
 80015da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void
eMBMasterRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    vMBMasterPortSerialEnable( FALSE, FALSE );
    vMBMasterPortTimersDisable(  );
 80015de:	f001 b847 	b.w	8002670 <vMBMasterPortTimersDisable>
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	f3af 8000 	nop.w
 80015ec:	f3af 8000 	nop.w

080015f0 <xMBMasterRTUReceiveFSM>:
    return eStatus;
}

BOOL
xMBMasterRTUReceiveFSM( void )
{
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 80015f2:	4c1f      	ldr	r4, [pc, #124]	; (8001670 <xMBMasterRTUReceiveFSM+0x80>)
 80015f4:	7823      	ldrb	r3, [r4, #0]
 80015f6:	b113      	cbz	r3, 80015fe <xMBMasterRTUReceiveFSM+0xe>
 80015f8:	7823      	ldrb	r3, [r4, #0]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d132      	bne.n	8001664 <xMBMasterRTUReceiveFSM+0x74>
    return TRUE;
}

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{	
	USART_TypeDef *ureg = serial->usart;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <xMBMasterRTUReceiveFSM+0x84>)

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );

    switch ( eRcvState )
 8001600:	4e1d      	ldr	r6, [pc, #116]	; (8001678 <xMBMasterRTUReceiveFSM+0x88>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
	
    *pucByte = (uint8_t)(ureg->DR);
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	7833      	ldrb	r3, [r6, #0]
 800160a:	b2d5      	uxtb	r5, r2
 800160c:	2b03      	cmp	r3, #3
 800160e:	d811      	bhi.n	8001634 <xMBMasterRTUReceiveFSM+0x44>
 8001610:	e8df f003 	tbb	[pc, r3]
 8001614:	0e02120e 	.word	0x0e02120e
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <xMBMasterRTUReceiveFSM+0x8c>)
 800161a:	8813      	ldrh	r3, [r2, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d81d      	bhi.n	800165e <xMBMasterRTUReceiveFSM+0x6e>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8001622:	8813      	ldrh	r3, [r2, #0]
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <xMBMasterRTUReceiveFSM+0x90>)
 8001626:	b29b      	uxth	r3, r3
 8001628:	1c59      	adds	r1, r3, #1
 800162a:	b289      	uxth	r1, r1
 800162c:	8011      	strh	r1, [r2, #0]
 800162e:	54c5      	strb	r5, [r0, r3]
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
        }
        vMBMasterPortTimersT35Enable();
 8001630:	f001 f846 	bl	80026c0 <vMBMasterPortTimersT35Enable>
        break;
    }
    return xTaskNeedSwitch;
}
 8001634:	2000      	movs	r0, #0
 8001636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 8001638:	f001 f81a 	bl	8002670 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;

        usMasterRcvBufferPos = 0;
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <xMBMasterRTUReceiveFSM+0x8c>)
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 800163e:	4f10      	ldr	r7, [pc, #64]	; (8001680 <xMBMasterRTUReceiveFSM+0x90>)
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
    	eSndState = STATE_M_TX_IDLE;
 8001640:	2300      	movs	r3, #0
 8001642:	7023      	strb	r3, [r4, #0]

        usMasterRcvBufferPos = 0;
 8001644:	8013      	strh	r3, [r2, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8001646:	8813      	ldrh	r3, [r2, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	1c59      	adds	r1, r3, #1
 800164c:	b289      	uxth	r1, r1
        eRcvState = STATE_M_RX_RCV;
 800164e:	2002      	movs	r0, #2
    	 */
    	vMBMasterPortTimersDisable( );
    	eSndState = STATE_M_TX_IDLE;

        usMasterRcvBufferPos = 0;
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8001650:	8011      	strh	r1, [r2, #0]
 8001652:	54fd      	strb	r5, [r7, r3]
        eRcvState = STATE_M_RX_RCV;
 8001654:	7030      	strb	r0, [r6, #0]
		//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "First Byte Received");

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 8001656:	f001 f833 	bl	80026c0 <vMBMasterPortTimersT35Enable>
        }
        vMBMasterPortTimersT35Enable();
        break;
    }
    return xTaskNeedSwitch;
}
 800165a:	2000      	movs	r0, #0
 800165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 800165e:	2303      	movs	r3, #3
 8001660:	7033      	strb	r3, [r6, #0]
 8001662:	e7e5      	b.n	8001630 <xMBMasterRTUReceiveFSM+0x40>
xMBMasterRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <xMBMasterRTUReceiveFSM+0x94>)
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <xMBMasterRTUReceiveFSM+0x98>)
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <xMBMasterRTUReceiveFSM+0x9c>)
 800166a:	21ef      	movs	r1, #239	; 0xef
 800166c:	f001 fb88 	bl	8002d80 <__assert_func>
 8001670:	20005cb2 	.word	0x20005cb2
 8001674:	20005ccc 	.word	0x20005ccc
 8001678:	20005cb3 	.word	0x20005cb3
 800167c:	20005cb0 	.word	0x20005cb0
 8001680:	20005b8c 	.word	0x20005b8c
 8001684:	08005598 	.word	0x08005598
 8001688:	080054f0 	.word	0x080054f0
 800168c:	080056bc 	.word	0x080056bc

08001690 <eMBMasterRTUStart>:
    return eStatus;
}

void
eMBMasterRTUStart( void )
{
 8001690:	b508      	push	{r3, lr}
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <eMBMasterRTUStart+0x18>)
 8001694:	2300      	movs	r3, #0
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8001696:	4619      	mov	r1, r3
 8001698:	2001      	movs	r0, #1
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 800169a:	7013      	strb	r3, [r2, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800169c:	f001 f838 	bl	8002710 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );

    EXIT_CRITICAL_SECTION(  );
}
 80016a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
    vMBMasterPortSerialEnable( TRUE, FALSE );
    vMBMasterPortTimersT35Enable(  );
 80016a4:	f001 b80c 	b.w	80026c0 <vMBMasterPortTimersT35Enable>
 80016a8:	20005cb3 	.word	0x20005cb3
 80016ac:	f3af 8000 	nop.w

080016b0 <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80016b0:	2301      	movs	r3, #1
 80016b2:	800b      	strh	r3, [r1, #0]
    return MB_EX_NONE;
}
 80016b4:	2000      	movs	r0, #0
 80016b6:	4770      	bx	lr
 80016b8:	f3af 8000 	nop.w
 80016bc:	f3af 8000 	nop.w

080016c0 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
}

/* The master request is broadcast? */
BOOL 
xMBMasterRequestIsBroadcast( void ){
	return xFrameIsBroadcast;
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x88>)
 80016c2:	781b      	ldrb	r3, [r3, #0]

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80016c4:	b9cb      	cbnz	r3, 80016fa <eMBMasterFuncReadWriteMultipleHoldingRegister+0x3a>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 80016c6:	880b      	ldrh	r3, [r1, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d916      	bls.n	80016fa <eMBMasterFuncReadWriteMultipleHoldingRegister+0x3a>
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80016cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <eMBMasterFuncReadWriteMultipleHoldingRegister+0x8c>)
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80016d2:	7841      	ldrb	r1, [r0, #1]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 80016d4:	791d      	ldrb	r5, [r3, #4]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 80016d6:	795c      	ldrb	r4, [r3, #5]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 80016d8:	f893 8002 	ldrb.w	r8, [r3, #2]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 80016dc:	78df      	ldrb	r7, [r3, #3]
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 80016de:	f893 c006 	ldrb.w	ip, [r3, #6]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80016e2:	79de      	ldrb	r6, [r3, #7]
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80016e4:	f893 e008 	ldrb.w	lr, [r3, #8]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 80016e8:	7a5a      	ldrb	r2, [r3, #9]
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 80016ea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 80016ee:	ebb1 0f44 	cmp.w	r1, r4, lsl #1
 80016f2:	d004      	beq.n	80016fe <eMBMasterFuncReadWriteMultipleHoldingRegister+0x3e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80016f4:	2003      	movs	r0, #3
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
    {
    	eStatus = MB_EX_NONE;
 80016fa:	2000      	movs	r0, #0
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
 80016fc:	4770      	bx	lr

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80016fe:	ea46 210c 	orr.w	r1, r6, ip, lsl #8
        usRegWriteAddress++;
 8001702:	3101      	adds	r1, #1
 8001704:	4605      	mov	r5, r0
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 8001706:	b289      	uxth	r1, r1
 8001708:	f103 000b 	add.w	r0, r3, #11
 800170c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8001710:	2301      	movs	r3, #1
 8001712:	f001 f895 	bl	8002840 <eMBMasterRegHoldingCB>
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8001716:	4603      	mov	r3, r0
 8001718:	b128      	cbz	r0, 8001726 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x66>
 800171a:	2b07      	cmp	r3, #7
 800171c:	d811      	bhi.n	8001742 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x82>
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x90>)
 8001720:	5cd0      	ldrb	r0, [r2, r3]
 8001722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 8001726:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
        usRegReadAddress++;
 800172a:	3101      	adds	r1, #1
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 800172c:	b289      	uxth	r1, r1
 800172e:	1ca8      	adds	r0, r5, #2
 8001730:	4622      	mov	r2, r4
 8001732:	f001 f885 	bl	8002840 <eMBMasterRegHoldingCB>
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 8001736:	4603      	mov	r3, r0
 8001738:	2800      	cmp	r0, #0
 800173a:	d1ee      	bne.n	800171a <eMBMasterFuncReadWriteMultipleHoldingRegister+0x5a>
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
    {
    	eStatus = MB_EX_NONE;
 800173c:	2000      	movs	r0, #0
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001742:	2004      	movs	r0, #4
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001748:	20005cf8 	.word	0x20005cf8
 800174c:	2000a8cc 	.word	0x2000a8cc
 8001750:	08005510 	.word	0x08005510
 8001754:	f3af 8000 	nop.w
 8001758:	f3af 8000 	nop.w
 800175c:	f3af 8000 	nop.w

08001760 <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <eMBMasterFuncReadHoldingRegister+0x50>)
 8001764:	781a      	ldrb	r2, [r3, #0]

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8001766:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800176a:	b9ea      	cbnz	r2, 80017a8 <eMBMasterFuncReadHoldingRegister+0x48>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800176c:	880a      	ldrh	r2, [r1, #0]
 800176e:	2a01      	cmp	r2, #1
 8001770:	d801      	bhi.n	8001776 <eMBMasterFuncReadHoldingRegister+0x16>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001772:	2003      	movs	r0, #3
 8001774:	bd38      	pop	{r3, r4, r5, pc}
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8001776:	490f      	ldr	r1, [pc, #60]	; (80017b4 <eMBMasterFuncReadHoldingRegister+0x54>)
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8001778:	790c      	ldrb	r4, [r1, #4]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800177a:	794a      	ldrb	r2, [r1, #5]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800177c:	788d      	ldrb	r5, [r1, #2]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800177e:	78c9      	ldrb	r1, [r1, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8001780:	ea52 2204 	orrs.w	r2, r2, r4, lsl #8
 8001784:	d0f5      	beq.n	8001772 <eMBMasterFuncReadHoldingRegister+0x12>
 8001786:	7844      	ldrb	r4, [r0, #1]
 8001788:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 800178c:	d1f1      	bne.n	8001772 <eMBMasterFuncReadHoldingRegister+0x12>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800178e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 8001792:	3101      	adds	r1, #1
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 8001794:	b289      	uxth	r1, r1
 8001796:	3002      	adds	r0, #2
 8001798:	f001 f852 	bl	8002840 <eMBMasterRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800179c:	b120      	cbz	r0, 80017a8 <eMBMasterFuncReadHoldingRegister+0x48>
 800179e:	2807      	cmp	r0, #7
 80017a0:	d804      	bhi.n	80017ac <eMBMasterFuncReadHoldingRegister+0x4c>
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <eMBMasterFuncReadHoldingRegister+0x58>)
 80017a4:	5c18      	ldrb	r0, [r3, r0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
    {
    	eStatus = MB_EX_NONE;
 80017a8:	2000      	movs	r0, #0
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80017ac:	2004      	movs	r0, #4
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
 80017b0:	20005cf8 	.word	0x20005cf8
 80017b4:	2000a8cc 	.word	0x2000a8cc
 80017b8:	08005510 	.word	0x08005510
 80017bc:	f3af 8000 	nop.w

080017c0 <eMBMasterFuncWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80017c0:	b538      	push	{r3, r4, r5, lr}

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80017c2:	880b      	ldrh	r3, [r1, #0]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d004      	beq.n	80017d2 <eMBMasterFuncWriteMultipleHoldingRegister+0x12>
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <eMBMasterFuncWriteMultipleHoldingRegister+0x4c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b90b      	cbnz	r3, 80017d2 <eMBMasterFuncWriteMultipleHoldingRegister+0x12>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80017ce:	2003      	movs	r0, #3
 80017d0:	bd38      	pop	{r3, r4, r5, pc}

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <eMBMasterFuncWriteMultipleHoldingRegister+0x50>)
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 80017d4:	7902      	ldrb	r2, [r0, #4]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80017d6:	7943      	ldrb	r3, [r0, #5]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 80017d8:	7981      	ldrb	r1, [r0, #6]

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 80017da:	7885      	ldrb	r5, [r0, #2]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80017dc:	78c4      	ldrb	r4, [r0, #3]
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 80017de:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 80017e2:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 80017e6:	d1f2      	bne.n	80017ce <eMBMasterFuncWriteMultipleHoldingRegister+0xe>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 80017e8:	ea44 2105 	orr.w	r1, r4, r5, lsl #8
        usRegAddress++;
 80017ec:	3101      	adds	r1, #1
        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 80017ee:	b289      	uxth	r1, r1
 80017f0:	3007      	adds	r0, #7
 80017f2:	2301      	movs	r3, #1
 80017f4:	f001 f824 	bl	8002840 <eMBMasterRegHoldingCB>
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80017f8:	b900      	cbnz	r0, 80017fc <eMBMasterFuncWriteMultipleHoldingRegister+0x3c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	2807      	cmp	r0, #7
 80017fe:	d802      	bhi.n	8001806 <eMBMasterFuncWriteMultipleHoldingRegister+0x46>
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <eMBMasterFuncWriteMultipleHoldingRegister+0x54>)
 8001802:	5c18      	ldrb	r0, [r3, r0]
 8001804:	bd38      	pop	{r3, r4, r5, pc}
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001806:	2004      	movs	r0, #4
 8001808:	e7f7      	b.n	80017fa <eMBMasterFuncWriteMultipleHoldingRegister+0x3a>
 800180a:	bf00      	nop
 800180c:	20005cf8 	.word	0x20005cf8
 8001810:	2000a8cc 	.word	0x2000a8cc
 8001814:	08005510 	.word	0x08005510
 8001818:	f3af 8000 	nop.w
 800181c:	f3af 8000 	nop.w

08001820 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001820:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8001822:	880b      	ldrh	r3, [r1, #0]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d001      	beq.n	800182c <eMBMasterFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001828:	2003      	movs	r0, #3
 800182a:	bd08      	pop	{r3, pc}
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800182c:	7883      	ldrb	r3, [r0, #2]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800182e:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001830:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 8001834:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001836:	2201      	movs	r2, #1
 8001838:	b289      	uxth	r1, r1
 800183a:	3003      	adds	r0, #3
 800183c:	4613      	mov	r3, r2
 800183e:	f000 ffff 	bl	8002840 <eMBMasterRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001842:	b900      	cbnz	r0, 8001846 <eMBMasterFuncWriteHoldingRegister+0x26>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8001844:	bd08      	pop	{r3, pc}
 8001846:	2807      	cmp	r0, #7
 8001848:	d802      	bhi.n	8001850 <eMBMasterFuncWriteHoldingRegister+0x30>
 800184a:	4b02      	ldr	r3, [pc, #8]	; (8001854 <eMBMasterFuncWriteHoldingRegister+0x34>)
 800184c:	5c18      	ldrb	r0, [r3, r0]
 800184e:	bd08      	pop	{r3, pc}
        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001850:	2004      	movs	r0, #4
 8001852:	e7f7      	b.n	8001844 <eMBMasterFuncWriteHoldingRegister+0x24>
 8001854:	08005510 	.word	0x08005510
 8001858:	f3af 8000 	nop.w
 800185c:	f3af 8000 	nop.w

08001860 <eMBMasterFuncWriteMultipleCoils>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8001860:	880b      	ldrh	r3, [r1, #0]
 8001862:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001864:	b510      	push	{r4, lr}

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8001866:	d004      	beq.n	8001872 <eMBMasterFuncWriteMultipleCoils+0x12>
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <eMBMasterFuncWriteMultipleCoils+0x5c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b90b      	cbnz	r3, 8001872 <eMBMasterFuncWriteMultipleCoils+0x12>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800186e:	2003      	movs	r0, #3
 8001870:	bd10      	pop	{r4, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8001872:	7903      	ldrb	r3, [r0, #4]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8001874:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8001876:	4912      	ldr	r1, [pc, #72]	; (80018c0 <eMBMasterFuncWriteMultipleCoils+0x60>)

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001878:	7844      	ldrb	r4, [r0, #1]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 800187a:	7989      	ldrb	r1, [r1, #6]
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800187c:	7880      	ldrb	r0, [r0, #2]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800187e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8001882:	0753      	lsls	r3, r2, #29
 8001884:	d00e      	beq.n	80018a4 <eMBMasterFuncWriteMultipleCoils+0x44>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8001886:	08d3      	lsrs	r3, r2, #3
 8001888:	3301      	adds	r3, #1
 800188a:	b2db      	uxtb	r3, r3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800188c:	4299      	cmp	r1, r3
 800188e:	d1ee      	bne.n	800186e <eMBMasterFuncWriteMultipleCoils+0xe>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001890:	ea40 2104 	orr.w	r1, r0, r4, lsl #8
        usRegAddress++;
 8001894:	3101      	adds	r1, #1
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8001896:	b289      	uxth	r1, r1
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <eMBMasterFuncWriteMultipleCoils+0x64>)
 800189a:	2301      	movs	r3, #1
 800189c:	f000 ff80 	bl	80027a0 <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80018a0:	b928      	cbnz	r0, 80018ae <eMBMasterFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80018a2:	bd10      	pop	{r4, pc}
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d0e2      	beq.n	800186e <eMBMasterFuncWriteMultipleCoils+0xe>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80018a8:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80018ac:	e7ee      	b.n	800188c <eMBMasterFuncWriteMultipleCoils+0x2c>
 80018ae:	2807      	cmp	r0, #7
 80018b0:	d802      	bhi.n	80018b8 <eMBMasterFuncWriteMultipleCoils+0x58>
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <eMBMasterFuncWriteMultipleCoils+0x68>)
 80018b4:	5c18      	ldrb	r0, [r3, r0]
 80018b6:	bd10      	pop	{r4, pc}
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80018b8:	2004      	movs	r0, #4
 80018ba:	e7f2      	b.n	80018a2 <eMBMasterFuncWriteMultipleCoils+0x42>
 80018bc:	20005cf8 	.word	0x20005cf8
 80018c0:	2000a8cc 	.word	0x2000a8cc
 80018c4:	2000a8d3 	.word	0x2000a8d3
 80018c8:	08005510 	.word	0x08005510
 80018cc:	f3af 8000 	nop.w

080018d0 <eMBMasterFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80018d0:	880b      	ldrh	r3, [r1, #0]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d001      	beq.n	80018da <eMBMasterFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80018d6:	2003      	movs	r0, #3
 80018d8:	4770      	bx	lr
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80018da:	7903      	ldrb	r3, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80018dc:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80018de:	7882      	ldrb	r2, [r0, #2]
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f8      	bne.n	80018d6 <eMBMasterFuncWriteCoil+0x6>
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80018e4:	b510      	push	{r4, lr}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80018e6:	78c4      	ldrb	r4, [r0, #3]
 80018e8:	1e60      	subs	r0, r4, #1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80018ea:	b2c0      	uxtb	r0, r0
 80018ec:	28fd      	cmp	r0, #253	; 0xfd
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80018ee:	b082      	sub	sp, #8
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80018f0:	d802      	bhi.n	80018f8 <eMBMasterFuncWriteCoil+0x28>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80018f2:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80018f4:	b002      	add	sp, #8
 80018f6:	bd10      	pop	{r4, pc}
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80018f8:	2cff      	cmp	r4, #255	; 0xff
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80018fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 80018fe:	f88d 3005 	strb.w	r3, [sp, #5]

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;
 8001902:	f102 0101 	add.w	r1, r2, #1
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
            {
                ucBuf[0] = 1;
 8001906:	bf08      	it	eq
 8001908:	2301      	moveq	r3, #1
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
 800190a:	2201      	movs	r2, #1
            {
                ucBuf[0] = 1;
            }
            else
            {
                ucBuf[0] = 0;
 800190c:	f88d 3004 	strb.w	r3, [sp, #4]
            }
            eRegStatus =
 8001910:	b289      	uxth	r1, r1
 8001912:	4613      	mov	r3, r2
 8001914:	a801      	add	r0, sp, #4
 8001916:	f000 ff43 	bl	80027a0 <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800191a:	2800      	cmp	r0, #0
 800191c:	d0ea      	beq.n	80018f4 <eMBMasterFuncWriteCoil+0x24>
 800191e:	2807      	cmp	r0, #7
 8001920:	d802      	bhi.n	8001928 <eMBMasterFuncWriteCoil+0x58>
 8001922:	4b02      	ldr	r3, [pc, #8]	; (800192c <eMBMasterFuncWriteCoil+0x5c>)
 8001924:	5c18      	ldrb	r0, [r3, r0]
 8001926:	e7e5      	b.n	80018f4 <eMBMasterFuncWriteCoil+0x24>
 8001928:	2004      	movs	r0, #4
 800192a:	e7e3      	b.n	80018f4 <eMBMasterFuncWriteCoil+0x24>
 800192c:	08005510 	.word	0x08005510

08001930 <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <eMBMasterFuncReadCoils+0x60>)
 8001934:	781b      	ldrb	r3, [r3, #0]

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8001936:	bb0b      	cbnz	r3, 800197c <eMBMasterFuncReadCoils+0x4c>
    {
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8001938:	880b      	ldrh	r3, [r1, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d801      	bhi.n	8001942 <eMBMasterFuncReadCoils+0x12>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800193e:	2003      	movs	r0, #3
 8001940:	bd38      	pop	{r3, r4, r5, pc}
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8001942:	4914      	ldr	r1, [pc, #80]	; (8001994 <eMBMasterFuncReadCoils+0x64>)
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 8001944:	794b      	ldrb	r3, [r1, #5]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 8001946:	790a      	ldrb	r2, [r1, #4]
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8001948:	788c      	ldrb	r4, [r1, #2]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800194a:	78c9      	ldrb	r1, [r1, #3]
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 800194c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 8001950:	0753      	lsls	r3, r2, #29
 8001952:	d015      	beq.n	8001980 <eMBMasterFuncReadCoils+0x50>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8001954:	08d3      	lsrs	r3, r2, #3
 8001956:	3301      	adds	r3, #1
 8001958:	b2db      	uxtb	r3, r3
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800195a:	7845      	ldrb	r5, [r0, #1]
 800195c:	429d      	cmp	r5, r3
 800195e:	d1ee      	bne.n	800193e <eMBMasterFuncReadCoils+0xe>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8001960:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
        usRegAddress++;
 8001964:	3101      	adds	r1, #1
         */
        if( ( usCoilCount >= 1 ) &&
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 8001966:	b289      	uxth	r1, r1
 8001968:	3002      	adds	r0, #2
 800196a:	2300      	movs	r3, #0
 800196c:	f000 ff18 	bl	80027a0 <eMBMasterRegCoilsCB>

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001970:	b120      	cbz	r0, 800197c <eMBMasterFuncReadCoils+0x4c>
 8001972:	2807      	cmp	r0, #7
 8001974:	d809      	bhi.n	800198a <eMBMasterFuncReadCoils+0x5a>
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <eMBMasterFuncReadCoils+0x68>)
 8001978:	5c18      	ldrb	r0, [r3, r0]
 800197a:	bd38      	pop	{r3, r4, r5, pc}
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
    {
    	eStatus = MB_EX_NONE;
 800197c:	2000      	movs	r0, #0
 800197e:	bd38      	pop	{r3, r4, r5, pc}
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8001980:	2a00      	cmp	r2, #0
 8001982:	d0dc      	beq.n	800193e <eMBMasterFuncReadCoils+0xe>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 8001984:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8001988:	e7e7      	b.n	800195a <eMBMasterFuncReadCoils+0x2a>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800198a:	2004      	movs	r0, #4
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800198c:	bd38      	pop	{r3, r4, r5, pc}
 800198e:	bf00      	nop
 8001990:	20005cf8 	.word	0x20005cf8
 8001994:	2000a8cc 	.word	0x2000a8cc
 8001998:	08005510 	.word	0x08005510
 800199c:	f3af 8000 	nop.w

080019a0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80019a2:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80019a4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 80019a6:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80019a8:	6814      	ldr	r4, [r2, #0]
 80019aa:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80019ac:	2501      	movs	r5, #1
 80019ae:	6063      	str	r3, [r4, #4]
 80019b0:	7715      	strb	r5, [r2, #28]
 80019b2:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 80019b4:	4610      	mov	r0, r2
}
 80019b6:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80019b8:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80019ba:	f7fe be19 	b.w	80005f0 <_port_switch>
 80019be:	bf00      	nop
 80019c0:	2000aba0 	.word	0x2000aba0
 80019c4:	f3af 8000 	nop.w
 80019c8:	f3af 8000 	nop.w
 80019cc:	f3af 8000 	nop.w

080019d0 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 80019d0:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 80019d2:	4852      	ldr	r0, [pc, #328]	; (8001b1c <Reset_Handler+0x14c>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 80019d4:	f380 8809 	msr	PSP, r0
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 80019d8:	2302      	movs	r3, #2
 80019da:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 80019de:	f3bf 8f6f 	isb	sy
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019e2:	494f      	ldr	r1, [pc, #316]	; (8001b20 <Reset_Handler+0x150>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <Reset_Handler+0x154>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019e6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019ea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019ee:	640c      	str	r4, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019f0:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80019f2:	680b      	ldr	r3, [r1, #0]
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019fa:	680a      	ldr	r2, [r1, #0]
 80019fc:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <Reset_Handler+0x150>)
 80019fe:	0795      	lsls	r5, r2, #30
 8001a00:	d5fb      	bpl.n	80019fa <Reset_Handler+0x2a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	f022 0203 	bic.w	r2, r2, #3
 8001a08:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001a0e:	4619      	mov	r1, r3
 8001a10:	688b      	ldr	r3, [r1, #8]
 8001a12:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <Reset_Handler+0x150>)
 8001a14:	f013 030c 	ands.w	r3, r3, #12
 8001a18:	d1fa      	bne.n	8001a10 <Reset_Handler+0x40>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8001a20:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001a22:	6093      	str	r3, [r2, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001a24:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001a2c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001a2e:	493c      	ldr	r1, [pc, #240]	; (8001b20 <Reset_Handler+0x150>)
 8001a30:	079c      	lsls	r4, r3, #30
 8001a32:	d5fb      	bpl.n	8001a2c <Reset_Handler+0x5c>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001a34:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <Reset_Handler+0x158>)
 8001a36:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001a38:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <Reset_Handler+0x154>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a40:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001a42:	6853      	ldr	r3, [r2, #4]
 8001a44:	0459      	lsls	r1, r3, #17
 8001a46:	d5fc      	bpl.n	8001a42 <Reset_Handler+0x72>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001a48:	4935      	ldr	r1, [pc, #212]	; (8001b20 <Reset_Handler+0x150>)
 8001a4a:	680a      	ldr	r2, [r1, #0]
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <Reset_Handler+0x150>)
 8001a4e:	0192      	lsls	r2, r2, #6
 8001a50:	d5fb      	bpl.n	8001a4a <Reset_Handler+0x7a>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a52:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <Reset_Handler+0x15c>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001a54:	4936      	ldr	r1, [pc, #216]	; (8001b30 <Reset_Handler+0x160>)
 8001a56:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a58:	f240 7103 	movw	r1, #1795	; 0x703
 8001a5c:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	f042 0202 	orr.w	r2, r2, #2
 8001a64:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a66:	461a      	mov	r2, r3
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	492d      	ldr	r1, [pc, #180]	; (8001b20 <Reset_Handler+0x150>)
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d1f9      	bne.n	8001a68 <Reset_Handler+0x98>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001a74:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <Reset_Handler+0x164>)
 8001a78:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <Reset_Handler+0x168>)
 8001a7a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a7e:	644c      	str	r4, [r1, #68]	; 0x44
 8001a80:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8001a82:	4293      	cmp	r3, r2
 8001a84:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a88:	664c      	str	r4, [r1, #100]	; 0x64
 8001a8a:	d20b      	bcs.n	8001aa4 <Reset_Handler+0xd4>
 8001a8c:	43d9      	mvns	r1, r3
 8001a8e:	440a      	add	r2, r1
 8001a90:	f022 0203 	bic.w	r2, r2, #3
 8001a94:	3204      	adds	r2, #4
 8001a96:	441a      	add	r2, r3
 8001a98:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8001a9c:	f843 1b04 	str.w	r1, [r3], #4
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d1fb      	bne.n	8001a9c <Reset_Handler+0xcc>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <Reset_Handler+0x16c>)
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	d20c      	bcs.n	8001ac4 <Reset_Handler+0xf4>
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <Reset_Handler+0x170>)
 8001aac:	1d19      	adds	r1, r3, #4
 8001aae:	1a52      	subs	r2, r2, r1
 8001ab0:	f022 0203 	bic.w	r2, r2, #3
 8001ab4:	3204      	adds	r2, #4
 8001ab6:	441a      	add	r2, r3
 8001ab8:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8001abc:	f843 1b04 	str.w	r1, [r3], #4
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d1fb      	bne.n	8001abc <Reset_Handler+0xec>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <Reset_Handler+0x174>)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <Reset_Handler+0x178>)
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d20c      	bcs.n	8001ae6 <Reset_Handler+0x116>
 8001acc:	43d0      	mvns	r0, r2
 8001ace:	4418      	add	r0, r3
 8001ad0:	f020 0003 	bic.w	r0, r0, #3
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <Reset_Handler+0x17c>)
 8001ad6:	3004      	adds	r0, #4
 8001ad8:	4418      	add	r0, r3
      *dp++ = *tp++;
 8001ada:	f853 1b04 	ldr.w	r1, [r3], #4
 8001ade:	f842 1b04 	str.w	r1, [r2], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8001ae2:	4283      	cmp	r3, r0
 8001ae4:	d1f9      	bne.n	8001ada <Reset_Handler+0x10a>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <Reset_Handler+0x180>)
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <Reset_Handler+0x184>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d20a      	bcs.n	8001b04 <Reset_Handler+0x134>
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	440a      	add	r2, r1
 8001af2:	f022 0203 	bic.w	r2, r2, #3
 8001af6:	3204      	adds	r2, #4
 8001af8:	441a      	add	r2, r3
 8001afa:	2100      	movs	r1, #0
 8001afc:	f843 1b04 	str.w	r1, [r3], #4
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d1fb      	bne.n	8001afc <Reset_Handler+0x12c>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8001b04:	4c14      	ldr	r4, [pc, #80]	; (8001b58 <Reset_Handler+0x188>)
 8001b06:	4d15      	ldr	r5, [pc, #84]	; (8001b5c <Reset_Handler+0x18c>)
 8001b08:	42ac      	cmp	r4, r5
 8001b0a:	d204      	bcs.n	8001b16 <Reset_Handler+0x146>
      (*fpp)();
 8001b0c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001b10:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8001b12:	42ac      	cmp	r4, r5
 8001b14:	d3fa      	bcc.n	8001b0c <Reset_Handler+0x13c>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 8001b16:	f7fe fb53 	bl	80001c0 <main>
 8001b1a:	bf00      	nop
 8001b1c:	20000800 	.word	0x20000800
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000
 8001b28:	08016410 	.word	0x08016410
 8001b2c:	40023c00 	.word	0x40023c00
 8001b30:	38081000 	.word	0x38081000
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000400 	.word	0x20000400
 8001b3c:	20000400 	.word	0x20000400
 8001b40:	20000803 	.word	0x20000803
 8001b44:	20000800 	.word	0x20000800
 8001b48:	2000108c 	.word	0x2000108c
 8001b4c:	08005cb8 	.word	0x08005cb8
 8001b50:	2000108c 	.word	0x2000108c
 8001b54:	2000b008 	.word	0x2000b008
 8001b58:	080001c0 	.word	0x080001c0
 8001b5c:	080001c0 	.word	0x080001c0

08001b60 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8001b60:	2a08      	cmp	r2, #8

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8001b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b64:	4616      	mov	r6, r2
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8001b66:	d816      	bhi.n	8001b96 <xMBUtilSetBits+0x36>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8001b68:	08cc      	lsrs	r4, r1, #3

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8001b6a:	2201      	movs	r2, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8001b6c:	18a5      	adds	r5, r4, r2

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8001b6e:	40b2      	lsls	r2, r6
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8001b70:	5d47      	ldrb	r7, [r0, r5]
 8001b72:	5d06      	ldrb	r6, [r0, r4]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8001b74:	3a01      	subs	r2, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8001b76:	eba1 01c4 	sub.w	r1, r1, r4, lsl #3
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	408a      	lsls	r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8001b7e:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8001b82:	b289      	uxth	r1, r1
 8001b84:	408b      	lsls	r3, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8001b86:	ea26 0202 	bic.w	r2, r6, r2
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	b292      	uxth	r2, r2

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8001b8e:	0a13      	lsrs	r3, r2, #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8001b90:	5502      	strb	r2, [r0, r4]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8001b92:	5543      	strb	r3, [r0, r5]
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <xMBUtilSetBits+0x44>)
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <xMBUtilSetBits+0x48>)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <xMBUtilSetBits+0x4c>)
 8001b9c:	2138      	movs	r1, #56	; 0x38
 8001b9e:	f001 f8ef 	bl	8002d80 <__assert_func>
 8001ba2:	bf00      	nop
 8001ba4:	08005704 	.word	0x08005704
 8001ba8:	08005520 	.word	0x08005520
 8001bac:	0800572c 	.word	0x0800572c

08001bb0 <eMBMasterFuncReadDiscreteInputs>:
 8001bb0:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <eMBMasterFuncReadDiscreteInputs+0xcc>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8001bb4:	b9bb      	cbnz	r3, 8001be6 <eMBMasterFuncReadDiscreteInputs+0x36>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8001bb6:	880b      	ldrh	r3, [r1, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d801      	bhi.n	8001bc0 <eMBMasterFuncReadDiscreteInputs+0x10>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	4770      	bx	lr
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8001bc4:	4a2e      	ldr	r2, [pc, #184]	; (8001c80 <eMBMasterFuncReadDiscreteInputs+0xd0>)
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 8001bc6:	7911      	ldrb	r1, [r2, #4]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8001bc8:	7953      	ldrb	r3, [r2, #5]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8001bca:	7897      	ldrb	r7, [r2, #2]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8001bcc:	78d4      	ldrb	r4, [r2, #3]
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8001bce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8001bd2:	f013 0607 	ands.w	r6, r3, #7
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8001bd6:	b083      	sub	sp, #12
        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8001bd8:	d107      	bne.n	8001bea <eMBMasterFuncReadDiscreteInputs+0x3a>
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d14b      	bne.n	8001c76 <eMBMasterFuncReadDiscreteInputs+0xc6>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bde:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8001be0:	b003      	add	sp, #12
 8001be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
    {
    	eStatus = MB_EX_NONE;
 8001be6:	2000      	movs	r0, #0
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8001be8:	4770      	bx	lr

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8001bea:	08dd      	lsrs	r5, r3, #3
 8001bec:	1c6a      	adds	r2, r5, #1
 8001bee:	b2d2      	uxtb	r2, r2
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8001bf0:	7841      	ldrb	r1, [r0, #1]
 8001bf2:	4291      	cmp	r1, r2
 8001bf4:	d1f3      	bne.n	8001bde <eMBMasterFuncReadDiscreteInputs+0x2e>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8001bf6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8001bfa:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <eMBMasterFuncReadDiscreteInputs+0xd4>)
    iNReg =  usNDiscrete / 8 + 1;

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
    usDiscreteInputStart = usMDiscInStart;
 8001bfc:	4922      	ldr	r1, [pc, #136]	; (8001c88 <eMBMasterFuncReadDiscreteInputs+0xd8>)
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	8809      	ldrh	r1, [r1, #0]

    /* it already plus one in modbus function method. */
    usAddress--;

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8001c02:	4423      	add	r3, r4
 8001c04:	2b10      	cmp	r3, #16
 8001c06:	dc34      	bgt.n	8001c72 <eMBMasterFuncReadDiscreteInputs+0xc2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8001c08:	1a64      	subs	r4, r4, r1
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <eMBMasterFuncReadDiscreteInputs+0xdc>)
    usAddress--;

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8001c0c:	b2a4      	uxth	r4, r4
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8001c0e:	3a01      	subs	r2, #1
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8001c10:	b2a9      	uxth	r1, r5
    usAddress--;

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8001c12:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8001c16:	9100      	str	r1, [sp, #0]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8001c18:	eb03 0842 	add.w	r8, r3, r2, lsl #1

    if ((usAddress >= DISCRETE_INPUT_START)
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8001c1c:	f004 0407 	and.w	r4, r4, #7
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8001c20:	f100 0a02 	add.w	sl, r0, #2

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8001c24:	b1d1      	cbz	r1, 8001c5c <eMBMasterFuncReadDiscreteInputs+0xac>
 8001c26:	1e4b      	subs	r3, r1, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f103 0903 	add.w	r9, r3, #3
 8001c2e:	4481      	add	r9, r0
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	4655      	mov	r5, sl
 8001c34:	4658      	mov	r0, fp
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8001c36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c3a:	1c47      	adds	r7, r0, #1
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4440      	add	r0, r8
 8001c40:	2208      	movs	r2, #8
 8001c42:	f7ff ff8d 	bl	8001b60 <xMBUtilSetBits>
 8001c46:	b2bf      	uxth	r7, r7
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8001c48:	454d      	cmp	r5, r9
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8001c4a:	4638      	mov	r0, r7
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8001c4c:	d1f3      	bne.n	8001c36 <eMBMasterFuncReadDiscreteInputs+0x86>
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	449b      	add	fp, r3
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	fa1f fb8b 	uxth.w	fp, fp
 8001c5a:	449a      	add	sl, r3
            iNReg--;
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 8001c5c:	b13e      	cbz	r6, 8001c6e <eMBMasterFuncReadDiscreteInputs+0xbe>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8001c5e:	eb08 000b 	add.w	r0, r8, fp
 8001c62:	4621      	mov	r1, r4
 8001c64:	4632      	mov	r2, r6
 8001c66:	f89a 3000 	ldrb.w	r3, [sl]
 8001c6a:	f7ff ff79 	bl	8001b60 <xMBUtilSetBits>
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e7b6      	b.n	8001be0 <eMBMasterFuncReadDiscreteInputs+0x30>
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8001c72:	2002      	movs	r0, #2
 8001c74:	e7b4      	b.n	8001be0 <eMBMasterFuncReadDiscreteInputs+0x30>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 8001c76:	08dd      	lsrs	r5, r3, #3
 8001c78:	b2ea      	uxtb	r2, r5
 8001c7a:	e7b9      	b.n	8001bf0 <eMBMasterFuncReadDiscreteInputs+0x40>
 8001c7c:	20005cf8 	.word	0x20005cf8
 8001c80:	2000a8cc 	.word	0x2000a8cc
 8001c84:	2000a8a9 	.word	0x2000a8a9
 8001c88:	20005cb4 	.word	0x20005cb4
 8001c8c:	20005c90 	.word	0x20005c90

08001c90 <_isatty_r>:
{
  (void)r;
  (void)fd;

  return 1;
}
 8001c90:	2001      	movs	r0, #1
 8001c92:	4770      	bx	lr
 8001c94:	f3af 8000 	nop.w
 8001c98:	f3af 8000 	nop.w
 8001c9c:	f3af 8000 	nop.w

08001ca0 <_fstat_r>:
}

/***************************************************************************/

int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 8001ca0:	b510      	push	{r4, lr}
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 8001ca2:	4610      	mov	r0, r2
}

/***************************************************************************/

int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 8001ca4:	4614      	mov	r4, r2
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	223c      	movs	r2, #60	; 0x3c
 8001caa:	f003 f811 	bl	8004cd0 <memset>
  st->st_mode = S_IFCHR;
 8001cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb2:	6063      	str	r3, [r4, #4]
  return 0;
}
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	bd10      	pop	{r4, pc}
 8001cb8:	f3af 8000 	nop.w
 8001cbc:	f3af 8000 	nop.w

08001cc0 <_sbrk_r>:
}

/***************************************************************************/

caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr > 0);

  p = chCoreAlloc((size_t)incr);
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	f7ff f86b 	bl	8000da0 <chCoreAlloc>
  if (p == NULL) {
 8001cca:	b100      	cbz	r0, 8001cce <_sbrk_r+0xe>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8001ccc:	bd10      	pop	{r4, pc}

  chDbgCheck(incr > 0);

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
    __errno_r(r) = ENOMEM;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 8001cd2:	f04f 30ff 	mov.w	r0, #4294967295
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8001cd6:	bd10      	pop	{r4, pc}
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	f3af 8000 	nop.w

08001ce0 <_close_r>:
{
  (void)r;
  (void)file;

  return 0;
}
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	4770      	bx	lr
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <_write_r>:
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4770      	bx	lr
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	f3af 8000 	nop.w

08001d00 <_lseek_r>:
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	4770      	bx	lr
 8001d04:	f3af 8000 	nop.w
 8001d08:	f3af 8000 	nop.w
 8001d0c:	f3af 8000 	nop.w

08001d10 <_read_r>:
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r) = EINVAL;
 8001d10:	2316      	movs	r3, #22
 8001d12:	6003      	str	r3, [r0, #0]
  return -1;
#endif
}
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	f3af 8000 	nop.w

08001d20 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001d20:	b470      	push	{r4, r5, r6}
 8001d22:	2320      	movs	r3, #32
 8001d24:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <chThdExit+0x58>)
 8001d2a:	699d      	ldr	r5, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001d2c:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001d2e:	6228      	str	r0, [r5, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting)) {
 8001d30:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d34:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d36:	bf18      	it	ne
 8001d38:	2600      	movne	r6, #0
 8001d3a:	d010      	beq.n	8001d5e <chThdExit+0x3e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001d3c:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <chThdExit+0x58>)
 8001d40:	68a1      	ldr	r1, [r4, #8]
 8001d42:	626a      	str	r2, [r5, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d44:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001d46:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	428a      	cmp	r2, r1
 8001d4c:	d2fb      	bcs.n	8001d46 <chThdExit+0x26>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001d52:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8001d54:	605c      	str	r4, [r3, #4]
 8001d56:	6014      	str	r4, [r2, #0]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001d58:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001d5a:	4284      	cmp	r4, r0
 8001d5c:	d1ee      	bne.n	8001d3c <chThdExit+0x1c>
  }
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001d5e:	7f6b      	ldrb	r3, [r5, #29]
 8001d60:	079b      	lsls	r3, r3, #30
 8001d62:	d104      	bne.n	8001d6e <chThdExit+0x4e>
    REG_REMOVE(tp);
 8001d64:	696b      	ldr	r3, [r5, #20]
 8001d66:	692a      	ldr	r2, [r5, #16]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	692a      	ldr	r2, [r5, #16]
 8001d6c:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001d6e:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8001d70:	bc70      	pop	{r4, r5, r6}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001d72:	f7ff be15 	b.w	80019a0 <chSchGoSleepS>
 8001d76:	bf00      	nop
 8001d78:	2000aba0 	.word	0x2000aba0
 8001d7c:	f3af 8000 	nop.w

08001d80 <chVTDoResetI>:
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001d80:	6802      	ldr	r2, [r0, #0]
 8001d82:	6883      	ldr	r3, [r0, #8]
 8001d84:	6891      	ldr	r1, [r2, #8]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001d86:	b430      	push	{r4, r5}
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001d88:	4c13      	ldr	r4, [pc, #76]	; (8001dd8 <chVTDoResetI+0x58>)
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001d8a:	6845      	ldr	r5, [r0, #4]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001d8c:	4419      	add	r1, r3
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001d8e:	4623      	mov	r3, r4
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001d90:	6091      	str	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001d92:	602a      	str	r2, [r5, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001d94:	6801      	ldr	r1, [r0, #0]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001d96:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001d9a:	604d      	str	r5, [r1, #4]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001d9c:	429a      	cmp	r2, r3

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 8001d9e:	f04f 0100 	mov.w	r1, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001da2:	f04f 35ff 	mov.w	r5, #4294967295

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 8001da6:	60c1      	str	r1, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001da8:	6265      	str	r5, [r4, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001daa:	d010      	beq.n	8001dce <chVTDoResetI+0x4e>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA) {
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d906      	bls.n	8001dc0 <chVTDoResetI+0x40>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8001db2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001db4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001db8:	4413      	add	r3, r2
 8001dba:	634b      	str	r3, [r1, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
      }
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001dbc:	bc30      	pop	{r4, r5}
 8001dbe:	4770      	bx	lr
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA) {
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      }
      else {
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8001dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	6353      	str	r3, [r2, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
      }
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001dca:	bc30      	pop	{r4, r5}
 8001dcc:	4770      	bx	lr
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd2:	60d9      	str	r1, [r3, #12]
 8001dd4:	e7f2      	b.n	8001dbc <chVTDoResetI+0x3c>
 8001dd6:	bf00      	nop
 8001dd8:	2000aba0 	.word	0x2000aba0
 8001ddc:	f3af 8000 	nop.w

08001de0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8001de2:	4d1a      	ldr	r5, [pc, #104]	; (8001e4c <chVTDoSetI+0x6c>)
 8001de4:	462e      	mov	r6, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001de6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001dea:	f856 4f1c 	ldr.w	r4, [r6, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001dee:	60c2      	str	r2, [r0, #12]
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA) {
      delay = CH_CFG_ST_TIMEDELTA;
 8001df0:	2901      	cmp	r1, #1
 8001df2:	bf98      	it	ls
 8001df4:	2102      	movls	r1, #2
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8001df6:	42b4      	cmp	r4, r6
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001df8:	6103      	str	r3, [r0, #16]
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA) {
      delay = CH_CFG_ST_TIMEDELTA;
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8001dfc:	d01b      	beq.n	8001e36 <chVTDoSetI+0x56>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8001dfe:	6aae      	ldr	r6, [r5, #40]	; 0x28

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
 8001e00:	68a3      	ldr	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8001e02:	1b92      	subs	r2, r2, r6
 8001e04:	4411      	add	r1, r2

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d203      	bcs.n	8001e12 <chVTDoSetI+0x32>
 8001e0a:	e011      	b.n	8001e30 <chVTDoSetI+0x50>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
    p = p->vt_next;
 8001e0c:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8001e0e:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8001e10:	68a3      	ldr	r3, [r4, #8]
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d3fa      	bcc.n	8001e0c <chVTDoSetI+0x2c>
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8001e16:	6863      	ldr	r3, [r4, #4]
 8001e18:	6043      	str	r3, [r0, #4]
 8001e1a:	6004      	str	r4, [r0, #0]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8001e1c:	6060      	str	r0, [r4, #4]
 8001e1e:	6018      	str	r0, [r3, #0]
  vtp->vt_delta = delay
 8001e20:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8001e22:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8001e28:	1a59      	subs	r1, r3, r1
 8001e2a:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001e2c:	626a      	str	r2, [r5, #36]	; 0x24
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8001e30:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e32:	637e      	str	r6, [r7, #52]	; 0x34
 8001e34:	e7ed      	b.n	8001e12 <chVTDoSetI+0x32>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001e36:	188b      	adds	r3, r1, r2
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8001e38:	62aa      	str	r2, [r5, #40]	; 0x28
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8001e3a:	f04f 0e00 	mov.w	lr, #0
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001e40:	2602      	movs	r6, #2
 8001e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8001e44:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001e48:	60fe      	str	r6, [r7, #12]
 8001e4a:	e7e2      	b.n	8001e12 <chVTDoSetI+0x32>
 8001e4c:	2000aba0 	.word	0x2000aba0

08001e50 <xMBMasterRTUTransmitFSM>:
    return xTaskNeedSwitch;
}

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_M_RX_IDLE );
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <xMBMasterRTUTransmitFSM+0xec>)
 8001e54:	7818      	ldrb	r0, [r3, #0]
 8001e56:	b2c0      	uxtb	r0, r0
 8001e58:	2801      	cmp	r0, #1
 8001e5a:	d168      	bne.n	8001f2e <xMBMasterRTUTransmitFSM+0xde>

    switch ( eSndState )
 8001e5c:	4c38      	ldr	r4, [pc, #224]	; (8001f40 <xMBMasterRTUTransmitFSM+0xf0>)
 8001e5e:	7823      	ldrb	r3, [r4, #0]
 8001e60:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d033      	beq.n	8001ed0 <xMBMasterRTUTransmitFSM+0x80>
 8001e68:	2901      	cmp	r1, #1
 8001e6a:	d12f      	bne.n	8001ecc <xMBMasterRTUTransmitFSM+0x7c>
        vMBMasterPortSerialEnable( TRUE, FALSE );
        break;

    case STATE_M_TX_XMIT:
        /* check if we are finished. */
        if( usMasterSndBufferCount != 0 )
 8001e6c:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <xMBMasterRTUTransmitFSM+0xf4>)
 8001e6e:	8813      	ldrh	r3, [r2, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	bb8b      	cbnz	r3, 8001ed8 <xMBMasterRTUTransmitFSM+0x88>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8001e74:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <xMBMasterRTUTransmitFSM+0xf8>)
 8001e76:	4d35      	ldr	r5, [pc, #212]	; (8001f4c <xMBMasterRTUTransmitFSM+0xfc>)
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	fab2 f282 	clz	r2, r2
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8001e7e:	4608      	mov	r0, r1
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8001e80:	0952      	lsrs	r2, r2, #5
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8001e82:	4619      	mov	r1, r3
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8001e84:	702a      	strb	r2, [r5, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8001e86:	f000 fc43 	bl	8002710 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	7023      	strb	r3, [r4, #0]
            /* If the frame is broadcast ,master will enable timer of convert delay,
             * else master will enable timer of respond timeout. */
            if ( xFrameIsBroadcast == TRUE )
 8001e8e:	782a      	ldrb	r2, [r5, #0]
 8001e90:	2a01      	cmp	r2, #1
 8001e92:	d031      	beq.n	8001ef8 <xMBMasterRTUTransmitFSM+0xa8>
}

void vMBMasterPortTimersRespondTimeoutEnable()
{
	//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "TimeOut Enable");
	palSetPad(GPIOC, GPIOC_PIN10);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <xMBMasterRTUTransmitFSM+0x100>)
 8001e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9a:	831a      	strh	r2, [r3, #24]
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	4c2c      	ldr	r4, [pc, #176]	; (8001f54 <xMBMasterRTUTransmitFSM+0x104>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001ea4:	68e3      	ldr	r3, [r4, #12]
 8001ea6:	b13b      	cbz	r3, 8001eb8 <xMBMasterRTUTransmitFSM+0x68>
    chVTDoResetI(vtp);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff69 	bl	8001d80 <chVTDoResetI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001eae:	68e3      	ldr	r3, [r4, #12]
 8001eb0:	b113      	cbz	r3, 8001eb8 <xMBMasterRTUTransmitFSM+0x68>
    chVTDoResetI(vtp);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff ff64 	bl	8001d80 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001eb8:	4826      	ldr	r0, [pc, #152]	; (8001f54 <xMBMasterRTUTransmitFSM+0x104>)
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <xMBMasterRTUTransmitFSM+0x108>)
 8001ebc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f7ff ff8d 	bl	8001de0 <chVTDoSetI>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f383 8811 	msr	BASEPRI, r3
        }
        break;
    }

    return xNeedPoll;
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_M_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8001ed0:	f000 fc1e 	bl	8002710 <vMBMasterPortSerialEnable>
        }
        break;
    }

    return xNeedPoll;
}
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}

    case STATE_M_TX_XMIT:
        /* check if we are finished. */
        if( usMasterSndBufferCount != 0 )
        {
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <xMBMasterRTUTransmitFSM+0x10c>)
    uartStop(serial);
}

BOOL xMBMasterPortSerialPutByte(CHAR ucByte)
{
	USART_TypeDef *ureg = serial->usart;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <xMBMasterRTUTransmitFSM+0x110>)
 8001edc:	6801      	ldr	r1, [r0, #0]
 8001ede:	681c      	ldr	r4, [r3, #0]
 8001ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ee4:	68a4      	ldr	r4, [r4, #8]
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8001ee6:	6001      	str	r1, [r0, #0]

    case STATE_M_TX_XMIT:
        /* check if we are finished. */
        if( usMasterSndBufferCount != 0 )
        {
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8001ee8:	b2db      	uxtb	r3, r3
	
	//chprintf((BaseSequentialStream *)&itm_port, "ucByte: %d\n", ucByte);
	
	(ureg->DR) = (uint8_t)ucByte;
 8001eea:	6063      	str	r3, [r4, #4]
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
 8001eec:	8813      	ldrh	r3, [r2, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	8013      	strh	r3, [r2, #0]
        }
        break;
    }

    return xNeedPoll;
}
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}

/* Set Modbus Master current timer mode.*/
void 
vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
	eMasterCurTimerMode = eMBTimerMode;
 8001ef8:	491a      	ldr	r1, [pc, #104]	; (8001f64 <xMBMasterRTUTransmitFSM+0x114>)
 8001efa:	2220      	movs	r2, #32
 8001efc:	700b      	strb	r3, [r1, #0]
 8001efe:	f382 8811 	msr	BASEPRI, r2
 8001f02:	4c19      	ldr	r4, [pc, #100]	; (8001f68 <xMBMasterRTUTransmitFSM+0x118>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001f04:	68e3      	ldr	r3, [r4, #12]
 8001f06:	b13b      	cbz	r3, 8001f18 <xMBMasterRTUTransmitFSM+0xc8>
    chVTDoResetI(vtp);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff39 	bl	8001d80 <chVTDoResetI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	b113      	cbz	r3, 8001f18 <xMBMasterRTUTransmitFSM+0xc8>
    chVTDoResetI(vtp);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff ff34 	bl	8001d80 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001f18:	4813      	ldr	r0, [pc, #76]	; (8001f68 <xMBMasterRTUTransmitFSM+0x118>)
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <xMBMasterRTUTransmitFSM+0x108>)
 8001f1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f20:	2300      	movs	r3, #0
 8001f22:	f7ff ff5d 	bl	8001de0 <chVTDoSetI>
 8001f26:	2300      	movs	r3, #0
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	e7ce      	b.n	8001ecc <xMBMasterRTUTransmitFSM+0x7c>
BOOL
xMBMasterRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_M_RX_IDLE );
 8001f2e:	480f      	ldr	r0, [pc, #60]	; (8001f6c <xMBMasterRTUTransmitFSM+0x11c>)
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <xMBMasterRTUTransmitFSM+0x120>)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <xMBMasterRTUTransmitFSM+0x124>)
 8001f34:	f240 1133 	movw	r1, #307	; 0x133
 8001f38:	f000 ff22 	bl	8002d80 <__assert_func>
 8001f3c:	20005cb3 	.word	0x20005cb3
 8001f40:	20005cb2 	.word	0x20005cb2
 8001f44:	20005c8c 	.word	0x20005c8c
 8001f48:	2000a8cc 	.word	0x2000a8cc
 8001f4c:	20005cf8 	.word	0x20005cf8
 8001f50:	40020800 	.word	0x40020800
 8001f54:	20005ce4 	.word	0x20005ce4
 8001f58:	08002091 	.word	0x08002091
 8001f5c:	20005cb8 	.word	0x20005cb8
 8001f60:	20005ccc 	.word	0x20005ccc
 8001f64:	20005cc8 	.word	0x20005cc8
 8001f68:	2000a8b4 	.word	0x2000a8b4
 8001f6c:	08005598 	.word	0x08005598
 8001f70:	08005550 	.word	0x08005550
 8001f74:	0800573c 	.word	0x0800573c
 8001f78:	f3af 8000 	nop.w
 8001f7c:	f3af 8000 	nop.w

08001f80 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001f80:	b500      	push	{lr}
 8001f82:	2320      	movs	r3, #32
 8001f84:	b087      	sub	sp, #28
 8001f86:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001f8a:	1c43      	adds	r3, r0, #1
 8001f8c:	d014      	beq.n	8001fb8 <chThdSleep+0x38>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <chThdSleep+0x4c>)
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <chThdSleep+0x50>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4601      	mov	r1, r0
 8001f96:	a801      	add	r0, sp, #4
 8001f98:	f7ff ff22 	bl	8001de0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001f9c:	2008      	movs	r0, #8
 8001f9e:	f7ff fcff 	bl	80019a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8001fa2:	9b04      	ldr	r3, [sp, #16]
 8001fa4:	b113      	cbz	r3, 8001fac <chThdSleep+0x2c>
      chVTDoResetI(&vt);
 8001fa6:	a801      	add	r0, sp, #4
 8001fa8:	f7ff feea 	bl	8001d80 <chVTDoResetI>
 8001fac:	2300      	movs	r3, #0
 8001fae:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8001fb2:	b007      	add	sp, #28
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
  }
  else {
    chSchGoSleepS(newstate);
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f7ff fcf1 	bl	80019a0 <chSchGoSleepS>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	b007      	add	sp, #28
 8001fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fca:	bf00      	nop
 8001fcc:	2000aba0 	.word	0x2000aba0
 8001fd0:	08000de1 	.word	0x08000de1
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	f3af 8000 	nop.w
 8001fdc:	f3af 8000 	nop.w

08001fe0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <chSchDoReschedule+0x38>)
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001fe2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001fe4:	b470      	push	{r4, r5, r6}

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001fe6:	6803      	ldr	r3, [r0, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001fe8:	6994      	ldr	r4, [r2, #24]
 8001fea:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001fec:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8001fee:	2500      	movs	r5, #0
 8001ff0:	68a1      	ldr	r1, [r4, #8]
 8001ff2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001ff4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001ff6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001ff8:	7725      	strb	r5, [r4, #28]
 8001ffa:	e000      	b.n	8001ffe <chSchDoReschedule+0x1e>
 8001ffc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	428a      	cmp	r2, r1
 8002002:	d8fb      	bhi.n	8001ffc <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8002008:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800200a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;
 800200c:	605c      	str	r4, [r3, #4]
 800200e:	6014      	str	r4, [r2, #0]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8002010:	bc70      	pop	{r4, r5, r6}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8002012:	f7fe baed 	b.w	80005f0 <_port_switch>
 8002016:	bf00      	nop
 8002018:	2000aba0 	.word	0x2000aba0
 800201c:	f3af 8000 	nop.w

08002020 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002022:	490f      	ldr	r1, [pc, #60]	; (8002060 <chTMStopMeasurementX+0x40>)
 8002024:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002026:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002028:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800202a:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800202c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800202e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002030:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8002038:	18e4      	adds	r4, r4, r3
 800203a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800203e:	3601      	adds	r6, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8002040:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002042:	60c6      	str	r6, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002044:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002046:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 800204a:	d805      	bhi.n	8002058 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800204c:	6802      	ldr	r2, [r0, #0]
 800204e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8002050:	bf38      	it	cc
 8002052:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8002054:	bcf0      	pop	{r4, r5, r6, r7}
 8002056:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8002058:	6043      	str	r3, [r0, #4]
 800205a:	e7fb      	b.n	8002054 <chTMStopMeasurementX+0x34>
 800205c:	e0001000 	.word	0xe0001000
 8002060:	2000aba0 	.word	0x2000aba0
 8002064:	f3af 8000 	nop.w
 8002068:	f3af 8000 	nop.w
 800206c:	f3af 8000 	nop.w

08002070 <reads.lto_priv.39>:
  (void)ip;
  (void)bp;
  (void)n;

  return 0;
}
 8002070:	2000      	movs	r0, #0
 8002072:	4770      	bx	lr
 8002074:	f3af 8000 	nop.w
 8002078:	f3af 8000 	nop.w
 800207c:	f3af 8000 	nop.w

08002080 <get.lto_priv.41>:
static msg_t get(void *ip) {

  (void)ip;

  return 4;
}
 8002080:	2004      	movs	r0, #4
 8002082:	4770      	bx	lr
 8002084:	f3af 8000 	nop.w
 8002088:	f3af 8000 	nop.w
 800208c:	f3af 8000 	nop.w

08002090 <timer_timeout_ind.lto_priv.50>:
	chSysUnlockFromISR();
}

void prvvTIMERExpiredISR(void)
{
    (void) pxMBMasterPortCBTimerExpired();
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <timer_timeout_ind.lto_priv.50+0x8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4718      	bx	r3
 8002096:	bf00      	nop
 8002098:	20005cc0 	.word	0x20005cc0
 800209c:	f3af 8000 	nop.w

080020a0 <rxchar>:
	(void)uartp;
	(void)c;
	
	//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Rx Not Empty...");
	//chSysLockFromISR();
	pxMBMasterFrameCBByteReceived();
 80020a0:	4b01      	ldr	r3, [pc, #4]	; (80020a8 <rxchar+0x8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4718      	bx	r3
 80020a6:	bf00      	nop
 80020a8:	2000a884 	.word	0x2000a884
 80020ac:	f3af 8000 	nop.w

080020b0 <txend1>:
static void txend1(UARTDriver *uartp){
	(void)uartp;
	
	//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "TxEmpty...");
	//chSysLockFromISR();
	pxMBMasterFrameCBTransmitterEmpty();
 80020b0:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <txend1+0x8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4718      	bx	r3
 80020b6:	bf00      	nop
 80020b8:	20005cd4 	.word	0x20005cd4
 80020bc:	f3af 8000 	nop.w

080020c0 <Thread1.lto_priv.34>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80020c0:	b508      	push	{r3, lr}

  (void)arg;
  chRegSetThreadName("sender");
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <Thread1.lto_priv.34+0x28>)
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <Thread1.lto_priv.34+0x2c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
  while (TRUE) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 80020c8:	4c09      	ldr	r4, [pc, #36]	; (80020f0 <Thread1.lto_priv.34+0x30>)
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("sender");
 80020ca:	619a      	str	r2, [r3, #24]
  while (TRUE) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 80020cc:	2520      	movs	r5, #32
 80020ce:	462e      	mov	r6, r5
 80020d0:	8366      	strh	r6, [r4, #26]
	chThdSleepMilliseconds(300);
 80020d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020d6:	f7ff ff53 	bl	8001f80 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 80020da:	8325      	strh	r5, [r4, #24]
	chThdSleepMilliseconds(300);
 80020dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020e0:	f7ff ff4e 	bl	8001f80 <chThdSleep>
 80020e4:	e7f4      	b.n	80020d0 <Thread1.lto_priv.34+0x10>
 80020e6:	bf00      	nop
 80020e8:	2000aba0 	.word	0x2000aba0
 80020ec:	08005960 	.word	0x08005960
 80020f0:	40020000 	.word	0x40020000
 80020f4:	f3af 8000 	nop.w
 80020f8:	f3af 8000 	nop.w
 80020fc:	f3af 8000 	nop.w

08002100 <modbusreq_thread.lto_priv.36>:
	chThdSleepMilliseconds(100);
  }
}

static THD_WORKING_AREA(wa_modbusreq_thread, 128);
static THD_FUNCTION(modbusreq_thread, arg) {
 8002100:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  eMBMasterReqErrCode	errorCode = MB_MRE_NO_ERR;
  uint16_t			i;

  (void)arg;
  chRegSetThreadName("modbus_request");
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <modbusreq_thread.lto_priv.36+0x88>)
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <modbusreq_thread.lto_priv.36+0x8c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4d21      	ldr	r5, [pc, #132]	; (8002190 <modbusreq_thread.lto_priv.36+0x90>)
 800210c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80021b0 <modbusreq_thread.lto_priv.36+0xb0>
 8002110:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80021b4 <modbusreq_thread.lto_priv.36+0xb4>
 8002114:	4f1f      	ldr	r7, [pc, #124]	; (8002194 <modbusreq_thread.lto_priv.36+0x94>)
 8002116:	4e20      	ldr	r6, [pc, #128]	; (8002198 <modbusreq_thread.lto_priv.36+0x98>)
 8002118:	619a      	str	r2, [r3, #24]
}
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
	ucMBMasterDestAddress = Address;
 800211a:	f04f 0a0a 	mov.w	sl, #10
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 800211e:	2014      	movs	r0, #20
 8002120:	f889 0005 	strb.w	r0, [r9, #5]

/* Set Modbus Master send PDU's buffer length.*/
void 
vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
	usMasterSendPDULength = SendPDULength;
 8002124:	481d      	ldr	r0, [pc, #116]	; (800219c <modbusreq_thread.lto_priv.36+0x9c>)
 8002126:	f885 a000 	strb.w	sl, [r5]
 800212a:	2105      	movs	r1, #5
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
 800212c:	2203      	movs	r2, #3
 800212e:	8001      	strh	r1, [r0, #0]
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002130:	491b      	ldr	r1, [pc, #108]	; (80021a0 <modbusreq_thread.lto_priv.36+0xa0>)
 8002132:	f889 2001 	strb.w	r2, [r9, #1]
 8002136:	2201      	movs	r2, #1
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 8002138:	2393      	movs	r3, #147	; 0x93
 800213a:	700a      	strb	r2, [r1, #0]
    eQueuedEvent = eEvent;
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <modbusreq_thread.lto_priv.36+0xa4>)
 800213e:	f889 3003 	strb.w	r3, [r9, #3]
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 8002142:	2400      	movs	r4, #0
 8002144:	2308      	movs	r3, #8
 8002146:	7013      	strb	r3, [r2, #0]
 8002148:	f889 4002 	strb.w	r4, [r9, #2]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 800214c:	f889 4004 	strb.w	r4, [r9, #4]
 8002150:	230a      	movs	r3, #10

void display_holding(void){
	uint16_t			i;
	
	for(i = 0; i <= xtholdingNRegs; i++){
		chprintf((BaseSequentialStream *)&itm_port, "usMRegHoldBuf[%d]: %d\n", xtholdingRegIndex + i, usMRegHoldBuf[ucMBMasterGetDestAddress() - 1][xtholdingRegIndex + i]);
 8002152:	f44f 7b16 	mov.w	fp, #600	; 0x258
 8002156:	e000      	b.n	800215a <modbusreq_thread.lto_priv.36+0x5a>
 8002158:	782b      	ldrb	r3, [r5, #0]
 800215a:	f8b8 2000 	ldrh.w	r2, [r8]
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <modbusreq_thread.lto_priv.36+0xa8>)
 8002160:	4912      	ldr	r1, [pc, #72]	; (80021ac <modbusreq_thread.lto_priv.36+0xac>)
 8002162:	4422      	add	r2, r4
 8002164:	3b01      	subs	r3, #1
 8002166:	fb0b 2303 	mla	r3, fp, r3, r2
static USHORT   usMRegHoldBuf[MB_MASTER_TOTAL_SLAVE_NUM][M_REG_HOLDING_NREGS];

void display_holding(void){
	uint16_t			i;
	
	for(i = 0; i <= xtholdingNRegs; i++){
 800216a:	3401      	adds	r4, #1
		chprintf((BaseSequentialStream *)&itm_port, "usMRegHoldBuf[%d]: %d\n", xtholdingRegIndex + i, usMRegHoldBuf[ucMBMasterGetDestAddress() - 1][xtholdingRegIndex + i]);
 800216c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8002170:	f000 fdf6 	bl	8002d60 <chprintf.constprop.0>
static USHORT   usMRegHoldBuf[MB_MASTER_TOTAL_SLAVE_NUM][M_REG_HOLDING_NREGS];

void display_holding(void){
	uint16_t			i;
	
	for(i = 0; i <= xtholdingNRegs; i++){
 8002174:	8833      	ldrh	r3, [r6, #0]
 8002176:	b2a4      	uxth	r4, r4
 8002178:	42a3      	cmp	r3, r4
 800217a:	d2ed      	bcs.n	8002158 <modbusreq_thread.lto_priv.36+0x58>
  while (TRUE) {
	errorCode = eMBMasterReqReadHoldingRegister(10, 147, 20, -1);
	
	display_holding();
	
	chThdSleepMilliseconds(850);
 800217c:	f242 1034 	movw	r0, #8500	; 0x2134
 8002180:	f7ff fefe 	bl	8001f80 <chThdSleep>
 8002184:	e7cb      	b.n	800211e <modbusreq_thread.lto_priv.36+0x1e>
 8002186:	bf00      	nop
 8002188:	2000aba0 	.word	0x2000aba0
 800218c:	08005968 	.word	0x08005968
 8002190:	2000a8a9 	.word	0x2000a8a9
 8002194:	20005cfc 	.word	0x20005cfc
 8002198:	20005cd8 	.word	0x20005cd8
 800219c:	2000a8ac 	.word	0x2000a8ac
 80021a0:	20005cf9 	.word	0x20005cf9
 80021a4:	2000a8c8 	.word	0x2000a8c8
 80021a8:	2000ae38 	.word	0x2000ae38
 80021ac:	08005978 	.word	0x08005978
 80021b0:	2000a8cc 	.word	0x2000a8cc
 80021b4:	20005ce0 	.word	0x20005ce0
 80021b8:	f3af 8000 	nop.w
 80021bc:	f3af 8000 	nop.w

080021c0 <modbus_thread.lto_priv.35>:
static THD_FUNCTION(modbus_thread, arg) {
  eMBErrorCode			eStatus;
  eMBMasterReqErrCode	errorCode = MB_MRE_NO_ERR;

  (void)arg;
  chRegSetThreadName("modbus_poll");
 80021c0:	4bac      	ldr	r3, [pc, #688]	; (8002474 <modbus_thread.lto_priv.35+0x2b4>)
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 80021c2:	4aad      	ldr	r2, [pc, #692]	; (8002478 <modbus_thread.lto_priv.35+0x2b8>)
 80021c4:	699c      	ldr	r4, [r3, #24]

	switch (eMode)
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 80021c6:	4ead      	ldr	r6, [pc, #692]	; (800247c <modbus_thread.lto_priv.35+0x2bc>)
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 80021c8:	f8df c330 	ldr.w	ip, [pc, #816]	; 80024fc <modbus_thread.lto_priv.35+0x33c>
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 80021cc:	f8df a330 	ldr.w	sl, [pc, #816]	; 8002500 <modbus_thread.lto_priv.35+0x340>
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 80021d0:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8002504 <modbus_thread.lto_priv.35+0x344>
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 80021d4:	4daa      	ldr	r5, [pc, #680]	; (8002480 <modbus_thread.lto_priv.35+0x2c0>)
		0,
		0,
		0
	};
	
    uartCfg.speed = ulBaudRate;
 80021d6:	49ab      	ldr	r1, [pc, #684]	; (8002484 <modbus_thread.lto_priv.35+0x2c4>)
	serial = &UARTD1;
 80021d8:	48ab      	ldr	r0, [pc, #684]	; (8002488 <modbus_thread.lto_priv.35+0x2c8>)

	switch (eMode)
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 80021da:	4bac      	ldr	r3, [pc, #688]	; (800248c <modbus_thread.lto_priv.35+0x2cc>)
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 80021dc:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8002508 <modbus_thread.lto_priv.35+0x348>
	chThdSleepMilliseconds(300);
  }
}

static THD_WORKING_AREA(wa_freemodbus_thread, 128);
static THD_FUNCTION(modbus_thread, arg) {
 80021e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  eMBErrorCode			eStatus;
  eMBMasterReqErrCode	errorCode = MB_MRE_NO_ERR;

  (void)arg;
  chRegSetThreadName("modbus_poll");
 80021e4:	4faa      	ldr	r7, [pc, #680]	; (8002490 <modbus_thread.lto_priv.35+0x2d0>)
 80021e6:	61a7      	str	r7, [r4, #24]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 80021e8:	4faa      	ldr	r7, [pc, #680]	; (8002494 <modbus_thread.lto_priv.35+0x2d4>)
 80021ea:	6017      	str	r7, [r2, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 80021ec:	4aaa      	ldr	r2, [pc, #680]	; (8002498 <modbus_thread.lto_priv.35+0x2d8>)
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 80021ee:	f8df e31c 	ldr.w	lr, [pc, #796]	; 800250c <modbus_thread.lto_priv.35+0x34c>
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 80021f2:	4caa      	ldr	r4, [pc, #680]	; (800249c <modbus_thread.lto_priv.35+0x2dc>)
	switch (eMode)
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 80021f4:	f8cc 9000 	str.w	r9, [ip]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 80021f8:	6014      	str	r4, [r2, #0]

	switch (eMode)
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 80021fa:	6033      	str	r3, [r6, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 80021fc:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8002510 <modbus_thread.lto_priv.35+0x350>
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8002200:	f8df c310 	ldr.w	ip, [pc, #784]	; 8002514 <modbus_thread.lto_priv.35+0x354>
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8002204:	4fa6      	ldr	r7, [pc, #664]	; (80024a0 <modbus_thread.lto_priv.35+0x2e0>)
 8002206:	4aa7      	ldr	r2, [pc, #668]	; (80024a4 <modbus_thread.lto_priv.35+0x2e4>)
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8002208:	f8c8 9000 	str.w	r9, [r8]
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
		peMBMasterFrameSendCur = eMBMasterRTUSend;
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 800220c:	2300      	movs	r3, #0
		0,
		0,
		0
	};
	
    uartCfg.speed = ulBaudRate;
 800220e:	f44f 4496 	mov.w	r4, #19200	; 0x4b00
 8002212:	614c      	str	r4, [r1, #20]
	chThdSleepMilliseconds(300);
  }
}

static THD_WORKING_AREA(wa_freemodbus_thread, 128);
static THD_FUNCTION(modbus_thread, arg) {
 8002214:	b083      	sub	sp, #12
 8002216:	f8ca 3000 	str.w	r3, [sl]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800221a:	f8ce c000 	str.w	ip, [lr]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 800221e:	602f      	str	r7, [r5, #0]
	serial = &UARTD1;
 8002220:	6002      	str	r2, [r0, #0]
 8002222:	2420      	movs	r4, #32
 8002224:	f384 8811 	msr	BASEPRI, r4
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {

  if (uartp->state == UART_STOP) {
 8002228:	7810      	ldrb	r0, [r2, #0]

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800222a:	6051      	str	r1, [r2, #4]
 800222c:	2801      	cmp	r0, #1
 800222e:	f000 8179 	beq.w	8002524 <modbus_thread.lto_priv.35+0x364>
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_start(UARTDriver *uartp) 
{
  USART_TypeDef *u = uartp->usart;
 8002232:	6893      	ldr	r3, [r2, #8]
  if (uartp->usart == USART1)
    u->BRR = STM32_USART1CLK / uartp->config->speed;
  else
    u->BRR = STM32_PCLK / uartp->config->speed;
#else /* !defined(STM32F0XX) */
  if (uartp->usart == USART1)
 8002234:	4c9c      	ldr	r4, [pc, #624]	; (80024a8 <modbus_thread.lto_priv.35+0x2e8>)
    uartp->rxCount = 0;
    uartp->rxBuffer = NULL;
#endif
  }

  uartp->rxstate = UART_RX_IDLE;
 8002236:	2000      	movs	r0, #0
  if (uartp->usart == USART1)
    u->BRR = STM32_USART1CLK / uartp->config->speed;
  else
    u->BRR = STM32_PCLK / uartp->config->speed;
#else /* !defined(STM32F0XX) */
  if (uartp->usart == USART1)
 8002238:	42a3      	cmp	r3, r4
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
#endif
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 800223a:	60d8      	str	r0, [r3, #12]
    u->BRR = STM32_PCLK / uartp->config->speed;
#else /* !defined(STM32F0XX) */
  if (uartp->usart == USART1)
    u->BRR = STM32_PCLK2 / uartp->config->speed;
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 800223c:	694c      	ldr	r4, [r1, #20]
  dmaStreamDisable(uartp->dmatx);
#endif
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
  uartp->usart->CR2 = 0;
 800223e:	6118      	str	r0, [r3, #16]
    uartp->rxCount = 0;
    uartp->rxBuffer = NULL;
#endif
  }

  uartp->rxstate = UART_RX_IDLE;
 8002240:	7090      	strb	r0, [r2, #2]
#endif
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
 8002242:	6158      	str	r0, [r3, #20]
    uartp->rxBuffer = NULL;
#endif
  }

  uartp->rxstate = UART_RX_IDLE;
  uartp->txstate = UART_TX_IDLE;
 8002244:	7050      	strb	r0, [r2, #1]
    u->BRR = STM32_USART1CLK / uartp->config->speed;
  else
    u->BRR = STM32_PCLK / uartp->config->speed;
#else /* !defined(STM32F0XX) */
  if (uartp->usart == USART1)
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8002246:	bf0c      	ite	eq
 8002248:	4898      	ldreq	r0, [pc, #608]	; (80024ac <modbus_thread.lto_priv.35+0x2ec>)
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 800224a:	4899      	ldrne	r0, [pc, #612]	; (80024b0 <modbus_thread.lto_priv.35+0x2f0>)
 800224c:	fbb0 f0f4 	udiv	r0, r0, r4
 8002250:	6098      	str	r0, [r3, #8]
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
  u->CR1 = uartp->config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  USART_CR1_RXNEIE | USART_CR1_TE |
 8002252:	6988      	ldr	r0, [r1, #24]
  else
    cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE |
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
 8002254:	6a0c      	ldr	r4, [r1, #32]
  (void)u->DR;
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002256:	69cd      	ldr	r5, [r1, #28]
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;
#endif /* !defined(STM32F0XX) */

  /* Resetting eventual pending status flags.*/
  (void)u->SR;
 8002258:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;
 800225a:	6859      	ldr	r1, [r3, #4]
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
  u->CR1 = uartp->config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  USART_CR1_RXNEIE | USART_CR1_TE |
 800225c:	f440 5104 	orr.w	r1, r0, #8448	; 0x2100
  (void)u->DR;
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002260:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  else
    cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE |
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
 8002264:	f044 0001 	orr.w	r0, r4, #1
#endif /* !defined(STM32F0XX) */

  /* Resetting eventual pending status flags.*/
  (void)u->SR;
  (void)u->DR;
  u->SR = 0;
 8002268:	2700      	movs	r7, #0
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
  u->CR1 = uartp->config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  USART_CR1_RXNEIE | USART_CR1_TE |
 800226a:	f041 012c 	orr.w	r1, r1, #44	; 0x2c
  uart_lld_start(uartp);
  uartp->state = UART_READY;
 800226e:	2402      	movs	r4, #2
#endif /* !defined(STM32F0XX) */

  /* Resetting eventual pending status flags.*/
  (void)u->SR;
  (void)u->DR;
  u->SR = 0;
 8002270:	601f      	str	r7, [r3, #0]

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002272:	611d      	str	r5, [r3, #16]
 8002274:	7014      	strb	r4, [r2, #0]
  else
    cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE |
          USART_CR1_TCIE;
  u->CR1 = uartp->config->cr1 | cr1;
  #else
  u->CR3 = uartp->config->cr3 | USART_CR3_EIE;
 8002276:	6158      	str	r0, [r3, #20]
  u->CR1 = uartp->config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002278:	60d9      	str	r1, [r3, #12]
 800227a:	f387 8811 	msr	BASEPRI, r7

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTimeOut50us)
{
    /* backup T35 ticks */
    usT35TimeOut50us = usTimeOut50us;
 800227e:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <modbus_thread.lto_priv.35+0x2f4>)
	palClearPad(GPIOC, GPIOC_PIN9);
 8002280:	f8df e294 	ldr.w	lr, [pc, #660]	; 8002518 <modbus_thread.lto_priv.35+0x358>
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
		}
		else
		{
			eMBState = STATE_DISABLED;
 8002284:	4c8c      	ldr	r4, [pc, #560]	; (80024b8 <modbus_thread.lto_priv.35+0x2f8>)
//extern bool		xtNeedPoll;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
    xEventInQueue = FALSE;
 8002286:	4d8d      	ldr	r5, [pc, #564]	; (80024bc <modbus_thread.lto_priv.35+0x2fc>)
  (void)arg;
  chRegSetThreadName("modbus_poll");
  
  /*	Init modbus	Master -----------------------------------------------*/
  eStatus = eMBMasterInit(MB_RTU, 3, 19200, MB_PAR_NONE);
  chprintf((BaseSequentialStream *)&itm_port, "eStatus: %s\n", eStatus ? "error": "no'error");
 8002288:	488d      	ldr	r0, [pc, #564]	; (80024c0 <modbus_thread.lto_priv.35+0x300>)
 800228a:	498e      	ldr	r1, [pc, #568]	; (80024c4 <modbus_thread.lto_priv.35+0x304>)
 800228c:	4a8e      	ldr	r2, [pc, #568]	; (80024c8 <modbus_thread.lto_priv.35+0x308>)
 800228e:	f44f 7c00 	mov.w	ip, #512	; 0x200

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit(USHORT usTimeOut50us)
{
    /* backup T35 ticks */
    usT35TimeOut50us = usTimeOut50us;
 8002292:	f04f 0828 	mov.w	r8, #40	; 0x28
 8002296:	f8a3 8000 	strh.w	r8, [r3]
 800229a:	2301      	movs	r3, #1
	palClearPad(GPIOC, GPIOC_PIN9);
 800229c:	f8ae c01a 	strh.w	ip, [lr, #26]
 80022a0:	7023      	strb	r3, [r4, #0]
 80022a2:	702f      	strb	r7, [r5, #0]
 80022a4:	f000 fd3c 	bl	8002d20 <chprintf.constprop.18>
eMBErrorCode
eMBMasterEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80022a8:	7823      	ldrb	r3, [r4, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f000 80dc 	beq.w	8002468 <modbus_thread.lto_priv.35+0x2a8>
  /************************************************************************/
	
  /*	Enable the Modbus Protocol Stack --------------------------------*/
  eStatus = eMBMasterEnable();
  chprintf((BaseSequentialStream *)&itm_port, "eStatus: %s\n", eStatus ? "error": "no'error");
 80022b0:	4a86      	ldr	r2, [pc, #536]	; (80024cc <modbus_thread.lto_priv.35+0x30c>)
 80022b2:	4883      	ldr	r0, [pc, #524]	; (80024c0 <modbus_thread.lto_priv.35+0x300>)
 80022b4:	4983      	ldr	r1, [pc, #524]	; (80024c4 <modbus_thread.lto_priv.35+0x304>)
 80022b6:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80024f4 <modbus_thread.lto_priv.35+0x334>
 80022ba:	4e85      	ldr	r6, [pc, #532]	; (80024d0 <modbus_thread.lto_priv.35+0x310>)
 80022bc:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800251c <modbus_thread.lto_priv.35+0x35c>
 80022c0:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80024e4 <modbus_thread.lto_priv.35+0x324>
BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 80022c4:	4f7d      	ldr	r7, [pc, #500]	; (80024bc <modbus_thread.lto_priv.35+0x2fc>)
 80022c6:	f000 fd2b 	bl	8002d20 <chprintf.constprop.18>
 80022ca:	e003      	b.n	80022d4 <modbus_thread.lto_priv.35+0x114>
  /************************************************************************/
  
  while (TRUE) {
    eMBMasterPoll();
	
	chThdSleepMilliseconds(100);
 80022cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d0:	f7ff fe56 	bl	8001f80 <chThdSleep>
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80022d4:	7823      	ldrb	r3, [r4, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f8      	bne.n	80022cc <modbus_thread.lto_priv.35+0x10c>
 80022da:	782a      	ldrb	r2, [r5, #0]
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d0f5      	beq.n	80022cc <modbus_thread.lto_priv.35+0x10c>
    {
        *eEvent = eQueuedEvent;
 80022e0:	7832      	ldrb	r2, [r6, #0]
        xEventInQueue = FALSE;
 80022e2:	703b      	strb	r3, [r7, #0]

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
    {
        switch ( eEvent )
 80022e4:	1e93      	subs	r3, r2, #2
 80022e6:	2b0e      	cmp	r3, #14
 80022e8:	d8f0      	bhi.n	80022cc <modbus_thread.lto_priv.35+0x10c>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <modbus_thread.lto_priv.35+0x130>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002385 	.word	0x08002385
 80022f4:	080022cd 	.word	0x080022cd
 80022f8:	08002347 	.word	0x08002347
 80022fc:	080022cd 	.word	0x080022cd
 8002300:	080022cd 	.word	0x080022cd
 8002304:	080022cd 	.word	0x080022cd
 8002308:	0800232d 	.word	0x0800232d
 800230c:	080022cd 	.word	0x080022cd
 8002310:	080022cd 	.word	0x080022cd
 8002314:	080022cd 	.word	0x080022cd
 8002318:	080022cd 	.word	0x080022cd
 800231c:	080022cd 	.word	0x080022cd
 8002320:	080022cd 	.word	0x080022cd
 8002324:	080022cd 	.word	0x080022cd
 8002328:	080023b1 	.word	0x080023b1

/* Get Modbus Master send PDU's buffer length.*/
USHORT 
usMBMasterGetPDUSndLength( void )
{
	return usMasterSendPDULength;
 800232c:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <modbus_thread.lto_priv.35+0x314>)
            break;

        case EV_MASTER_FRAME_SENT:
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 800232e:	f89a 0000 	ldrb.w	r0, [sl]
 8002332:	881a      	ldrh	r2, [r3, #0]

/* Get Modbus Master send PDU's buffer address pointer.*/
void 
vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <modbus_thread.lto_priv.35+0x318>)
 8002336:	f8c9 3000 	str.w	r3, [r9]
 800233a:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <modbus_thread.lto_priv.35+0x2b8>)
 800233c:	4966      	ldr	r1, [pc, #408]	; (80024d8 <modbus_thread.lto_priv.35+0x318>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b292      	uxth	r2, r2
 8002342:	4798      	blx	r3
 8002344:	e7c2      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002346:	f8d9 0000 	ldr.w	r0, [r9]
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <modbus_thread.lto_priv.35+0x31c>)
 800234c:	7801      	ldrb	r1, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800234e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80024f8 <modbus_thread.lto_priv.35+0x338>
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002352:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002354:	2301      	movs	r3, #1
 8002356:	f88e 3000 	strb.w	r3, [lr]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 800235a:	060b      	lsls	r3, r1, #24
 800235c:	d439      	bmi.n	80023d2 <modbus_thread.lto_priv.35+0x212>
 800235e:	2300      	movs	r3, #0
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8002360:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
 8002364:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
            if(ucFunctionCode >> 7) {
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8002368:	3301      	adds	r3, #1
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 800236a:	b11a      	cbz	r2, 8002374 <modbus_thread.lto_priv.35+0x1b4>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 800236c:	4291      	cmp	r1, r2
 800236e:	d047      	beq.n	8002400 <modbus_thread.lto_priv.35+0x240>
            if(ucFunctionCode >> 7) {
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8002370:	2b10      	cmp	r3, #16
 8002372:	d1f5      	bne.n	8002360 <modbus_thread.lto_priv.35+0x1a0>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8002374:	495a      	ldr	r1, [pc, #360]	; (80024e0 <modbus_thread.lto_priv.35+0x320>)
 8002376:	2302      	movs	r3, #2
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002378:	2201      	movs	r2, #1
 800237a:	700b      	strb	r3, [r1, #0]
    eQueuedEvent = eEvent;
 800237c:	2310      	movs	r3, #16
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 800237e:	702a      	strb	r2, [r5, #0]
    eQueuedEvent = eEvent;
 8002380:	7033      	strb	r3, [r6, #0]
 8002382:	e7a3      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
        {
        case EV_MASTER_READY:
            break;

        case EV_MASTER_FRAME_RECEIVED:
			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002384:	f8df b198 	ldr.w	fp, [pc, #408]	; 8002520 <modbus_thread.lto_priv.35+0x360>
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <modbus_thread.lto_priv.35+0x2d8>)
 800238a:	4956      	ldr	r1, [pc, #344]	; (80024e4 <modbus_thread.lto_priv.35+0x324>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <modbus_thread.lto_priv.35+0x328>)
 8002390:	4658      	mov	r0, fp
 8002392:	4798      	blx	r3
			/* Check if the frame is for us. If not ,send an error process event. */
			if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8002394:	b928      	cbnz	r0, 80023a2 <modbus_thread.lto_priv.35+0x1e2>
 8002396:	f89b 3000 	ldrb.w	r3, [fp]
 800239a:	f89a 2000 	ldrb.w	r2, [sl]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d051      	beq.n	8002446 <modbus_thread.lto_priv.35+0x286>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 80023a2:	494f      	ldr	r1, [pc, #316]	; (80024e0 <modbus_thread.lto_priv.35+0x320>)
 80023a4:	2301      	movs	r3, #1
 80023a6:	2210      	movs	r2, #16
 80023a8:	700b      	strb	r3, [r1, #0]
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023aa:	702b      	strb	r3, [r5, #0]
    eQueuedEvent = eEvent;
 80023ac:	7032      	strb	r2, [r6, #0]
 80023ae:	e78d      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
	ucMBMasterDestAddress = Address;
}
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
	return eMBMasterCurErrorType;
 80023b0:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <modbus_thread.lto_priv.35+0x320>)
 80023b2:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <modbus_thread.lto_priv.35+0x318>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f8c9 2000 	str.w	r2, [r9]

        case EV_MASTER_ERROR_PROCESS:
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d01a      	beq.n	80023f4 <modbus_thread.lto_priv.35+0x234>
 80023be:	d312      	bcc.n	80023e6 <modbus_thread.lto_priv.35+0x226>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d183      	bne.n	80022cc <modbus_thread.lto_priv.35+0x10c>

/* Get Modbus Master send PDU's buffer length.*/
USHORT 
usMBMasterGetPDUSndLength( void )
{
	return usMasterSendPDULength;
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <modbus_thread.lto_priv.35+0x314>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023c6:	2201      	movs	r2, #1
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	702a      	strb	r2, [r5, #0]
    eQueuedEvent = eEvent;
 80023cc:	2300      	movs	r3, #0
 80023ce:	7033      	strb	r3, [r6, #0]
 80023d0:	e77c      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 80023d2:	7840      	ldrb	r0, [r0, #1]
 80023d4:	f88e 0000 	strb.w	r0, [lr]
						break;
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 80023d8:	2800      	cmp	r0, #0
 80023da:	d1cb      	bne.n	8002374 <modbus_thread.lto_priv.35+0x1b4>
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023dc:	2201      	movs	r2, #1
    eQueuedEvent = eEvent;
 80023de:	2320      	movs	r3, #32
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023e0:	702a      	strb	r2, [r5, #0]
    eQueuedEvent = eEvent;
 80023e2:	7033      	strb	r3, [r6, #0]
 80023e4:	e772      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
 80023e6:	493b      	ldr	r1, [pc, #236]	; (80024d4 <modbus_thread.lto_priv.35+0x314>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023e8:	2201      	movs	r2, #1
    eQueuedEvent = eEvent;
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	8809      	ldrh	r1, [r1, #0]
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023ee:	702a      	strb	r2, [r5, #0]
    eQueuedEvent = eEvent;
 80023f0:	7033      	strb	r3, [r6, #0]
 80023f2:	e76b      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
 80023f4:	4937      	ldr	r1, [pc, #220]	; (80024d4 <modbus_thread.lto_priv.35+0x314>)
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 80023f6:	702b      	strb	r3, [r5, #0]
    eQueuedEvent = eEvent;
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	8809      	ldrh	r1, [r1, #0]
 80023fc:	7032      	strb	r2, [r6, #0]
 80023fe:	e765      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
}

/* The master request is broadcast? */
BOOL 
xMBMasterRequestIsBroadcast( void ){
	return xFrameIsBroadcast;
 8002400:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <modbus_thread.lto_priv.35+0x32c>)
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 8002402:	493b      	ldr	r1, [pc, #236]	; (80024f0 <modbus_thread.lto_priv.35+0x330>)
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	700b      	strb	r3, [r1, #0]
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
						vMBMasterSetCBRunInMasterMode(TRUE);
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 800240a:	b30a      	cbz	r2, 8002450 <modbus_thread.lto_priv.35+0x290>
 800240c:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <modbus_thread.lto_priv.35+0x334>)
 800240e:	4496      	add	lr, r2

/* Get Modbus Master send PDU's buffer length.*/
USHORT 
usMBMasterGetPDUSndLength( void )
{
	return usMasterSendPDULength;
 8002410:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <modbus_thread.lto_priv.35+0x314>)
 8002412:	f8de 1004 	ldr.w	r1, [lr, #4]
 8002416:	9101      	str	r1, [sp, #4]
							usLength = usMBMasterGetPDUSndLength();
 8002418:	4933      	ldr	r1, [pc, #204]	; (80024e8 <modbus_thread.lto_priv.35+0x328>)
 800241a:	8812      	ldrh	r2, [r2, #0]
 800241c:	800a      	strh	r2, [r1, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 800241e:	469b      	mov	fp, r3
 8002420:	e001      	b.n	8002426 <modbus_thread.lto_priv.35+0x266>
 8002422:	f8d9 0000 	ldr.w	r0, [r9]
								vMBMasterSetDestAddress(j);
 8002426:	f88a b000 	strb.w	fp, [sl]
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 800242a:	9b01      	ldr	r3, [sp, #4]
 800242c:	492e      	ldr	r1, [pc, #184]	; (80024e8 <modbus_thread.lto_priv.35+0x328>)
 800242e:	4798      	blx	r3
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8002430:	f10b 0b01 	add.w	fp, fp, #1
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <modbus_thread.lto_priv.35+0x338>)
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8002436:	f1bb 0f11 	cmp.w	fp, #17
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 800243a:	7018      	strb	r0, [r3, #0]
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 800243c:	d1f1      	bne.n	8002422 <modbus_thread.lto_priv.35+0x262>
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 800243e:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <modbus_thread.lto_priv.35+0x330>)
 8002440:	2300      	movs	r3, #0
 8002442:	7013      	strb	r3, [r2, #0]
 8002444:	e7c8      	b.n	80023d8 <modbus_thread.lto_priv.35+0x218>
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8002446:	2201      	movs	r2, #1
    eQueuedEvent = eEvent;
 8002448:	2304      	movs	r3, #4
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 800244a:	702a      	strb	r2, [r5, #0]
    eQueuedEvent = eEvent;
 800244c:	7033      	strb	r3, [r6, #0]
 800244e:	e73d      	b.n	80022cc <modbus_thread.lto_priv.35+0x10c>
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <modbus_thread.lto_priv.35+0x334>)
 8002452:	4925      	ldr	r1, [pc, #148]	; (80024e8 <modbus_thread.lto_priv.35+0x328>)
 8002454:	449e      	add	lr, r3
 8002456:	f8de 3004 	ldr.w	r3, [lr, #4]
 800245a:	4798      	blx	r3
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <modbus_thread.lto_priv.35+0x338>)
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 800245e:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <modbus_thread.lto_priv.35+0x330>)
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8002460:	7018      	strb	r0, [r3, #0]
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 8002462:	2300      	movs	r3, #0
 8002464:	7013      	strb	r3, [r2, #0]
 8002466:	e7b7      	b.n	80023d8 <modbus_thread.lto_priv.35+0x218>
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8002468:	6833      	ldr	r3, [r6, #0]
 800246a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800246c:	7027      	strb	r7, [r4, #0]
  chprintf((BaseSequentialStream *)&itm_port, "eStatus: %s\n", eStatus ? "error": "no'error");
  /************************************************************************/
	
  /*	Enable the Modbus Protocol Stack --------------------------------*/
  eStatus = eMBMasterEnable();
  chprintf((BaseSequentialStream *)&itm_port, "eStatus: %s\n", eStatus ? "error": "no'error");
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <modbus_thread.lto_priv.35+0x308>)
 8002470:	e71f      	b.n	80022b2 <modbus_thread.lto_priv.35+0xf2>
 8002472:	bf00      	nop
 8002474:	2000aba0 	.word	0x2000aba0
 8002478:	2000a888 	.word	0x2000a888
 800247c:	2000a8b0 	.word	0x2000a8b0
 8002480:	20005cc0 	.word	0x20005cc0
 8002484:	20000800 	.word	0x20000800
 8002488:	20005ccc 	.word	0x20005ccc
 800248c:	08001691 	.word	0x08001691
 8002490:	080059a4 	.word	0x080059a4
 8002494:	08001511 	.word	0x08001511
 8002498:	20005cdc 	.word	0x20005cdc
 800249c:	08001461 	.word	0x08001461
 80024a0:	08001351 	.word	0x08001351
 80024a4:	2000ae3c 	.word	0x2000ae3c
 80024a8:	40011000 	.word	0x40011000
 80024ac:	05f5e100 	.word	0x05f5e100
 80024b0:	02faf080 	.word	0x02faf080
 80024b4:	20005ce2 	.word	0x20005ce2
 80024b8:	20000824 	.word	0x20000824
 80024bc:	20005cf9 	.word	0x20005cf9
 80024c0:	2000ae38 	.word	0x2000ae38
 80024c4:	080059b0 	.word	0x080059b0
 80024c8:	08005990 	.word	0x08005990
 80024cc:	0800599c 	.word	0x0800599c
 80024d0:	2000a8c8 	.word	0x2000a8c8
 80024d4:	2000a8ac 	.word	0x2000a8ac
 80024d8:	2000a8cd 	.word	0x2000a8cd
 80024dc:	2000a8aa 	.word	0x2000a8aa
 80024e0:	2000a8a8 	.word	0x2000a8a8
 80024e4:	20005cc4 	.word	0x20005cc4
 80024e8:	2000a880 	.word	0x2000a880
 80024ec:	20005cf8 	.word	0x20005cf8
 80024f0:	20005cbc 	.word	0x20005cbc
 80024f4:	08005a60 	.word	0x08005a60
 80024f8:	20005cd0 	.word	0x20005cd0
 80024fc:	2000a7fc 	.word	0x2000a7fc
 8002500:	2000a8a4 	.word	0x2000a8a4
 8002504:	2000a884 	.word	0x2000a884
 8002508:	080015d1 	.word	0x080015d1
 800250c:	20005cd4 	.word	0x20005cd4
 8002510:	080015f1 	.word	0x080015f1
 8002514:	08001e51 	.word	0x08001e51
 8002518:	40020800 	.word	0x40020800
 800251c:	2000a8a9 	.word	0x2000a8a9
 8002520:	2000a8a0 	.word	0x2000a8a0
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
	  #endif
      rccEnableUSART1(FALSE);
 8002524:	4f08      	ldr	r7, [pc, #32]	; (8002548 <modbus_thread.lto_priv.35+0x388>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002526:	4809      	ldr	r0, [pc, #36]	; (800254c <modbus_thread.lto_priv.35+0x38c>)
 8002528:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->TDR);
	#endif
    uartp->rxbuf = 0;
#if STM32_UART_USE_INTERRUPTS
    uartp->rxCount = 0;
    uartp->rxBuffer = NULL;
 800252a:	6193      	str	r3, [r2, #24]
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
	  #endif
      rccEnableUSART1(FALSE);
 800252c:	f045 0510 	orr.w	r5, r5, #16
 8002530:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 8002534:	647d      	str	r5, [r7, #68]	; 0x44
 8002536:	f880 e325 	strb.w	lr, [r0, #805]	; 0x325
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800253a:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800253e:	6044      	str	r4, [r0, #4]
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->RDR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->TDR);
	#endif
    uartp->rxbuf = 0;
 8002540:	8193      	strh	r3, [r2, #12]
#if STM32_UART_USE_INTERRUPTS
    uartp->rxCount = 0;
 8002542:	8293      	strh	r3, [r2, #20]
 8002544:	e675      	b.n	8002232 <modbus_thread.lto_priv.35+0x72>
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	e000e100 	.word	0xe000e100

08002550 <rxerr>:
static void rxerr(UARTDriver *uartp, uartflags_t e){
	(void)uartp;
	(void)e;
	
	//chSysLockFromISR(); 
	if (e & USART_SR_PE) {
 8002550:	07cb      	lsls	r3, r1, #31

/*
 * This callback is invoked on a receive error, the errors mask is passed
 * as parameter.
 */
static void rxerr(UARTDriver *uartp, uartflags_t e){
 8002552:	b510      	push	{r4, lr}
 8002554:	460c      	mov	r4, r1
	(void)uartp;
	(void)e;
	
	//chSysLockFromISR(); 
	if (e & USART_SR_PE) {
 8002556:	d41f      	bmi.n	8002598 <rxerr+0x48>
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "parity err");
	} else if (e & USART_SR_FE) {
 8002558:	0788      	lsls	r0, r1, #30
 800255a:	d423      	bmi.n	80025a4 <rxerr+0x54>
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "framing err");
	} if (e & USART_SR_NE) {
 800255c:	0761      	lsls	r1, r4, #29
 800255e:	d415      	bmi.n	800258c <rxerr+0x3c>
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
	} if (e & USART_SR_ORE) {
 8002560:	0722      	lsls	r2, r4, #28
 8002562:	d40d      	bmi.n	8002580 <rxerr+0x30>
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
	} if (e & USART_SR_IDLE) {
 8002564:	06e3      	lsls	r3, r4, #27
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "idle line err");
 8002566:	4812      	ldr	r0, [pc, #72]	; (80025b0 <rxerr+0x60>)
 8002568:	4912      	ldr	r1, [pc, #72]	; (80025b4 <rxerr+0x64>)
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "framing err");
	} if (e & USART_SR_NE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
	} if (e & USART_SR_ORE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
	} if (e & USART_SR_IDLE) {
 800256a:	d404      	bmi.n	8002576 <rxerr+0x26>
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "idle line err");
	} else {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "uart rx err");
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <rxerr+0x68>)
	}
	//chSysUnlockFromISR();

}
 800256e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	} if (e & USART_SR_ORE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
	} if (e & USART_SR_IDLE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "idle line err");
	} else {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "uart rx err");
 8002572:	f000 bbe5 	b.w	8002d40 <chprintf.constprop.5>
	} if (e & USART_SR_NE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
	} if (e & USART_SR_ORE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
	} if (e & USART_SR_IDLE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "idle line err");
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <rxerr+0x6c>)
	} else {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "uart rx err");
	}
	//chSysUnlockFromISR();

}
 8002578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	} if (e & USART_SR_NE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
	} if (e & USART_SR_ORE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
	} if (e & USART_SR_IDLE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "idle line err");
 800257c:	f000 bbe0 	b.w	8002d40 <chprintf.constprop.5>
	} else if (e & USART_SR_FE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "framing err");
	} if (e & USART_SR_NE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
	} if (e & USART_SR_ORE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "overrun err");
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <rxerr+0x64>)
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <rxerr+0x70>)
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <rxerr+0x60>)
 8002586:	f000 fbdb 	bl	8002d40 <chprintf.constprop.5>
 800258a:	e7eb      	b.n	8002564 <rxerr+0x14>
	if (e & USART_SR_PE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "parity err");
	} else if (e & USART_SR_FE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "framing err");
	} if (e & USART_SR_NE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "noise err");
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <rxerr+0x64>)
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <rxerr+0x74>)
 8002590:	4807      	ldr	r0, [pc, #28]	; (80025b0 <rxerr+0x60>)
 8002592:	f000 fbd5 	bl	8002d40 <chprintf.constprop.5>
 8002596:	e7e3      	b.n	8002560 <rxerr+0x10>
	(void)uartp;
	(void)e;
	
	//chSysLockFromISR(); 
	if (e & USART_SR_PE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "parity err");
 8002598:	4906      	ldr	r1, [pc, #24]	; (80025b4 <rxerr+0x64>)
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <rxerr+0x78>)
 800259c:	4804      	ldr	r0, [pc, #16]	; (80025b0 <rxerr+0x60>)
 800259e:	f000 fbcf 	bl	8002d40 <chprintf.constprop.5>
 80025a2:	e7db      	b.n	800255c <rxerr+0xc>
	} else if (e & USART_SR_FE) {
	  chprintf((BaseSequentialStream *)&itm_port, "%s\n", "framing err");
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <rxerr+0x64>)
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <rxerr+0x7c>)
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <rxerr+0x60>)
 80025aa:	f000 fbc9 	bl	8002d40 <chprintf.constprop.5>
 80025ae:	e7d5      	b.n	800255c <rxerr+0xc>
 80025b0:	2000ae38 	.word	0x2000ae38
 80025b4:	080059c0 	.word	0x080059c0
 80025b8:	08005a04 	.word	0x08005a04
 80025bc:	080059f4 	.word	0x080059f4
 80025c0:	080059e8 	.word	0x080059e8
 80025c4:	080059dc 	.word	0x080059dc
 80025c8:	080059c4 	.word	0x080059c4
 80025cc:	080059d0 	.word	0x080059d0

080025d0 <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;

	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <Debug_ITMDebugOutputChar+0x20>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b15b      	cbz	r3, 80025ee <Debug_ITMDebugOutputChar+0x1e>
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <Debug_ITMDebugOutputChar+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	01db      	lsls	r3, r3, #7
 80025dc:	d507      	bpl.n	80025ee <Debug_ITMDebugOutputChar+0x1e>
	{
		while(*ITM_STIM0 == 0);
 80025de:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80025e2:	680b      	ldr	r3, [r1, #0]
 80025e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0fa      	beq.n	80025e2 <Debug_ITMDebugOutputChar+0x12>
  	*((volatile char *)ITM_STIM0) = ch;
 80025ec:	7010      	strb	r0, [r2, #0]
 80025ee:	4770      	bx	lr
 80025f0:	2000ae58 	.word	0x2000ae58
 80025f4:	e000edfc 	.word	0xe000edfc
 80025f8:	f3af 8000 	nop.w
 80025fc:	f3af 8000 	nop.w

08002600 <writes.lto_priv.38>:

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 8002600:	b570      	push	{r4, r5, r6, lr}
  size_t cnt = n;

  while (cnt > 0) {
 8002602:	4616      	mov	r6, r2
 8002604:	b13a      	cbz	r2, 8002616 <writes.lto_priv.38+0x16>
 8002606:	460d      	mov	r5, r1
 8002608:	4614      	mov	r4, r2
/*===========================================================================*/
static msg_t put(void *ip, uint8_t b) {

  (void)ip;
  
  Debug_ITMDebugOutputChar(b);
 800260a:	f815 0b01 	ldrb.w	r0, [r5], #1
 800260e:	f7ff ffdf 	bl	80025d0 <Debug_ITMDebugOutputChar>
}

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
  size_t cnt = n;

  while (cnt > 0) {
 8002612:	3c01      	subs	r4, #1
 8002614:	d1f9      	bne.n	800260a <writes.lto_priv.38+0xa>
    bp++;
    cnt--;
  }

  return n;
}
 8002616:	4630      	mov	r0, r6
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w

08002620 <put.lto_priv.40>:
extern void Debug_ITMDebugOutputChar(char ch);

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/
static msg_t put(void *ip, uint8_t b) {
 8002620:	b508      	push	{r3, lr}

  (void)ip;
  
  Debug_ITMDebugOutputChar(b);
 8002622:	4608      	mov	r0, r1
 8002624:	f7ff ffd4 	bl	80025d0 <Debug_ITMDebugOutputChar>

  return MSG_OK;
}
 8002628:	2000      	movs	r0, #0
 800262a:	bd08      	pop	{r3, pc}
 800262c:	f3af 8000 	nop.w

08002630 <_kill>:

pid_t _getpid(void){
	return 1;
}

void _kill(pid_t id){
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	f3af 8000 	nop.w
 800263c:	f3af 8000 	nop.w

08002640 <_getpid>:
	while(TRUE){}
}

pid_t _getpid(void){
	return 1;
}
 8002640:	2001      	movs	r0, #1
 8002642:	4770      	bx	lr
 8002644:	f3af 8000 	nop.w
 8002648:	f3af 8000 	nop.w
 800264c:	f3af 8000 	nop.w

08002650 <_exit>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002652:	4b02      	ldr	r3, [pc, #8]	; (800265c <_exit+0xc>)
 8002654:	4a02      	ldr	r2, [pc, #8]	; (8002660 <_exit+0x10>)
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
 8002658:	e7fe      	b.n	8002658 <_exit+0x8>
 800265a:	bf00      	nop
 800265c:	2000aba0 	.word	0x2000aba0
 8002660:	08005a10 	.word	0x08005a10
 8002664:	f3af 8000 	nop.w
 8002668:	f3af 8000 	nop.w
 800266c:	f3af 8000 	nop.w

08002670 <vMBMasterPortTimersDisable>:
	chVTSetI(&vtout, MS2ST((uint32_t)MB_MASTER_TIMEOUT_MS_RESPOND), timer_timeout_ind, NULL);
	chSysUnlockFromISR();
}

void vMBMasterPortTimersDisable()
{
 8002670:	b508      	push	{r3, lr}
	palClearPad(GPIOC, GPIOC_PIN9);
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <vMBMasterPortTimersDisable+0x3c>)
 8002674:	f44f 7200 	mov.w	r2, #512	; 0x200
	palClearPad(GPIOC, GPIOC_PIN10);
 8002678:	f44f 6180 	mov.w	r1, #1024	; 0x400
	chSysUnlockFromISR();
}

void vMBMasterPortTimersDisable()
{
	palClearPad(GPIOC, GPIOC_PIN9);
 800267c:	835a      	strh	r2, [r3, #26]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800267e:	2220      	movs	r2, #32
	palClearPad(GPIOC, GPIOC_PIN10);
 8002680:	8359      	strh	r1, [r3, #26]
 8002682:	f382 8811 	msr	BASEPRI, r2
 8002686:	480a      	ldr	r0, [pc, #40]	; (80026b0 <vMBMasterPortTimersDisable+0x40>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8002688:	68c3      	ldr	r3, [r0, #12]
 800268a:	b10b      	cbz	r3, 8002690 <vMBMasterPortTimersDisable+0x20>
    chVTDoResetI(vtp);
 800268c:	f7ff fb78 	bl	8001d80 <chVTDoResetI>
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <vMBMasterPortTimersDisable+0x44>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8002692:	68c3      	ldr	r3, [r0, #12]
 8002694:	b10b      	cbz	r3, 800269a <vMBMasterPortTimersDisable+0x2a>
    chVTDoResetI(vtp);
 8002696:	f7ff fb73 	bl	8001d80 <chVTDoResetI>
 800269a:	4807      	ldr	r0, [pc, #28]	; (80026b8 <vMBMasterPortTimersDisable+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800269c:	68c3      	ldr	r3, [r0, #12]
 800269e:	b10b      	cbz	r3, 80026a4 <vMBMasterPortTimersDisable+0x34>
    chVTDoResetI(vtp);
 80026a0:	f7ff fb6e 	bl	8001d80 <chVTDoResetI>
 80026a4:	2300      	movs	r3, #0
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	bd08      	pop	{r3, pc}
 80026ac:	40020800 	.word	0x40020800
 80026b0:	2000a88c 	.word	0x2000a88c
 80026b4:	2000a8b4 	.word	0x2000a8b4
 80026b8:	20005ce4 	.word	0x20005ce4
 80026bc:	f3af 8000 	nop.w

080026c0 <vMBMasterPortTimersT35Enable>:

/* Set Modbus Master current timer mode.*/
void 
vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
	eMasterCurTimerMode = eMBTimerMode;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <vMBMasterPortTimersT35Enable+0x40>)
void vMBMasterPortTimersT35Enable()
{
	//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "T35 Enable");
    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
	palSetPad(GPIOC, GPIOC_PIN9);
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <vMBMasterPortTimersT35Enable+0x44>)
 80026c4:	2000      	movs	r0, #0
 80026c6:	f44f 7100 	mov.w	r1, #512	; 0x200

    return TRUE;
}

void vMBMasterPortTimersT35Enable()
{
 80026ca:	b510      	push	{r4, lr}
 80026cc:	7018      	strb	r0, [r3, #0]
 80026ce:	2320      	movs	r3, #32
	//chprintf((BaseSequentialStream *)&itm_port, "%s\n", "T35 Enable");
    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
	palSetPad(GPIOC, GPIOC_PIN9);
 80026d0:	8311      	strh	r1, [r2, #24]
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	4c0c      	ldr	r4, [pc, #48]	; (8002708 <vMBMasterPortTimersT35Enable+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80026d8:	68e3      	ldr	r3, [r4, #12]
 80026da:	b13b      	cbz	r3, 80026ec <vMBMasterPortTimersT35Enable+0x2c>
    chVTDoResetI(vtp);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fb4f 	bl	8001d80 <chVTDoResetI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80026e2:	68e3      	ldr	r3, [r4, #12]
 80026e4:	b113      	cbz	r3, 80026ec <vMBMasterPortTimersT35Enable+0x2c>
    chVTDoResetI(vtp);
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff fb4a 	bl	8001d80 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80026ec:	4806      	ldr	r0, [pc, #24]	; (8002708 <vMBMasterPortTimersT35Enable+0x48>)
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <vMBMasterPortTimersT35Enable+0x4c>)
 80026f0:	2114      	movs	r1, #20
 80026f2:	2300      	movs	r3, #0
 80026f4:	f7ff fb74 	bl	8001de0 <chVTDoSetI>
 80026f8:	2300      	movs	r3, #0
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	20005cc8 	.word	0x20005cc8
 8002704:	40020800 	.word	0x40020800
 8002708:	2000a88c 	.word	0x2000a88c
 800270c:	08002091 	.word	0x08002091

08002710 <vMBMasterPortSerialEnable>:

    return TRUE;
}

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8002710:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *ureg = serial->usart;
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <vMBMasterPortSerialEnable+0x70>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689c      	ldr	r4, [r3, #8]

    return TRUE;
}

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8002718:	460d      	mov	r5, r1
    if (xRxEnable)
    {
		/* switch 485 to receive mode */
		
        /* enable RX interrupt */
		ureg->CR1 |= USART_CR1_RXNEIE;
 800271a:	68e3      	ldr	r3, [r4, #12]

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
	USART_TypeDef *ureg = serial->usart;
	
    if (xRxEnable)
 800271c:	b1b8      	cbz	r0, 800274e <vMBMasterPortSerialEnable+0x3e>
    {
		/* switch 485 to receive mode */
		
        /* enable RX interrupt */
		ureg->CR1 |= USART_CR1_RXNEIE;
 800271e:	f043 0320 	orr.w	r3, r3, #32
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Enable");
 8002722:	4818      	ldr	r0, [pc, #96]	; (8002784 <vMBMasterPortSerialEnable+0x74>)
 8002724:	4918      	ldr	r1, [pc, #96]	; (8002788 <vMBMasterPortSerialEnable+0x78>)
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <vMBMasterPortSerialEnable+0x7c>)
    if (xRxEnable)
    {
		/* switch 485 to receive mode */
		
        /* enable RX interrupt */
		ureg->CR1 |= USART_CR1_RXNEIE;
 8002728:	60e3      	str	r3, [r4, #12]
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Enable");
 800272a:	f000 fb09 	bl	8002d40 <chprintf.constprop.5>
    {
        /* disable RX interrupt */
		ureg->CR1 &= ~USART_CR1_RXNEIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Disable");
    }
    if (xTxEnable)
 800272e:	b9c5      	cbnz	r5, 8002762 <vMBMasterPortSerialEnable+0x52>
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Enable");
    }
    else
    {
        /* stop serial transmit */
		ureg->CR1 &= ~USART_CR1_TXEIE;
 8002730:	68e3      	ldr	r3, [r4, #12]
		ureg->CR1 |= USART_CR1_TCIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Disable");
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <vMBMasterPortSerialEnable+0x74>)
 8002734:	4914      	ldr	r1, [pc, #80]	; (8002788 <vMBMasterPortSerialEnable+0x78>)
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <vMBMasterPortSerialEnable+0x80>)
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Enable");
    }
    else
    {
        /* stop serial transmit */
		ureg->CR1 &= ~USART_CR1_TXEIE;
 8002738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273c:	60e3      	str	r3, [r4, #12]
		ureg->CR1 |= USART_CR1_TCIE;
 800273e:	68e3      	ldr	r3, [r4, #12]
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	60e3      	str	r3, [r4, #12]
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Disable");
    }
}
 8002746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else
    {
        /* stop serial transmit */
		ureg->CR1 &= ~USART_CR1_TXEIE;
		ureg->CR1 |= USART_CR1_TCIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Disable");
 800274a:	f000 baf9 	b.w	8002d40 <chprintf.constprop.5>
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Enable");
    }
    else
    {
        /* disable RX interrupt */
		ureg->CR1 &= ~USART_CR1_RXNEIE;
 800274e:	f023 0320 	bic.w	r3, r3, #32
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Disable");
 8002752:	480c      	ldr	r0, [pc, #48]	; (8002784 <vMBMasterPortSerialEnable+0x74>)
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <vMBMasterPortSerialEnable+0x78>)
 8002756:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <vMBMasterPortSerialEnable+0x84>)
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Enable");
    }
    else
    {
        /* disable RX interrupt */
		ureg->CR1 &= ~USART_CR1_RXNEIE;
 8002758:	60e3      	str	r3, [r4, #12]
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Disable");
 800275a:	f000 faf1 	bl	8002d40 <chprintf.constprop.5>
    }
    if (xTxEnable)
 800275e:	2d00      	cmp	r5, #0
 8002760:	d0e6      	beq.n	8002730 <vMBMasterPortSerialEnable+0x20>
    {
		/* switch 485 to transmit mode */
		palSetPad(GPIOC, GPIOC_PIN8);
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <vMBMasterPortSerialEnable+0x88>)
		
		/* start serial transmit */
		ureg->CR1 |= USART_CR1_TXEIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Enable");
 8002764:	4807      	ldr	r0, [pc, #28]	; (8002784 <vMBMasterPortSerialEnable+0x74>)
 8002766:	4908      	ldr	r1, [pc, #32]	; (8002788 <vMBMasterPortSerialEnable+0x78>)
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <vMBMasterPortSerialEnable+0x8c>)
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Receive Disable");
    }
    if (xTxEnable)
    {
		/* switch 485 to transmit mode */
		palSetPad(GPIOC, GPIOC_PIN8);
 800276a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800276e:	831d      	strh	r5, [r3, #24]
		
		/* start serial transmit */
		ureg->CR1 |= USART_CR1_TXEIE;
 8002770:	68e3      	ldr	r3, [r4, #12]
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	60e3      	str	r3, [r4, #12]
        /* stop serial transmit */
		ureg->CR1 &= ~USART_CR1_TXEIE;
		ureg->CR1 |= USART_CR1_TCIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Disable");
    }
}
 8002778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		/* switch 485 to transmit mode */
		palSetPad(GPIOC, GPIOC_PIN8);
		
		/* start serial transmit */
		ureg->CR1 |= USART_CR1_TXEIE;
		chprintf((BaseSequentialStream *)&itm_port, "%s\n", "Transmit Enable");
 800277c:	f000 bae0 	b.w	8002d40 <chprintf.constprop.5>
 8002780:	20005ccc 	.word	0x20005ccc
 8002784:	2000ae38 	.word	0x2000ae38
 8002788:	080059c0 	.word	0x080059c0
 800278c:	08005a18 	.word	0x08005a18
 8002790:	08005a48 	.word	0x08005a48
 8002794:	08005a28 	.word	0x08005a28
 8002798:	40020800 	.word	0x40020800
 800279c:	08005a38 	.word	0x08005a38

080027a0 <eMBMasterRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 80027a4:	3901      	subs	r1, #1
 80027a6:	b28d      	uxth	r5, r1
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 80027a8:	4617      	mov	r7, r2
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <eMBMasterRegCoilsCB+0x90>)

    /* it already plus one in modbus function method. */
    usAddress--;

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 80027ac:	18aa      	adds	r2, r5, r2
 80027ae:	2a40      	cmp	r2, #64	; 0x40
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 80027b0:	b083      	sub	sp, #12
 80027b2:	781b      	ldrb	r3, [r3, #0]

    /* it already plus one in modbus function method. */
    usAddress--;

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 80027b4:	dc38      	bgt.n	8002828 <eMBMasterRegCoilsCB+0x88>
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 80027b6:	4e1f      	ldr	r6, [pc, #124]	; (8002834 <eMBMasterRegCoilsCB+0x94>)
 80027b8:	3b01      	subs	r3, #1
 80027ba:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 80027be:	08fb      	lsrs	r3, r7, #3
    usAddress--;

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 80027c0:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
 80027c4:	4681      	mov	r9, r0
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 80027c6:	f005 0507 	and.w	r5, r5, #7
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	d01a      	beq.n	8002804 <eMBMasterRegCoilsCB+0x64>
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	eb00 0803 	add.w	r8, r0, r3
 80027d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	4658      	mov	r0, fp
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80027de:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80027e2:	1c44      	adds	r4, r0, #1
 80027e4:	4629      	mov	r1, r5
 80027e6:	4430      	add	r0, r6
 80027e8:	2208      	movs	r2, #8
 80027ea:	f7ff f9b9 	bl	8001b60 <xMBUtilSetBits>
 80027ee:	b2a4      	uxth	r4, r4
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 80027f0:	45c2      	cmp	sl, r8
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 80027f2:	4620      	mov	r0, r4
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 80027f4:	d1f3      	bne.n	80027de <eMBMasterRegCoilsCB+0x3e>
 80027f6:	9b00      	ldr	r3, [sp, #0]
 80027f8:	449b      	add	fp, r3
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	3301      	adds	r3, #1
 80027fe:	fa1f fb8b 	uxth.w	fp, fp
 8002802:	4499      	add	r9, r3
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8002804:	f017 0207 	ands.w	r2, r7, #7
 8002808:	d103      	bne.n	8002812 <eMBMasterRegCoilsCB+0x72>
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 800280a:	4610      	mov	r0, r2
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 800280c:	b003      	add	sp, #12
 800280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8002812:	eb06 000b 	add.w	r0, r6, fp
 8002816:	4629      	mov	r1, r5
 8002818:	f899 3000 	ldrb.w	r3, [r9]
 800281c:	f7ff f9a0 	bl	8001b60 <xMBUtilSetBits>
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8002820:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 8002822:	b003      	add	sp, #12
 8002824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002828:	2001      	movs	r0, #1
    }
    return eStatus;
}
 800282a:	b003      	add	sp, #12
 800282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002830:	2000a8a9 	.word	0x2000a8a9
 8002834:	2000a800 	.word	0x2000a800
 8002838:	f3af 8000 	nop.w
 800283c:	f3af 8000 	nop.w

08002840 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 8002840:	b470      	push	{r4, r5, r6}
    usRegHoldStart = usMRegHoldStart;
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 8002842:	3901      	subs	r1, #1
 8002844:	b289      	uxth	r1, r1
    uint16_t *        pusRegHoldingBuf;
    uint16_t          REG_HOLDING_START;
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;
 8002846:	4c14      	ldr	r4, [pc, #80]	; (8002898 <eMBMasterRegHoldingCB+0x58>)
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <eMBMasterRegHoldingCB+0x5c>)
 800284a:	8022      	strh	r2, [r4, #0]
    /* it already plus one in modbus function method. */
    usAddress--;
	//chprintf((BaseSequentialStream *)&itm_port,"usAddress: %d\n", usAddress);

    if ((usAddress >= REG_HOLDING_START)
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800284c:	188e      	adds	r6, r1, r2
 800284e:	f5b6 7f16 	cmp.w	r6, #600	; 0x258
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	dc1d      	bgt.n	8002892 <eMBMasterRegHoldingCB+0x52>
    {
        iRegIndex = usAddress - usRegHoldStart;
		xtholdingRegIndex = iRegIndex;
 8002856:	4c12      	ldr	r4, [pc, #72]	; (80028a0 <eMBMasterRegHoldingCB+0x60>)
 8002858:	8021      	strh	r1, [r4, #0]
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 800285a:	b1ba      	cbz	r2, 800288c <eMBMasterRegHoldingCB+0x4c>
 800285c:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <eMBMasterRegHoldingCB+0x64>)
 800285e:	3b01      	subs	r3, #1
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8002860:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8002864:	3002      	adds	r0, #2
 8002866:	b2b6      	uxth	r6, r6
 8002868:	fb04 2403 	mla	r4, r4, r3, r2
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800286c:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8002876:	f810 2c01 	ldrb.w	r2, [r0, #-1]
                iRegIndex++;
 800287a:	1c4d      	adds	r5, r1, #1
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800287c:	4313      	orrs	r3, r2
 800287e:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
                iRegIndex++;
 8002882:	b2a9      	uxth	r1, r5
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 8002884:	42b1      	cmp	r1, r6
 8002886:	f100 0002 	add.w	r0, r0, #2
 800288a:	d1ef      	bne.n	800286c <eMBMasterRegHoldingCB+0x2c>
 * @return result
 */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 800288c:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 800288e:	bc70      	pop	{r4, r5, r6}
 8002890:	4770      	bx	lr
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002892:	2001      	movs	r0, #1
    }
    return eStatus;
}
 8002894:	bc70      	pop	{r4, r5, r6}
 8002896:	4770      	bx	lr
 8002898:	20005cd8 	.word	0x20005cd8
 800289c:	2000a8a9 	.word	0x2000a8a9
 80028a0:	20005ce0 	.word	0x20005ce0
 80028a4:	20005cfc 	.word	0x20005cfc
 80028a8:	f3af 8000 	nop.w
 80028ac:	f3af 8000 	nop.w

080028b0 <chTMStartMeasurementX.constprop.24>:
 80028b0:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <chTMStartMeasurementX.constprop.24+0x8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80028b4:	6083      	str	r3, [r0, #8]
 80028b6:	4770      	bx	lr
 80028b8:	e0001000 	.word	0xe0001000
 80028bc:	f3af 8000 	nop.w

080028c0 <long_to_string_with_divisor.constprop.22>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 80028c0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80028c2:	f100 070b 	add.w	r7, r0, #11
 80028c6:	463c      	mov	r4, r7
 80028c8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 80028ca:	fbb1 f6f2 	udiv	r6, r1, r2
 80028ce:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80028d2:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 80028d6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80028d8:	bfc8      	it	gt
 80028da:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 80028e4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 80028e8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	d1ed      	bne.n	80028ca <long_to_string_with_divisor.constprop.22+0xa>

  i = (int)(p + MAX_FILLER - q);
 80028ee:	1b3a      	subs	r2, r7, r4
 80028f0:	4402      	add	r2, r0
 80028f2:	e001      	b.n	80028f8 <long_to_string_with_divisor.constprop.22+0x38>
 80028f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 80028f8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80028fc:	4290      	cmp	r0, r2
 80028fe:	d1f9      	bne.n	80028f4 <long_to_string_with_divisor.constprop.22+0x34>

  return p;
}
 8002900:	bcf0      	pop	{r4, r5, r6, r7}
 8002902:	4770      	bx	lr
 8002904:	f3af 8000 	nop.w
 8002908:	f3af 8000 	nop.w
 800290c:	f3af 8000 	nop.w

08002910 <chvprintf.constprop.21>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	b087      	sub	sp, #28
 8002916:	f10d 030d 	add.w	r3, sp, #13
 800291a:	aa03      	add	r2, sp, #12
 800291c:	1a9b      	subs	r3, r3, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800291e:	f04f 0800 	mov.w	r8, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8002922:	4682      	mov	sl, r0
 8002924:	460d      	mov	r5, r1
 8002926:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002928:	f8cd 8000 	str.w	r8, [sp]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800292c:	f89a 1000 	ldrb.w	r1, [sl]
 8002930:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 8002934:	b191      	cbz	r1, 800295c <chvprintf.constprop.21+0x4c>
      return n;
    if (c != '%') {
 8002936:	2925      	cmp	r1, #37	; 0x25
 8002938:	d016      	beq.n	8002968 <chvprintf.constprop.21+0x58>
      chSequentialStreamPut(chp, (uint8_t)c);
 800293a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8002c34 <chvprintf.constprop.21+0x324>
      n++;
 800293e:	9a00      	ldr	r2, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8002940:	f8d8 0000 	ldr.w	r0, [r8]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8002944:	469a      	mov	sl, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8002946:	6884      	ldr	r4, [r0, #8]
      n++;
 8002948:	3201      	adds	r2, #1
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800294a:	4640      	mov	r0, r8
      n++;
 800294c:	9200      	str	r2, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800294e:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8002950:	f89a 1000 	ldrb.w	r1, [sl]
 8002954:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 8002958:	2900      	cmp	r1, #0
 800295a:	d1ec      	bne.n	8002936 <chvprintf.constprop.21+0x26>
 800295c:	f8dd 8000 	ldr.w	r8, [sp]
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8002960:	4640      	mov	r0, r8
 8002962:	b007      	add	sp, #28
 8002964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002968:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800296c:	2a2d      	cmp	r2, #45	; 0x2d
 800296e:	bf03      	ittte	eq
 8002970:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
      fmt++;
 8002974:	f10a 0302 	addeq.w	r3, sl, #2
      left_align = TRUE;
 8002978:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800297a:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800297c:	2a30      	cmp	r2, #48	; 0x30
 800297e:	bf03      	ittte	eq
 8002980:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8002982:	3301      	addeq	r3, #1
      filler = '0';
 8002984:	2430      	moveq	r4, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002986:	2420      	movne	r4, #32
 8002988:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800298a:	2600      	movs	r6, #0
 800298c:	e006      	b.n	800299c <chvprintf.constprop.21+0x8c>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 800298e:	782b      	ldrb	r3, [r5, #0]
 8002990:	3504      	adds	r5, #4
 8002992:	f89a 2000 	ldrb.w	r2, [sl]
      else
        break;
      width = width * 10 + c;
 8002996:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 800299a:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800299c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 80029a4:	468a      	mov	sl, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 80029a6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80029aa:	d9f2      	bls.n	8002992 <chvprintf.constprop.21+0x82>
        c -= '0';
      else if (c == '*')
 80029ac:	2a2a      	cmp	r2, #42	; 0x2a
 80029ae:	d0ee      	beq.n	800298e <chvprintf.constprop.21+0x7e>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80029b0:	2a2e      	cmp	r2, #46	; 0x2e
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	d043      	beq.n	8002a40 <chvprintf.constprop.21+0x130>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80029b8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80029bc:	2b4c      	cmp	r3, #76	; 0x4c
 80029be:	d04e      	beq.n	8002a5e <chvprintf.constprop.21+0x14e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80029c0:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 80029c4:	2834      	cmp	r0, #52	; 0x34
 80029c6:	f200 8104 	bhi.w	8002bd2 <chvprintf.constprop.21+0x2c2>
 80029ca:	e8df f010 	tbh	[pc, r0, lsl #1]
 80029ce:	00f7      	.short	0x00f7
 80029d0:	01020102 	.word	0x01020102
 80029d4:	01020102 	.word	0x01020102
 80029d8:	010200f7 	.word	0x010200f7
 80029dc:	01020102 	.word	0x01020102
 80029e0:	01020102 	.word	0x01020102
 80029e4:	010200f5 	.word	0x010200f5
 80029e8:	01020102 	.word	0x01020102
 80029ec:	01020102 	.word	0x01020102
 80029f0:	010200e9 	.word	0x010200e9
 80029f4:	00ff0102 	.word	0x00ff0102
 80029f8:	01020102 	.word	0x01020102
 80029fc:	01020102 	.word	0x01020102
 8002a00:	01020102 	.word	0x01020102
 8002a04:	01020102 	.word	0x01020102
 8002a08:	01020102 	.word	0x01020102
 8002a0c:	00f700be 	.word	0x00f700be
 8002a10:	01020102 	.word	0x01020102
 8002a14:	01020102 	.word	0x01020102
 8002a18:	010200f7 	.word	0x010200f7
 8002a1c:	01020102 	.word	0x01020102
 8002a20:	01020102 	.word	0x01020102
 8002a24:	010200f5 	.word	0x010200f5
 8002a28:	01020102 	.word	0x01020102
 8002a2c:	01020071 	.word	0x01020071
 8002a30:	010200e9 	.word	0x010200e9
 8002a34:	00ff0102 	.word	0x00ff0102
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8002a38:	782b      	ldrb	r3, [r5, #0]
 8002a3a:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8002a3c:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8002a40:	f81a 2b01 	ldrb.w	r2, [sl], #1
        if (c >= '0' && c <= '9')
 8002a44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8002a4c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8002a50:	d9f4      	bls.n	8002a3c <chvprintf.constprop.21+0x12c>
          c -= '0';
        else if (c == '*')
 8002a52:	2a2a      	cmp	r2, #42	; 0x2a
 8002a54:	d0f0      	beq.n	8002a38 <chvprintf.constprop.21+0x128>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002a56:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002a5a:	2b4c      	cmp	r3, #76	; 0x4c
 8002a5c:	d1b0      	bne.n	80029c0 <chvprintf.constprop.21+0xb0>
      is_long = TRUE;
      if (*fmt)
 8002a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80b5 	beq.w	8002bd2 <chvprintf.constprop.21+0x2c2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002a68:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002a6c:	f10a 0a01 	add.w	sl, sl, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002a70:	2a34      	cmp	r2, #52	; 0x34
 8002a72:	f200 80ad 	bhi.w	8002bd0 <chvprintf.constprop.21+0x2c0>
 8002a76:	e8df f002 	tbb	[pc, r2]
 8002a7a:	aba1      	.short	0xaba1
 8002a7c:	a1ababab 	.word	0xa1ababab
 8002a80:	abababab 	.word	0xabababab
 8002a84:	abab9fab 	.word	0xabab9fab
 8002a88:	93ababab 	.word	0x93ababab
 8002a8c:	aba9abab 	.word	0xaba9abab
 8002a90:	abababab 	.word	0xabababab
 8002a94:	abababab 	.word	0xabababab
 8002a98:	aba168ab 	.word	0xaba168ab
 8002a9c:	a1ababab 	.word	0xa1ababab
 8002aa0:	abababab 	.word	0xabababab
 8002aa4:	abab9fab 	.word	0xabab9fab
 8002aa8:	93ab1bab 	.word	0x93ab1bab
 8002aac:	abab      	.short	0xabab
 8002aae:	a9          	.byte	0xa9
 8002aaf:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002ab0:	f8d5 9000 	ldr.w	r9, [r5]
        s = "(null)";
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <chvprintf.constprop.21+0x320>)
 8002ab6:	f1b9 0f00 	cmp.w	r9, #0
 8002aba:	bf08      	it	eq
 8002abc:	4699      	moveq	r9, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002abe:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002ac0:	f899 3000 	ldrb.w	r3, [r9]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	f000 809e 	beq.w	8002c06 <chvprintf.constprop.21+0x2f6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a0 	beq.w	8002c10 <chvprintf.constprop.21+0x300>
 8002ad0:	3901      	subs	r1, #1
 8002ad2:	4648      	mov	r0, r9
 8002ad4:	e001      	b.n	8002ada <chvprintf.constprop.21+0x1ca>
 8002ad6:	3901      	subs	r1, #1
 8002ad8:	d403      	bmi.n	8002ae2 <chvprintf.constprop.21+0x1d2>
 8002ada:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <chvprintf.constprop.21+0x1c6>
 8002ae2:	ebc9 0000 	rsb	r0, r9, r0
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002ae6:	1a36      	subs	r6, r6, r0
 8002ae8:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002aea:	2420      	movs	r4, #32
 8002aec:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002af0:	2f00      	cmp	r7, #0
 8002af2:	d039      	beq.n	8002b68 <chvprintf.constprop.21+0x258>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002af4:	1e1f      	subs	r7, r3, #0
 8002af6:	db16      	blt.n	8002b26 <chvprintf.constprop.21+0x216>
 8002af8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002c34 <chvprintf.constprop.21+0x324>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002afc:	46bb      	mov	fp, r7
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8002afe:	f8d8 3000 	ldr.w	r3, [r8]
 8002b02:	484c      	ldr	r0, [pc, #304]	; (8002c34 <chvprintf.constprop.21+0x324>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f819 1b01 	ldrb.w	r1, [r9], #1
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8002b0e:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002b10:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002b14:	d1f3      	bne.n	8002afe <chvprintf.constprop.21+0x1ee>
 8002b16:	9b00      	ldr	r3, [sp, #0]
 8002b18:	f103 0801 	add.w	r8, r3, #1
 8002b1c:	4643      	mov	r3, r8
 8002b1e:	2f00      	cmp	r7, #0
 8002b20:	bfa8      	it	ge
 8002b22:	19db      	addge	r3, r3, r7
 8002b24:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	f43f af00 	beq.w	800292c <chvprintf.constprop.21+0x1c>
 8002b2c:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002c34 <chvprintf.constprop.21+0x324>
 8002b30:	4637      	mov	r7, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 8002b32:	f8d8 3000 	ldr.w	r3, [r8]
 8002b36:	483f      	ldr	r0, [pc, #252]	; (8002c34 <chvprintf.constprop.21+0x324>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002b3e:	3f01      	subs	r7, #1
 8002b40:	d1f7      	bne.n	8002b32 <chvprintf.constprop.21+0x222>
 8002b42:	9b00      	ldr	r3, [sp, #0]
 8002b44:	4433      	add	r3, r6
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	e6f0      	b.n	800292c <chvprintf.constprop.21+0x1c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002b50:	9b01      	ldr	r3, [sp, #4]
 8002b52:	3504      	adds	r5, #4
 8002b54:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8002b56:	2420      	movs	r4, #32
 8002b58:	3b01      	subs	r3, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002b5a:	f10d 090c 	add.w	r9, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002b5e:	1a36      	subs	r6, r6, r0
 8002b60:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8002b64:	2f00      	cmp	r7, #0
 8002b66:	d1c5      	bne.n	8002af4 <chvprintf.constprop.21+0x1e4>
 8002b68:	461f      	mov	r7, r3
      width = -width;
 8002b6a:	f1c6 0b00 	rsb	fp, r6, #0
    if (width < 0) {
 8002b6e:	f1bb 0f00 	cmp.w	fp, #0
 8002b72:	d036      	beq.n	8002be2 <chvprintf.constprop.21+0x2d2>
      if (*s == '-' && filler == '0') {
 8002b74:	f899 1000 	ldrb.w	r1, [r9]
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8002b78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002c34 <chvprintf.constprop.21+0x324>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002b7c:	292d      	cmp	r1, #45	; 0x2d
 8002b7e:	d034      	beq.n	8002bea <chvprintf.constprop.21+0x2da>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8002b80:	465e      	mov	r6, fp
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8002b82:	f8d8 3000 	ldr.w	r3, [r8]
 8002b86:	482b      	ldr	r0, [pc, #172]	; (8002c34 <chvprintf.constprop.21+0x324>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002b8e:	3601      	adds	r6, #1
 8002b90:	d1f7      	bne.n	8002b82 <chvprintf.constprop.21+0x272>
 8002b92:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 8002b94:	2f00      	cmp	r7, #0
 8002b96:	ebcb 0303 	rsb	r3, fp, r3
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	daae      	bge.n	8002afc <chvprintf.constprop.21+0x1ec>
 8002b9e:	e6c5      	b.n	800292c <chvprintf.constprop.21+0x1c>
 8002ba0:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ba2:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ba4:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ba6:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ba8:	f7ff fe8a 	bl	80028c0 <long_to_string_with_divisor.constprop.22>
 8002bac:	ab03      	add	r3, sp, #12
 8002bae:	1ac0      	subs	r0, r0, r3
 8002bb0:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002bb2:	f10d 090c 	add.w	r9, sp, #12
 8002bb6:	e7d2      	b.n	8002b5e <chvprintf.constprop.21+0x24e>
 8002bb8:	2208      	movs	r2, #8
 8002bba:	e7f2      	b.n	8002ba2 <chvprintf.constprop.21+0x292>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002bbc:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 8002bbe:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002bc0:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8002bc4:	db2b      	blt.n	8002c1e <chvprintf.constprop.21+0x30e>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002bc6:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002bc8:	220a      	movs	r2, #10
 8002bca:	e7ed      	b.n	8002ba8 <chvprintf.constprop.21+0x298>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002bcc:	2210      	movs	r2, #16
 8002bce:	e7e8      	b.n	8002ba2 <chvprintf.constprop.21+0x292>
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002bd4:	f88d 200c 	strb.w	r2, [sp, #12]
 8002bd8:	4618      	mov	r0, r3
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002bda:	f10d 090c 	add.w	r9, sp, #12
 8002bde:	3b01      	subs	r3, #1
 8002be0:	e7bd      	b.n	8002b5e <chvprintf.constprop.21+0x24e>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002be2:	2f00      	cmp	r7, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002be4:	465e      	mov	r6, fp
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002be6:	da87      	bge.n	8002af8 <chvprintf.constprop.21+0x1e8>
 8002be8:	e6a0      	b.n	800292c <chvprintf.constprop.21+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002bea:	2c30      	cmp	r4, #48	; 0x30
 8002bec:	d1c8      	bne.n	8002b80 <chvprintf.constprop.21+0x270>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8002bee:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4798      	blx	r3
        n++;
 8002bf8:	9b00      	ldr	r3, [sp, #0]
 8002bfa:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8002bfc:	f109 0901 	add.w	r9, r9, #1
        n++;
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	3f01      	subs	r7, #1
 8002c04:	e7bc      	b.n	8002b80 <chvprintf.constprop.21+0x270>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002c06:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f47f af61 	bne.w	8002ad2 <chvprintf.constprop.21+0x1c2>
 8002c10:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002c14:	b957      	cbnz	r7, 8002c2c <chvprintf.constprop.21+0x31c>
 8002c16:	f04f 37ff 	mov.w	r7, #4294967295
 8002c1a:	2420      	movs	r4, #32
 8002c1c:	e7a5      	b.n	8002b6a <chvprintf.constprop.21+0x25a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002c1e:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002c20:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002c22:	f88d 300c 	strb.w	r3, [sp, #12]
 8002c26:	f10d 000d 	add.w	r0, sp, #13
 8002c2a:	e7cd      	b.n	8002bc8 <chvprintf.constprop.21+0x2b8>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002c2c:	2420      	movs	r4, #32
 8002c2e:	e77a      	b.n	8002b26 <chvprintf.constprop.21+0x216>
 8002c30:	08005ca8 	.word	0x08005ca8
 8002c34:	2000ae38 	.word	0x2000ae38
 8002c38:	f3af 8000 	nop.w
 8002c3c:	f3af 8000 	nop.w

08002c40 <chThdCreateStatic.constprop.27>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	469c      	mov	ip, r3
 8002c46:	4604      	mov	r4, r0
 8002c48:	2320      	movs	r3, #32
 8002c4a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c4e:	4d28      	ldr	r5, [pc, #160]	; (8002cf0 <chThdCreateStatic.constprop.27+0xb0>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <chThdCreateStatic.constprop.27+0xb4>)

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002c52:	69ae      	ldr	r6, [r5, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c54:	f8d5 e014 	ldr.w	lr, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002c58:	3924      	subs	r1, #36	; 0x24
 8002c5a:	1847      	adds	r7, r0, r1
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	60e7      	str	r7, [r4, #12]
 8002c60:	f844 c001 	str.w	ip, [r4, r1]
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	6078      	str	r0, [r7, #4]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002c68:	60a2      	str	r2, [r4, #8]
 8002c6a:	68b1      	ldr	r1, [r6, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c6c:	6125      	str	r5, [r4, #16]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8002c6e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002c72:	f04f 0802 	mov.w	r8, #2
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8002c76:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8002c7a:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8002c7e:	428a      	cmp	r2, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c80:	f8c4 e014 	str.w	lr, [r4, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002c84:	7760      	strb	r0, [r4, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8002c86:	63e2      	str	r2, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8002c88:	63a0      	str	r0, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8002c8a:	6360      	str	r0, [r4, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8002c8c:	61a0      	str	r0, [r4, #24]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002c8e:	f884 801c 	strb.w	r8, [r4, #28]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8002c92:	f884 c01e 	strb.w	ip, [r4, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c96:	616c      	str	r4, [r5, #20]
 8002c98:	f8ce 4010 	str.w	r4, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002c9c:	6267      	str	r7, [r4, #36]	; 0x24

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002c9e:	6220      	str	r0, [r4, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8002ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ca2:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002ca4:	d810      	bhi.n	8002cc8 <chThdCreateStatic.constprop.27+0x88>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002ca6:	7720      	strb	r0, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8002ca8:	462b      	mov	r3, r5
  do {
    cp = cp->p_next;
 8002caa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	428a      	cmp	r2, r1
 8002cb0:	d9fb      	bls.n	8002caa <chThdCreateStatic.constprop.27+0x6a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002cb6:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8002cb8:	605c      	str	r4, [r3, #4]
 8002cba:	6014      	str	r4, [r2, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
  chSysUnlock();

  return tp;
}
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002cc8:	7730      	strb	r0, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8002cca:	462b      	mov	r3, r5
  do {
    cp = cp->p_next;
 8002ccc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4291      	cmp	r1, r2
 8002cd2:	d9fb      	bls.n	8002ccc <chThdCreateStatic.constprop.27+0x8c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	6072      	str	r2, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002cd8:	2701      	movs	r7, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002cda:	6033      	str	r3, [r6, #0]
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8002cdc:	4631      	mov	r1, r6
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8002cde:	605e      	str	r6, [r3, #4]
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8002ce0:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8002ce2:	6016      	str	r6, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002ce4:	7727      	strb	r7, [r4, #28]
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8002ce6:	61ac      	str	r4, [r5, #24]
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8002ce8:	f7fd fc82 	bl	80005f0 <_port_switch>
 8002cec:	e7e6      	b.n	8002cbc <chThdCreateStatic.constprop.27+0x7c>
 8002cee:	bf00      	nop
 8002cf0:	2000aba0 	.word	0x2000aba0
 8002cf4:	08000601 	.word	0x08000601
 8002cf8:	f3af 8000 	nop.w
 8002cfc:	f3af 8000 	nop.w

08002d00 <chprintf.constprop.20>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d00:	b40e      	push	{r1, r2, r3}
 8002d02:	b500      	push	{lr}
 8002d04:	b082      	sub	sp, #8
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d06:	ab04      	add	r3, sp, #16
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4804      	ldr	r0, [pc, #16]	; (8002d1c <chprintf.constprop.20+0x1c>)
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d0c:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d0e:	f7ff fdff 	bl	8002910 <chvprintf.constprop.21>
  va_end(ap);

  return formatted_bytes;
}
 8002d12:	b002      	add	sp, #8
 8002d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d18:	b003      	add	sp, #12
 8002d1a:	4770      	bx	lr
 8002d1c:	080059c0 	.word	0x080059c0

08002d20 <chprintf.constprop.18>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d20:	b40e      	push	{r1, r2, r3}
 8002d22:	b500      	push	{lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	a903      	add	r1, sp, #12
 8002d28:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d2c:	9101      	str	r1, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d2e:	f7ff fdef 	bl	8002910 <chvprintf.constprop.21>
  va_end(ap);

  return formatted_bytes;
}
 8002d32:	b002      	add	sp, #8
 8002d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d38:	b003      	add	sp, #12
 8002d3a:	4770      	bx	lr
 8002d3c:	f3af 8000 	nop.w

08002d40 <chprintf.constprop.5>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d40:	b40e      	push	{r1, r2, r3}
 8002d42:	b500      	push	{lr}
 8002d44:	b082      	sub	sp, #8
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d46:	ab04      	add	r3, sp, #16
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4804      	ldr	r0, [pc, #16]	; (8002d5c <chprintf.constprop.5+0x1c>)
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d4c:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d4e:	f7ff fddf 	bl	8002910 <chvprintf.constprop.21>
  va_end(ap);

  return formatted_bytes;
}
 8002d52:	b002      	add	sp, #8
 8002d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d58:	b003      	add	sp, #12
 8002d5a:	4770      	bx	lr
 8002d5c:	080059c0 	.word	0x080059c0

08002d60 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d60:	b40e      	push	{r1, r2, r3}
 8002d62:	b500      	push	{lr}
 8002d64:	b082      	sub	sp, #8
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d66:	ab04      	add	r3, sp, #16
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4804      	ldr	r0, [pc, #16]	; (8002d7c <chprintf.constprop.0+0x1c>)
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d6c:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002d6e:	f7ff fdcf 	bl	8002910 <chvprintf.constprop.21>
  va_end(ap);

  return formatted_bytes;
}
 8002d72:	b002      	add	sp, #8
 8002d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d78:	b003      	add	sp, #12
 8002d7a:	4770      	bx	lr
 8002d7c:	08005978 	.word	0x08005978

08002d80 <__assert_func>:
 8002d80:	b500      	push	{lr}
 8002d82:	4c0a      	ldr	r4, [pc, #40]	; (8002dac <__assert_func+0x2c>)
 8002d84:	6824      	ldr	r4, [r4, #0]
 8002d86:	4605      	mov	r5, r0
 8002d88:	b085      	sub	sp, #20
 8002d8a:	68e0      	ldr	r0, [r4, #12]
 8002d8c:	b152      	cbz	r2, 8002da4 <__assert_func+0x24>
 8002d8e:	4c08      	ldr	r4, [pc, #32]	; (8002db0 <__assert_func+0x30>)
 8002d90:	9202      	str	r2, [sp, #8]
 8002d92:	e88d 0012 	stmia.w	sp, {r1, r4}
 8002d96:	461a      	mov	r2, r3
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <__assert_func+0x34>)
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	f000 f810 	bl	8002dc0 <fiprintf>
 8002da0:	f000 ff16 	bl	8003bd0 <abort>
 8002da4:	4c04      	ldr	r4, [pc, #16]	; (8002db8 <__assert_func+0x38>)
 8002da6:	4622      	mov	r2, r4
 8002da8:	e7f2      	b.n	8002d90 <__assert_func+0x10>
 8002daa:	bf00      	nop
 8002dac:	20000c50 	.word	0x20000c50
 8002db0:	08005c10 	.word	0x08005c10
 8002db4:	08005c20 	.word	0x08005c20
 8002db8:	08005b0c 	.word	0x08005b0c
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <fiprintf>:
 8002dc0:	b40e      	push	{r1, r2, r3}
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	ab05      	add	r3, sp, #20
 8002dc8:	4c06      	ldr	r4, [pc, #24]	; (8002de4 <fiprintf+0x24>)
 8002dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	4601      	mov	r1, r0
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	f000 f84c 	bl	8002e70 <_vfiprintf_r>
 8002dd8:	b003      	add	sp, #12
 8002dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dde:	b003      	add	sp, #12
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000c50 	.word	0x20000c50
	...

08002df0 <__sprint_r.part.0>:
 8002df0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df6:	049c      	lsls	r4, r3, #18
 8002df8:	460f      	mov	r7, r1
 8002dfa:	4692      	mov	sl, r2
 8002dfc:	d52b      	bpl.n	8002e56 <__sprint_r.part.0+0x66>
 8002dfe:	6893      	ldr	r3, [r2, #8]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	b333      	cbz	r3, 8002e52 <__sprint_r.part.0+0x62>
 8002e04:	4680      	mov	r8, r0
 8002e06:	f102 0908 	add.w	r9, r2, #8
 8002e0a:	e919 0060 	ldmdb	r9, {r5, r6}
 8002e0e:	08b6      	lsrs	r6, r6, #2
 8002e10:	d017      	beq.n	8002e42 <__sprint_r.part.0+0x52>
 8002e12:	3d04      	subs	r5, #4
 8002e14:	2400      	movs	r4, #0
 8002e16:	e001      	b.n	8002e1c <__sprint_r.part.0+0x2c>
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d010      	beq.n	8002e3e <__sprint_r.part.0+0x4e>
 8002e1c:	4640      	mov	r0, r8
 8002e1e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8002e22:	463a      	mov	r2, r7
 8002e24:	f001 f83c 	bl	8003ea0 <_fputwc_r>
 8002e28:	1c43      	adds	r3, r0, #1
 8002e2a:	f104 0401 	add.w	r4, r4, #1
 8002e2e:	d1f3      	bne.n	8002e18 <__sprint_r.part.0+0x28>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8ca 3008 	str.w	r3, [sl, #8]
 8002e36:	f8ca 3004 	str.w	r3, [sl, #4]
 8002e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002e42:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8002e46:	f8ca 3008 	str.w	r3, [sl, #8]
 8002e4a:	f109 0908 	add.w	r9, r9, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1db      	bne.n	8002e0a <__sprint_r.part.0+0x1a>
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7ec      	b.n	8002e30 <__sprint_r.part.0+0x40>
 8002e56:	f001 f9b3 	bl	80041c0 <__sfvwrite_r>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8ca 3008 	str.w	r3, [sl, #8]
 8002e60:	f8ca 3004 	str.w	r3, [sl, #4]
 8002e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e70 <_vfiprintf_r>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	b0ab      	sub	sp, #172	; 0xac
 8002e76:	461c      	mov	r4, r3
 8002e78:	9100      	str	r1, [sp, #0]
 8002e7a:	4693      	mov	fp, r2
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	9001      	str	r0, [sp, #4]
 8002e80:	b118      	cbz	r0, 8002e8a <_vfiprintf_r+0x1a>
 8002e82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80e1 	beq.w	800304c <_vfiprintf_r+0x1dc>
 8002e8a:	9b00      	ldr	r3, [sp, #0]
 8002e8c:	8999      	ldrh	r1, [r3, #12]
 8002e8e:	b28a      	uxth	r2, r1
 8002e90:	0490      	lsls	r0, r2, #18
 8002e92:	d408      	bmi.n	8002ea6 <_vfiprintf_r+0x36>
 8002e94:	4618      	mov	r0, r3
 8002e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e98:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8002e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ea0:	8182      	strh	r2, [r0, #12]
 8002ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	0711      	lsls	r1, r2, #28
 8002ea8:	f140 80b0 	bpl.w	800300c <_vfiprintf_r+0x19c>
 8002eac:	9b00      	ldr	r3, [sp, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80ab 	beq.w	800300c <_vfiprintf_r+0x19c>
 8002eb6:	f002 021a 	and.w	r2, r2, #26
 8002eba:	2a0a      	cmp	r2, #10
 8002ebc:	f000 80b2 	beq.w	8003024 <_vfiprintf_r+0x1b4>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8002ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002eca:	930e      	str	r3, [sp, #56]	; 0x38
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002ed2:	4654      	mov	r4, sl
 8002ed4:	f89b 3000 	ldrb.w	r3, [fp]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 849d 	beq.w	8003818 <_vfiprintf_r+0x9a8>
 8002ede:	2b25      	cmp	r3, #37	; 0x25
 8002ee0:	f000 849a 	beq.w	8003818 <_vfiprintf_r+0x9a8>
 8002ee4:	465a      	mov	r2, fp
 8002ee6:	e001      	b.n	8002eec <_vfiprintf_r+0x7c>
 8002ee8:	2b25      	cmp	r3, #37	; 0x25
 8002eea:	d003      	beq.n	8002ef4 <_vfiprintf_r+0x84>
 8002eec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <_vfiprintf_r+0x78>
 8002ef4:	ebcb 0602 	rsb	r6, fp, r2
 8002ef8:	4615      	mov	r5, r2
 8002efa:	b196      	cbz	r6, 8002f22 <_vfiprintf_r+0xb2>
 8002efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f00:	f8c4 b000 	str.w	fp, [r4]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4432      	add	r2, r6
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	6066      	str	r6, [r4, #4]
 8002f0c:	920f      	str	r2, [sp, #60]	; 0x3c
 8002f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8002f10:	dd77      	ble.n	8003002 <_vfiprintf_r+0x192>
 8002f12:	2a00      	cmp	r2, #0
 8002f14:	f040 84a9 	bne.w	800386a <_vfiprintf_r+0x9fa>
 8002f18:	9b02      	ldr	r3, [sp, #8]
 8002f1a:	920e      	str	r2, [sp, #56]	; 0x38
 8002f1c:	4433      	add	r3, r6
 8002f1e:	4654      	mov	r4, sl
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	782b      	ldrb	r3, [r5, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8359 	beq.w	80035dc <_vfiprintf_r+0x76c>
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f04f 3cff 	mov.w	ip, #4294967295
 8002f30:	1c68      	adds	r0, r5, #1
 8002f32:	786b      	ldrb	r3, [r5, #1]
 8002f34:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8002f38:	4688      	mov	r8, r1
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	4666      	mov	r6, ip
 8002f3e:	f100 0b01 	add.w	fp, r0, #1
 8002f42:	f1a3 0220 	sub.w	r2, r3, #32
 8002f46:	2a58      	cmp	r2, #88	; 0x58
 8002f48:	f200 82a7 	bhi.w	800349a <_vfiprintf_r+0x62a>
 8002f4c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002f50:	02a50297 	.word	0x02a50297
 8002f54:	029f02a5 	.word	0x029f02a5
 8002f58:	02a502a5 	.word	0x02a502a5
 8002f5c:	02a502a5 	.word	0x02a502a5
 8002f60:	02a502a5 	.word	0x02a502a5
 8002f64:	025f0252 	.word	0x025f0252
 8002f68:	010c02a5 	.word	0x010c02a5
 8002f6c:	02a5026a 	.word	0x02a5026a
 8002f70:	012e0128 	.word	0x012e0128
 8002f74:	012e012e 	.word	0x012e012e
 8002f78:	012e012e 	.word	0x012e012e
 8002f7c:	012e012e 	.word	0x012e012e
 8002f80:	012e012e 	.word	0x012e012e
 8002f84:	02a502a5 	.word	0x02a502a5
 8002f88:	02a502a5 	.word	0x02a502a5
 8002f8c:	02a502a5 	.word	0x02a502a5
 8002f90:	02a502a5 	.word	0x02a502a5
 8002f94:	02a502a5 	.word	0x02a502a5
 8002f98:	02a5013c 	.word	0x02a5013c
 8002f9c:	02a502a5 	.word	0x02a502a5
 8002fa0:	02a502a5 	.word	0x02a502a5
 8002fa4:	02a502a5 	.word	0x02a502a5
 8002fa8:	02a502a5 	.word	0x02a502a5
 8002fac:	017302a5 	.word	0x017302a5
 8002fb0:	02a502a5 	.word	0x02a502a5
 8002fb4:	02a502a5 	.word	0x02a502a5
 8002fb8:	018a02a5 	.word	0x018a02a5
 8002fbc:	02a502a5 	.word	0x02a502a5
 8002fc0:	02a501a2 	.word	0x02a501a2
 8002fc4:	02a502a5 	.word	0x02a502a5
 8002fc8:	02a502a5 	.word	0x02a502a5
 8002fcc:	02a502a5 	.word	0x02a502a5
 8002fd0:	02a502a5 	.word	0x02a502a5
 8002fd4:	01c602a5 	.word	0x01c602a5
 8002fd8:	02a501d8 	.word	0x02a501d8
 8002fdc:	02a502a5 	.word	0x02a502a5
 8002fe0:	01d80122 	.word	0x01d80122
 8002fe4:	02a502a5 	.word	0x02a502a5
 8002fe8:	02a50249 	.word	0x02a50249
 8002fec:	01120286 	.word	0x01120286
 8002ff0:	020501f1 	.word	0x020501f1
 8002ff4:	020b02a5 	.word	0x020b02a5
 8002ff8:	008102a5 	.word	0x008102a5
 8002ffc:	02a502a5 	.word	0x02a502a5
 8003000:	0230      	.short	0x0230
 8003002:	3408      	adds	r4, #8
 8003004:	9b02      	ldr	r3, [sp, #8]
 8003006:	4433      	add	r3, r6
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	e78a      	b.n	8002f22 <_vfiprintf_r+0xb2>
 800300c:	9801      	ldr	r0, [sp, #4]
 800300e:	9900      	ldr	r1, [sp, #0]
 8003010:	f000 fd76 	bl	8003b00 <__swsetup_r>
 8003014:	b9a8      	cbnz	r0, 8003042 <_vfiprintf_r+0x1d2>
 8003016:	9b00      	ldr	r3, [sp, #0]
 8003018:	899a      	ldrh	r2, [r3, #12]
 800301a:	f002 021a 	and.w	r2, r2, #26
 800301e:	2a0a      	cmp	r2, #10
 8003020:	f47f af4e 	bne.w	8002ec0 <_vfiprintf_r+0x50>
 8003024:	9b00      	ldr	r3, [sp, #0]
 8003026:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f6ff af48 	blt.w	8002ec0 <_vfiprintf_r+0x50>
 8003030:	9801      	ldr	r0, [sp, #4]
 8003032:	9900      	ldr	r1, [sp, #0]
 8003034:	465a      	mov	r2, fp
 8003036:	4623      	mov	r3, r4
 8003038:	f000 fd22 	bl	8003a80 <__sbprintf>
 800303c:	b02b      	add	sp, #172	; 0xac
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003042:	f04f 30ff 	mov.w	r0, #4294967295
 8003046:	b02b      	add	sp, #172	; 0xac
 8003048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	f000 ff10 	bl	8003e70 <__sinit>
 8003050:	e71b      	b.n	8002e8a <_vfiprintf_r+0x1a>
 8003052:	f018 0f20 	tst.w	r8, #32
 8003056:	9503      	str	r5, [sp, #12]
 8003058:	46b4      	mov	ip, r6
 800305a:	f000 810b 	beq.w	8003274 <_vfiprintf_r+0x404>
 800305e:	9b04      	ldr	r3, [sp, #16]
 8003060:	3307      	adds	r3, #7
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	f103 0208 	add.w	r2, r3, #8
 800306a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800306e:	9204      	str	r2, [sp, #16]
 8003070:	2301      	movs	r3, #1
 8003072:	2200      	movs	r2, #0
 8003074:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8003078:	46e1      	mov	r9, ip
 800307a:	4615      	mov	r5, r2
 800307c:	f1bc 0f00 	cmp.w	ip, #0
 8003080:	bfa8      	it	ge
 8003082:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8003086:	ea56 0207 	orrs.w	r2, r6, r7
 800308a:	f040 80c4 	bne.w	8003216 <_vfiprintf_r+0x3a6>
 800308e:	f1bc 0f00 	cmp.w	ip, #0
 8003092:	f000 837d 	beq.w	8003790 <_vfiprintf_r+0x920>
 8003096:	2b01      	cmp	r3, #1
 8003098:	f000 80c5 	beq.w	8003226 <_vfiprintf_r+0x3b6>
 800309c:	2b02      	cmp	r3, #2
 800309e:	f000 8383 	beq.w	80037a8 <_vfiprintf_r+0x938>
 80030a2:	4651      	mov	r1, sl
 80030a4:	08f2      	lsrs	r2, r6, #3
 80030a6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80030aa:	08f8      	lsrs	r0, r7, #3
 80030ac:	f006 0307 	and.w	r3, r6, #7
 80030b0:	4607      	mov	r7, r0
 80030b2:	4616      	mov	r6, r2
 80030b4:	3330      	adds	r3, #48	; 0x30
 80030b6:	ea56 0207 	orrs.w	r2, r6, r7
 80030ba:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80030be:	d1f1      	bne.n	80030a4 <_vfiprintf_r+0x234>
 80030c0:	f018 0f01 	tst.w	r8, #1
 80030c4:	9107      	str	r1, [sp, #28]
 80030c6:	f040 83f9 	bne.w	80038bc <_vfiprintf_r+0xa4c>
 80030ca:	ebc1 090a 	rsb	r9, r1, sl
 80030ce:	45e1      	cmp	r9, ip
 80030d0:	464e      	mov	r6, r9
 80030d2:	bfb8      	it	lt
 80030d4:	4666      	movlt	r6, ip
 80030d6:	b105      	cbz	r5, 80030da <_vfiprintf_r+0x26a>
 80030d8:	3601      	adds	r6, #1
 80030da:	f018 0302 	ands.w	r3, r8, #2
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	bf18      	it	ne
 80030e2:	3602      	addne	r6, #2
 80030e4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80030e8:	9306      	str	r3, [sp, #24]
 80030ea:	f040 81f6 	bne.w	80034da <_vfiprintf_r+0x66a>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	1b9d      	subs	r5, r3, r6
 80030f2:	2d00      	cmp	r5, #0
 80030f4:	f340 81f1 	ble.w	80034da <_vfiprintf_r+0x66a>
 80030f8:	2d10      	cmp	r5, #16
 80030fa:	f340 8489 	ble.w	8003a10 <_vfiprintf_r+0xba0>
 80030fe:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8003102:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003104:	4fc4      	ldr	r7, [pc, #784]	; (8003418 <_vfiprintf_r+0x5a8>)
 8003106:	4620      	mov	r0, r4
 8003108:	2310      	movs	r3, #16
 800310a:	4664      	mov	r4, ip
 800310c:	4671      	mov	r1, lr
 800310e:	4684      	mov	ip, r0
 8003110:	e007      	b.n	8003122 <_vfiprintf_r+0x2b2>
 8003112:	f101 0e02 	add.w	lr, r1, #2
 8003116:	f10c 0c08 	add.w	ip, ip, #8
 800311a:	4601      	mov	r1, r0
 800311c:	3d10      	subs	r5, #16
 800311e:	2d10      	cmp	r5, #16
 8003120:	dd13      	ble.n	800314a <_vfiprintf_r+0x2da>
 8003122:	1c48      	adds	r0, r1, #1
 8003124:	3210      	adds	r2, #16
 8003126:	2807      	cmp	r0, #7
 8003128:	920f      	str	r2, [sp, #60]	; 0x3c
 800312a:	f8cc 7000 	str.w	r7, [ip]
 800312e:	f8cc 3004 	str.w	r3, [ip, #4]
 8003132:	900e      	str	r0, [sp, #56]	; 0x38
 8003134:	dded      	ble.n	8003112 <_vfiprintf_r+0x2a2>
 8003136:	2a00      	cmp	r2, #0
 8003138:	f040 81bf 	bne.w	80034ba <_vfiprintf_r+0x64a>
 800313c:	3d10      	subs	r5, #16
 800313e:	2d10      	cmp	r5, #16
 8003140:	4611      	mov	r1, r2
 8003142:	f04f 0e01 	mov.w	lr, #1
 8003146:	46d4      	mov	ip, sl
 8003148:	dceb      	bgt.n	8003122 <_vfiprintf_r+0x2b2>
 800314a:	4663      	mov	r3, ip
 800314c:	4671      	mov	r1, lr
 800314e:	46a4      	mov	ip, r4
 8003150:	461c      	mov	r4, r3
 8003152:	442a      	add	r2, r5
 8003154:	2907      	cmp	r1, #7
 8003156:	920f      	str	r2, [sp, #60]	; 0x3c
 8003158:	6027      	str	r7, [r4, #0]
 800315a:	6065      	str	r5, [r4, #4]
 800315c:	910e      	str	r1, [sp, #56]	; 0x38
 800315e:	f300 8343 	bgt.w	80037e8 <_vfiprintf_r+0x978>
 8003162:	3408      	adds	r4, #8
 8003164:	1c48      	adds	r0, r1, #1
 8003166:	e1bb      	b.n	80034e0 <_vfiprintf_r+0x670>
 8003168:	4658      	mov	r0, fp
 800316a:	f048 0804 	orr.w	r8, r8, #4
 800316e:	f89b 3000 	ldrb.w	r3, [fp]
 8003172:	e6e4      	b.n	8002f3e <_vfiprintf_r+0xce>
 8003174:	f018 0320 	ands.w	r3, r8, #32
 8003178:	9503      	str	r5, [sp, #12]
 800317a:	46b4      	mov	ip, r6
 800317c:	d062      	beq.n	8003244 <_vfiprintf_r+0x3d4>
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	3307      	adds	r3, #7
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	f103 0208 	add.w	r2, r3, #8
 800318a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800318e:	9204      	str	r2, [sp, #16]
 8003190:	2300      	movs	r3, #0
 8003192:	e76e      	b.n	8003072 <_vfiprintf_r+0x202>
 8003194:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8003198:	f89b 3000 	ldrb.w	r3, [fp]
 800319c:	4658      	mov	r0, fp
 800319e:	e6ce      	b.n	8002f3e <_vfiprintf_r+0xce>
 80031a0:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80031a4:	f89b 3000 	ldrb.w	r3, [fp]
 80031a8:	4658      	mov	r0, fp
 80031aa:	e6c8      	b.n	8002f3e <_vfiprintf_r+0xce>
 80031ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80031b0:	2500      	movs	r5, #0
 80031b2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80031b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80031ba:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80031be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80031c2:	2a09      	cmp	r2, #9
 80031c4:	d9f5      	bls.n	80031b2 <_vfiprintf_r+0x342>
 80031c6:	e6bc      	b.n	8002f42 <_vfiprintf_r+0xd2>
 80031c8:	f048 0810 	orr.w	r8, r8, #16
 80031cc:	f018 0f20 	tst.w	r8, #32
 80031d0:	9503      	str	r5, [sp, #12]
 80031d2:	46b4      	mov	ip, r6
 80031d4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80031d8:	f000 809a 	beq.w	8003310 <_vfiprintf_r+0x4a0>
 80031dc:	9904      	ldr	r1, [sp, #16]
 80031de:	3107      	adds	r1, #7
 80031e0:	f021 0107 	bic.w	r1, r1, #7
 80031e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80031e8:	3108      	adds	r1, #8
 80031ea:	9104      	str	r1, [sp, #16]
 80031ec:	4616      	mov	r6, r2
 80031ee:	461f      	mov	r7, r3
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	f173 0300 	sbcs.w	r3, r3, #0
 80031f6:	f2c0 83a3 	blt.w	8003940 <_vfiprintf_r+0xad0>
 80031fa:	f1bc 0f00 	cmp.w	ip, #0
 80031fe:	bfa8      	it	ge
 8003200:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8003204:	ea56 0207 	orrs.w	r2, r6, r7
 8003208:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800320c:	46e1      	mov	r9, ip
 800320e:	f04f 0301 	mov.w	r3, #1
 8003212:	f43f af3c 	beq.w	800308e <_vfiprintf_r+0x21e>
 8003216:	2b01      	cmp	r3, #1
 8003218:	f47f af40 	bne.w	800309c <_vfiprintf_r+0x22c>
 800321c:	2f00      	cmp	r7, #0
 800321e:	bf08      	it	eq
 8003220:	2e0a      	cmpeq	r6, #10
 8003222:	f080 8331 	bcs.w	8003888 <_vfiprintf_r+0xa18>
 8003226:	ab2a      	add	r3, sp, #168	; 0xa8
 8003228:	3630      	adds	r6, #48	; 0x30
 800322a:	f803 6d41 	strb.w	r6, [r3, #-65]!
 800322e:	ebc3 090a 	rsb	r9, r3, sl
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	e74b      	b.n	80030ce <_vfiprintf_r+0x25e>
 8003236:	f048 0810 	orr.w	r8, r8, #16
 800323a:	f018 0320 	ands.w	r3, r8, #32
 800323e:	9503      	str	r5, [sp, #12]
 8003240:	46b4      	mov	ip, r6
 8003242:	d19c      	bne.n	800317e <_vfiprintf_r+0x30e>
 8003244:	f018 0210 	ands.w	r2, r8, #16
 8003248:	f040 82f4 	bne.w	8003834 <_vfiprintf_r+0x9c4>
 800324c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8003250:	f000 82f0 	beq.w	8003834 <_vfiprintf_r+0x9c4>
 8003254:	9904      	ldr	r1, [sp, #16]
 8003256:	4613      	mov	r3, r2
 8003258:	460a      	mov	r2, r1
 800325a:	3204      	adds	r2, #4
 800325c:	880e      	ldrh	r6, [r1, #0]
 800325e:	9204      	str	r2, [sp, #16]
 8003260:	2700      	movs	r7, #0
 8003262:	e706      	b.n	8003072 <_vfiprintf_r+0x202>
 8003264:	f048 0810 	orr.w	r8, r8, #16
 8003268:	f018 0f20 	tst.w	r8, #32
 800326c:	9503      	str	r5, [sp, #12]
 800326e:	46b4      	mov	ip, r6
 8003270:	f47f aef5 	bne.w	800305e <_vfiprintf_r+0x1ee>
 8003274:	9a04      	ldr	r2, [sp, #16]
 8003276:	f018 0f10 	tst.w	r8, #16
 800327a:	4613      	mov	r3, r2
 800327c:	f040 82e1 	bne.w	8003842 <_vfiprintf_r+0x9d2>
 8003280:	f018 0f40 	tst.w	r8, #64	; 0x40
 8003284:	f000 82dd 	beq.w	8003842 <_vfiprintf_r+0x9d2>
 8003288:	8816      	ldrh	r6, [r2, #0]
 800328a:	3204      	adds	r2, #4
 800328c:	2700      	movs	r7, #0
 800328e:	2301      	movs	r3, #1
 8003290:	9204      	str	r2, [sp, #16]
 8003292:	e6ee      	b.n	8003072 <_vfiprintf_r+0x202>
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <_vfiprintf_r+0x5ac>)
 8003296:	9503      	str	r5, [sp, #12]
 8003298:	f018 0f20 	tst.w	r8, #32
 800329c:	46b4      	mov	ip, r6
 800329e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80032a2:	9209      	str	r2, [sp, #36]	; 0x24
 80032a4:	f000 808e 	beq.w	80033c4 <_vfiprintf_r+0x554>
 80032a8:	9a04      	ldr	r2, [sp, #16]
 80032aa:	3207      	adds	r2, #7
 80032ac:	f022 0207 	bic.w	r2, r2, #7
 80032b0:	e9d2 6700 	ldrd	r6, r7, [r2]
 80032b4:	f102 0108 	add.w	r1, r2, #8
 80032b8:	9104      	str	r1, [sp, #16]
 80032ba:	f018 0f01 	tst.w	r8, #1
 80032be:	f000 828c 	beq.w	80037da <_vfiprintf_r+0x96a>
 80032c2:	ea56 0207 	orrs.w	r2, r6, r7
 80032c6:	f000 8288 	beq.w	80037da <_vfiprintf_r+0x96a>
 80032ca:	2230      	movs	r2, #48	; 0x30
 80032cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80032d0:	f048 0802 	orr.w	r8, r8, #2
 80032d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80032d8:	2302      	movs	r3, #2
 80032da:	e6ca      	b.n	8003072 <_vfiprintf_r+0x202>
 80032dc:	9a04      	ldr	r2, [sp, #16]
 80032de:	9503      	str	r5, [sp, #12]
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80032e6:	4613      	mov	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	2601      	movs	r6, #1
 80032ec:	2100      	movs	r1, #0
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	ab10      	add	r3, sp, #64	; 0x40
 80032f2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80032f6:	46b1      	mov	r9, r6
 80032f8:	9307      	str	r3, [sp, #28]
 80032fa:	f04f 0c00 	mov.w	ip, #0
 80032fe:	e6ec      	b.n	80030da <_vfiprintf_r+0x26a>
 8003300:	f018 0f20 	tst.w	r8, #32
 8003304:	9503      	str	r5, [sp, #12]
 8003306:	46b4      	mov	ip, r6
 8003308:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800330c:	f47f af66 	bne.w	80031dc <_vfiprintf_r+0x36c>
 8003310:	f018 0f10 	tst.w	r8, #16
 8003314:	f040 82a0 	bne.w	8003858 <_vfiprintf_r+0x9e8>
 8003318:	f018 0f40 	tst.w	r8, #64	; 0x40
 800331c:	f000 829c 	beq.w	8003858 <_vfiprintf_r+0x9e8>
 8003320:	9904      	ldr	r1, [sp, #16]
 8003322:	f9b1 6000 	ldrsh.w	r6, [r1]
 8003326:	3104      	adds	r1, #4
 8003328:	17f7      	asrs	r7, r6, #31
 800332a:	4632      	mov	r2, r6
 800332c:	463b      	mov	r3, r7
 800332e:	9104      	str	r1, [sp, #16]
 8003330:	e75e      	b.n	80031f0 <_vfiprintf_r+0x380>
 8003332:	9904      	ldr	r1, [sp, #16]
 8003334:	9503      	str	r5, [sp, #12]
 8003336:	2330      	movs	r3, #48	; 0x30
 8003338:	460a      	mov	r2, r1
 800333a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800333e:	2378      	movs	r3, #120	; 0x78
 8003340:	3204      	adds	r2, #4
 8003342:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8003346:	4b36      	ldr	r3, [pc, #216]	; (8003420 <_vfiprintf_r+0x5b0>)
 8003348:	9309      	str	r3, [sp, #36]	; 0x24
 800334a:	46b4      	mov	ip, r6
 800334c:	f048 0802 	orr.w	r8, r8, #2
 8003350:	680e      	ldr	r6, [r1, #0]
 8003352:	9204      	str	r2, [sp, #16]
 8003354:	2700      	movs	r7, #0
 8003356:	2302      	movs	r3, #2
 8003358:	e68b      	b.n	8003072 <_vfiprintf_r+0x202>
 800335a:	f048 0820 	orr.w	r8, r8, #32
 800335e:	f89b 3000 	ldrb.w	r3, [fp]
 8003362:	4658      	mov	r0, fp
 8003364:	e5eb      	b.n	8002f3e <_vfiprintf_r+0xce>
 8003366:	9a04      	ldr	r2, [sp, #16]
 8003368:	9503      	str	r5, [sp, #12]
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	9307      	str	r3, [sp, #28]
 800336e:	2100      	movs	r1, #0
 8003370:	46b4      	mov	ip, r6
 8003372:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8003376:	1d16      	adds	r6, r2, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 834f 	beq.w	8003a1c <_vfiprintf_r+0xbac>
 800337e:	f1bc 0f00 	cmp.w	ip, #0
 8003382:	f2c0 8329 	blt.w	80039d8 <_vfiprintf_r+0xb68>
 8003386:	9d07      	ldr	r5, [sp, #28]
 8003388:	f8cd c010 	str.w	ip, [sp, #16]
 800338c:	4662      	mov	r2, ip
 800338e:	4628      	mov	r0, r5
 8003390:	2100      	movs	r1, #0
 8003392:	f001 fbe5 	bl	8004b60 <memchr>
 8003396:	f8dd c010 	ldr.w	ip, [sp, #16]
 800339a:	2800      	cmp	r0, #0
 800339c:	f000 834f 	beq.w	8003a3e <_vfiprintf_r+0xbce>
 80033a0:	ebc5 0900 	rsb	r9, r5, r0
 80033a4:	9604      	str	r6, [sp, #16]
 80033a6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80033aa:	f04f 0c00 	mov.w	ip, #0
 80033ae:	e68e      	b.n	80030ce <_vfiprintf_r+0x25e>
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <_vfiprintf_r+0x5b0>)
 80033b2:	9503      	str	r5, [sp, #12]
 80033b4:	f018 0f20 	tst.w	r8, #32
 80033b8:	46b4      	mov	ip, r6
 80033ba:	9209      	str	r2, [sp, #36]	; 0x24
 80033bc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80033c0:	f47f af72 	bne.w	80032a8 <_vfiprintf_r+0x438>
 80033c4:	9904      	ldr	r1, [sp, #16]
 80033c6:	f018 0f10 	tst.w	r8, #16
 80033ca:	460a      	mov	r2, r1
 80033cc:	f040 823f 	bne.w	800384e <_vfiprintf_r+0x9de>
 80033d0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80033d4:	f000 823b 	beq.w	800384e <_vfiprintf_r+0x9de>
 80033d8:	3204      	adds	r2, #4
 80033da:	880e      	ldrh	r6, [r1, #0]
 80033dc:	9204      	str	r2, [sp, #16]
 80033de:	2700      	movs	r7, #0
 80033e0:	e76b      	b.n	80032ba <_vfiprintf_r+0x44a>
 80033e2:	f89b 3000 	ldrb.w	r3, [fp]
 80033e6:	2b6c      	cmp	r3, #108	; 0x6c
 80033e8:	f000 82e9 	beq.w	80039be <_vfiprintf_r+0xb4e>
 80033ec:	f048 0810 	orr.w	r8, r8, #16
 80033f0:	4658      	mov	r0, fp
 80033f2:	e5a4      	b.n	8002f3e <_vfiprintf_r+0xce>
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	6815      	ldr	r5, [r2, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	2d00      	cmp	r5, #0
 80033fc:	f103 0304 	add.w	r3, r3, #4
 8003400:	f2c0 82e5 	blt.w	80039ce <_vfiprintf_r+0xb5e>
 8003404:	9304      	str	r3, [sp, #16]
 8003406:	f89b 3000 	ldrb.w	r3, [fp]
 800340a:	4658      	mov	r0, fp
 800340c:	e597      	b.n	8002f3e <_vfiprintf_r+0xce>
 800340e:	f89b 3000 	ldrb.w	r3, [fp]
 8003412:	4658      	mov	r0, fp
 8003414:	212b      	movs	r1, #43	; 0x2b
 8003416:	e592      	b.n	8002f3e <_vfiprintf_r+0xce>
 8003418:	08005c70 	.word	0x08005c70
 800341c:	08005c80 	.word	0x08005c80
 8003420:	08005c94 	.word	0x08005c94
 8003424:	f89b 3000 	ldrb.w	r3, [fp]
 8003428:	2b2a      	cmp	r3, #42	; 0x2a
 800342a:	f10b 0001 	add.w	r0, fp, #1
 800342e:	f000 830f 	beq.w	8003a50 <_vfiprintf_r+0xbe0>
 8003432:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003436:	2a09      	cmp	r2, #9
 8003438:	4683      	mov	fp, r0
 800343a:	f04f 0600 	mov.w	r6, #0
 800343e:	f63f ad80 	bhi.w	8002f42 <_vfiprintf_r+0xd2>
 8003442:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8003446:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800344a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 800344e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003452:	2a09      	cmp	r2, #9
 8003454:	d9f5      	bls.n	8003442 <_vfiprintf_r+0x5d2>
 8003456:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800345a:	e572      	b.n	8002f42 <_vfiprintf_r+0xd2>
 800345c:	f018 0f20 	tst.w	r8, #32
 8003460:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8003464:	f000 8283 	beq.w	800396e <_vfiprintf_r+0xafe>
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	9902      	ldr	r1, [sp, #8]
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	17cf      	asrs	r7, r1, #31
 8003470:	4608      	mov	r0, r1
 8003472:	3204      	adds	r2, #4
 8003474:	4639      	mov	r1, r7
 8003476:	9204      	str	r2, [sp, #16]
 8003478:	e9c3 0100 	strd	r0, r1, [r3]
 800347c:	e52a      	b.n	8002ed4 <_vfiprintf_r+0x64>
 800347e:	4658      	mov	r0, fp
 8003480:	f89b 3000 	ldrb.w	r3, [fp]
 8003484:	2900      	cmp	r1, #0
 8003486:	f47f ad5a 	bne.w	8002f3e <_vfiprintf_r+0xce>
 800348a:	2120      	movs	r1, #32
 800348c:	e557      	b.n	8002f3e <_vfiprintf_r+0xce>
 800348e:	f048 0801 	orr.w	r8, r8, #1
 8003492:	4658      	mov	r0, fp
 8003494:	f89b 3000 	ldrb.w	r3, [fp]
 8003498:	e551      	b.n	8002f3e <_vfiprintf_r+0xce>
 800349a:	9503      	str	r5, [sp, #12]
 800349c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 809b 	beq.w	80035dc <_vfiprintf_r+0x76c>
 80034a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80034aa:	2300      	movs	r3, #0
 80034ac:	2601      	movs	r6, #1
 80034ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80034b2:	ab10      	add	r3, sp, #64	; 0x40
 80034b4:	46b1      	mov	r9, r6
 80034b6:	9307      	str	r3, [sp, #28]
 80034b8:	e71f      	b.n	80032fa <_vfiprintf_r+0x48a>
 80034ba:	9801      	ldr	r0, [sp, #4]
 80034bc:	9900      	ldr	r1, [sp, #0]
 80034be:	9308      	str	r3, [sp, #32]
 80034c0:	aa0d      	add	r2, sp, #52	; 0x34
 80034c2:	f7ff fc95 	bl	8002df0 <__sprint_r.part.0>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f040 808f 	bne.w	80035ea <_vfiprintf_r+0x77a>
 80034cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034d0:	9b08      	ldr	r3, [sp, #32]
 80034d2:	f101 0e01 	add.w	lr, r1, #1
 80034d6:	46d4      	mov	ip, sl
 80034d8:	e620      	b.n	800311c <_vfiprintf_r+0x2ac>
 80034da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034de:	1c48      	adds	r0, r1, #1
 80034e0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80034e4:	b16b      	cbz	r3, 8003502 <_vfiprintf_r+0x692>
 80034e6:	3201      	adds	r2, #1
 80034e8:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80034ec:	2101      	movs	r1, #1
 80034ee:	2807      	cmp	r0, #7
 80034f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80034f2:	900e      	str	r0, [sp, #56]	; 0x38
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	6061      	str	r1, [r4, #4]
 80034f8:	f300 8134 	bgt.w	8003764 <_vfiprintf_r+0x8f4>
 80034fc:	4601      	mov	r1, r0
 80034fe:	3408      	adds	r4, #8
 8003500:	3001      	adds	r0, #1
 8003502:	9b05      	ldr	r3, [sp, #20]
 8003504:	b163      	cbz	r3, 8003520 <_vfiprintf_r+0x6b0>
 8003506:	3202      	adds	r2, #2
 8003508:	a90c      	add	r1, sp, #48	; 0x30
 800350a:	2302      	movs	r3, #2
 800350c:	2807      	cmp	r0, #7
 800350e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003510:	900e      	str	r0, [sp, #56]	; 0x38
 8003512:	e884 000a 	stmia.w	r4, {r1, r3}
 8003516:	f300 8134 	bgt.w	8003782 <_vfiprintf_r+0x912>
 800351a:	4601      	mov	r1, r0
 800351c:	3408      	adds	r4, #8
 800351e:	3001      	adds	r0, #1
 8003520:	9b06      	ldr	r3, [sp, #24]
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	f000 80d4 	beq.w	80036d0 <_vfiprintf_r+0x860>
 8003528:	ebc9 070c 	rsb	r7, r9, ip
 800352c:	2f00      	cmp	r7, #0
 800352e:	dd2b      	ble.n	8003588 <_vfiprintf_r+0x718>
 8003530:	2f10      	cmp	r7, #16
 8003532:	4dab      	ldr	r5, [pc, #684]	; (80037e0 <_vfiprintf_r+0x970>)
 8003534:	dd1f      	ble.n	8003576 <_vfiprintf_r+0x706>
 8003536:	46a6      	mov	lr, r4
 8003538:	2310      	movs	r3, #16
 800353a:	9c01      	ldr	r4, [sp, #4]
 800353c:	e007      	b.n	800354e <_vfiprintf_r+0x6de>
 800353e:	f101 0c02 	add.w	ip, r1, #2
 8003542:	f10e 0e08 	add.w	lr, lr, #8
 8003546:	4601      	mov	r1, r0
 8003548:	3f10      	subs	r7, #16
 800354a:	2f10      	cmp	r7, #16
 800354c:	dd11      	ble.n	8003572 <_vfiprintf_r+0x702>
 800354e:	1c48      	adds	r0, r1, #1
 8003550:	3210      	adds	r2, #16
 8003552:	2807      	cmp	r0, #7
 8003554:	920f      	str	r2, [sp, #60]	; 0x3c
 8003556:	f8ce 5000 	str.w	r5, [lr]
 800355a:	f8ce 3004 	str.w	r3, [lr, #4]
 800355e:	900e      	str	r0, [sp, #56]	; 0x38
 8003560:	dded      	ble.n	800353e <_vfiprintf_r+0x6ce>
 8003562:	bb6a      	cbnz	r2, 80035c0 <_vfiprintf_r+0x750>
 8003564:	3f10      	subs	r7, #16
 8003566:	2f10      	cmp	r7, #16
 8003568:	f04f 0c01 	mov.w	ip, #1
 800356c:	4611      	mov	r1, r2
 800356e:	46d6      	mov	lr, sl
 8003570:	dced      	bgt.n	800354e <_vfiprintf_r+0x6de>
 8003572:	4674      	mov	r4, lr
 8003574:	4660      	mov	r0, ip
 8003576:	443a      	add	r2, r7
 8003578:	2807      	cmp	r0, #7
 800357a:	920f      	str	r2, [sp, #60]	; 0x3c
 800357c:	e884 00a0 	stmia.w	r4, {r5, r7}
 8003580:	900e      	str	r0, [sp, #56]	; 0x38
 8003582:	dc3b      	bgt.n	80035fc <_vfiprintf_r+0x78c>
 8003584:	3408      	adds	r4, #8
 8003586:	3001      	adds	r0, #1
 8003588:	eb02 0309 	add.w	r3, r2, r9
 800358c:	9a07      	ldr	r2, [sp, #28]
 800358e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003590:	2807      	cmp	r0, #7
 8003592:	e884 0204 	stmia.w	r4, {r2, r9}
 8003596:	900e      	str	r0, [sp, #56]	; 0x38
 8003598:	dd3d      	ble.n	8003616 <_vfiprintf_r+0x7a6>
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 813f 	bne.w	800381e <_vfiprintf_r+0x9ae>
 80035a0:	f018 0f04 	tst.w	r8, #4
 80035a4:	930e      	str	r3, [sp, #56]	; 0x38
 80035a6:	f040 8130 	bne.w	800380a <_vfiprintf_r+0x99a>
 80035aa:	9b02      	ldr	r3, [sp, #8]
 80035ac:	9a03      	ldr	r2, [sp, #12]
 80035ae:	4296      	cmp	r6, r2
 80035b0:	bfac      	ite	ge
 80035b2:	199b      	addge	r3, r3, r6
 80035b4:	189b      	addlt	r3, r3, r2
 80035b6:	9302      	str	r3, [sp, #8]
 80035b8:	2300      	movs	r3, #0
 80035ba:	930e      	str	r3, [sp, #56]	; 0x38
 80035bc:	4654      	mov	r4, sl
 80035be:	e489      	b.n	8002ed4 <_vfiprintf_r+0x64>
 80035c0:	4620      	mov	r0, r4
 80035c2:	9900      	ldr	r1, [sp, #0]
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	aa0d      	add	r2, sp, #52	; 0x34
 80035c8:	f7ff fc12 	bl	8002df0 <__sprint_r.part.0>
 80035cc:	b968      	cbnz	r0, 80035ea <_vfiprintf_r+0x77a>
 80035ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80035d2:	9b05      	ldr	r3, [sp, #20]
 80035d4:	f101 0c01 	add.w	ip, r1, #1
 80035d8:	46d6      	mov	lr, sl
 80035da:	e7b5      	b.n	8003548 <_vfiprintf_r+0x6d8>
 80035dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035de:	b123      	cbz	r3, 80035ea <_vfiprintf_r+0x77a>
 80035e0:	9801      	ldr	r0, [sp, #4]
 80035e2:	9900      	ldr	r1, [sp, #0]
 80035e4:	aa0d      	add	r2, sp, #52	; 0x34
 80035e6:	f7ff fc03 	bl	8002df0 <__sprint_r.part.0>
 80035ea:	9b00      	ldr	r3, [sp, #0]
 80035ec:	899b      	ldrh	r3, [r3, #12]
 80035ee:	065b      	lsls	r3, r3, #25
 80035f0:	f53f ad27 	bmi.w	8003042 <_vfiprintf_r+0x1d2>
 80035f4:	9802      	ldr	r0, [sp, #8]
 80035f6:	b02b      	add	sp, #172	; 0xac
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	f040 8192 	bne.w	8003926 <_vfiprintf_r+0xab6>
 8003602:	2201      	movs	r2, #1
 8003604:	9907      	ldr	r1, [sp, #28]
 8003606:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800360a:	464b      	mov	r3, r9
 800360c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8003610:	911a      	str	r1, [sp, #104]	; 0x68
 8003612:	920e      	str	r2, [sp, #56]	; 0x38
 8003614:	4654      	mov	r4, sl
 8003616:	f104 0208 	add.w	r2, r4, #8
 800361a:	f018 0f04 	tst.w	r8, #4
 800361e:	d039      	beq.n	8003694 <_vfiprintf_r+0x824>
 8003620:	9903      	ldr	r1, [sp, #12]
 8003622:	1b8d      	subs	r5, r1, r6
 8003624:	2d00      	cmp	r5, #0
 8003626:	dd35      	ble.n	8003694 <_vfiprintf_r+0x824>
 8003628:	2d10      	cmp	r5, #16
 800362a:	f340 8203 	ble.w	8003a34 <_vfiprintf_r+0xbc4>
 800362e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003630:	4f6c      	ldr	r7, [pc, #432]	; (80037e4 <_vfiprintf_r+0x974>)
 8003632:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003636:	f8dd 9000 	ldr.w	r9, [sp]
 800363a:	2410      	movs	r4, #16
 800363c:	e006      	b.n	800364c <_vfiprintf_r+0x7dc>
 800363e:	f100 0e02 	add.w	lr, r0, #2
 8003642:	3208      	adds	r2, #8
 8003644:	4608      	mov	r0, r1
 8003646:	3d10      	subs	r5, #16
 8003648:	2d10      	cmp	r5, #16
 800364a:	dd10      	ble.n	800366e <_vfiprintf_r+0x7fe>
 800364c:	1c41      	adds	r1, r0, #1
 800364e:	3310      	adds	r3, #16
 8003650:	2907      	cmp	r1, #7
 8003652:	930f      	str	r3, [sp, #60]	; 0x3c
 8003654:	6017      	str	r7, [r2, #0]
 8003656:	6054      	str	r4, [r2, #4]
 8003658:	910e      	str	r1, [sp, #56]	; 0x38
 800365a:	ddf0      	ble.n	800363e <_vfiprintf_r+0x7ce>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d12a      	bne.n	80036b6 <_vfiprintf_r+0x846>
 8003660:	3d10      	subs	r5, #16
 8003662:	2d10      	cmp	r5, #16
 8003664:	f04f 0e01 	mov.w	lr, #1
 8003668:	4618      	mov	r0, r3
 800366a:	4652      	mov	r2, sl
 800366c:	dcee      	bgt.n	800364c <_vfiprintf_r+0x7dc>
 800366e:	442b      	add	r3, r5
 8003670:	f1be 0f07 	cmp.w	lr, #7
 8003674:	930f      	str	r3, [sp, #60]	; 0x3c
 8003676:	6017      	str	r7, [r2, #0]
 8003678:	6055      	str	r5, [r2, #4]
 800367a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800367e:	dd09      	ble.n	8003694 <_vfiprintf_r+0x824>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d092      	beq.n	80035aa <_vfiprintf_r+0x73a>
 8003684:	9801      	ldr	r0, [sp, #4]
 8003686:	9900      	ldr	r1, [sp, #0]
 8003688:	aa0d      	add	r2, sp, #52	; 0x34
 800368a:	f7ff fbb1 	bl	8002df0 <__sprint_r.part.0>
 800368e:	2800      	cmp	r0, #0
 8003690:	d1ab      	bne.n	80035ea <_vfiprintf_r+0x77a>
 8003692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003694:	9a02      	ldr	r2, [sp, #8]
 8003696:	9903      	ldr	r1, [sp, #12]
 8003698:	428e      	cmp	r6, r1
 800369a:	bfac      	ite	ge
 800369c:	1992      	addge	r2, r2, r6
 800369e:	1852      	addlt	r2, r2, r1
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d088      	beq.n	80035b8 <_vfiprintf_r+0x748>
 80036a6:	9801      	ldr	r0, [sp, #4]
 80036a8:	9900      	ldr	r1, [sp, #0]
 80036aa:	aa0d      	add	r2, sp, #52	; 0x34
 80036ac:	f7ff fba0 	bl	8002df0 <__sprint_r.part.0>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d081      	beq.n	80035b8 <_vfiprintf_r+0x748>
 80036b4:	e799      	b.n	80035ea <_vfiprintf_r+0x77a>
 80036b6:	4640      	mov	r0, r8
 80036b8:	4649      	mov	r1, r9
 80036ba:	aa0d      	add	r2, sp, #52	; 0x34
 80036bc:	f7ff fb98 	bl	8002df0 <__sprint_r.part.0>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d192      	bne.n	80035ea <_vfiprintf_r+0x77a>
 80036c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80036c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036c8:	f100 0e01 	add.w	lr, r0, #1
 80036cc:	4652      	mov	r2, sl
 80036ce:	e7ba      	b.n	8003646 <_vfiprintf_r+0x7d6>
 80036d0:	9b03      	ldr	r3, [sp, #12]
 80036d2:	1b9f      	subs	r7, r3, r6
 80036d4:	2f00      	cmp	r7, #0
 80036d6:	f77f af27 	ble.w	8003528 <_vfiprintf_r+0x6b8>
 80036da:	2f10      	cmp	r7, #16
 80036dc:	4d40      	ldr	r5, [pc, #256]	; (80037e0 <_vfiprintf_r+0x970>)
 80036de:	f340 81b5 	ble.w	8003a4c <_vfiprintf_r+0xbdc>
 80036e2:	4620      	mov	r0, r4
 80036e4:	2310      	movs	r3, #16
 80036e6:	4664      	mov	r4, ip
 80036e8:	4684      	mov	ip, r0
 80036ea:	e007      	b.n	80036fc <_vfiprintf_r+0x88c>
 80036ec:	f101 0e02 	add.w	lr, r1, #2
 80036f0:	f10c 0c08 	add.w	ip, ip, #8
 80036f4:	4601      	mov	r1, r0
 80036f6:	3f10      	subs	r7, #16
 80036f8:	2f10      	cmp	r7, #16
 80036fa:	dd11      	ble.n	8003720 <_vfiprintf_r+0x8b0>
 80036fc:	1c48      	adds	r0, r1, #1
 80036fe:	3210      	adds	r2, #16
 8003700:	2807      	cmp	r0, #7
 8003702:	920f      	str	r2, [sp, #60]	; 0x3c
 8003704:	f8cc 5000 	str.w	r5, [ip]
 8003708:	f8cc 3004 	str.w	r3, [ip, #4]
 800370c:	900e      	str	r0, [sp, #56]	; 0x38
 800370e:	dded      	ble.n	80036ec <_vfiprintf_r+0x87c>
 8003710:	b9c2      	cbnz	r2, 8003744 <_vfiprintf_r+0x8d4>
 8003712:	3f10      	subs	r7, #16
 8003714:	2f10      	cmp	r7, #16
 8003716:	f04f 0e01 	mov.w	lr, #1
 800371a:	4611      	mov	r1, r2
 800371c:	46d4      	mov	ip, sl
 800371e:	dced      	bgt.n	80036fc <_vfiprintf_r+0x88c>
 8003720:	4663      	mov	r3, ip
 8003722:	46a4      	mov	ip, r4
 8003724:	461c      	mov	r4, r3
 8003726:	443a      	add	r2, r7
 8003728:	f1be 0f07 	cmp.w	lr, #7
 800372c:	920f      	str	r2, [sp, #60]	; 0x3c
 800372e:	e884 00a0 	stmia.w	r4, {r5, r7}
 8003732:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8003736:	f300 80f0 	bgt.w	800391a <_vfiprintf_r+0xaaa>
 800373a:	3408      	adds	r4, #8
 800373c:	f10e 0001 	add.w	r0, lr, #1
 8003740:	4671      	mov	r1, lr
 8003742:	e6f1      	b.n	8003528 <_vfiprintf_r+0x6b8>
 8003744:	9801      	ldr	r0, [sp, #4]
 8003746:	9900      	ldr	r1, [sp, #0]
 8003748:	9305      	str	r3, [sp, #20]
 800374a:	aa0d      	add	r2, sp, #52	; 0x34
 800374c:	f7ff fb50 	bl	8002df0 <__sprint_r.part.0>
 8003750:	2800      	cmp	r0, #0
 8003752:	f47f af4a 	bne.w	80035ea <_vfiprintf_r+0x77a>
 8003756:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800375a:	9b05      	ldr	r3, [sp, #20]
 800375c:	f101 0e01 	add.w	lr, r1, #1
 8003760:	46d4      	mov	ip, sl
 8003762:	e7c8      	b.n	80036f6 <_vfiprintf_r+0x886>
 8003764:	2a00      	cmp	r2, #0
 8003766:	f040 80c7 	bne.w	80038f8 <_vfiprintf_r+0xa88>
 800376a:	9b05      	ldr	r3, [sp, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8087 	beq.w	8003880 <_vfiprintf_r+0xa10>
 8003772:	aa0c      	add	r2, sp, #48	; 0x30
 8003774:	2302      	movs	r3, #2
 8003776:	921a      	str	r2, [sp, #104]	; 0x68
 8003778:	4608      	mov	r0, r1
 800377a:	931b      	str	r3, [sp, #108]	; 0x6c
 800377c:	461a      	mov	r2, r3
 800377e:	4654      	mov	r4, sl
 8003780:	e6cb      	b.n	800351a <_vfiprintf_r+0x6aa>
 8003782:	2a00      	cmp	r2, #0
 8003784:	f040 80a7 	bne.w	80038d6 <_vfiprintf_r+0xa66>
 8003788:	2001      	movs	r0, #1
 800378a:	4611      	mov	r1, r2
 800378c:	4654      	mov	r4, sl
 800378e:	e6c7      	b.n	8003520 <_vfiprintf_r+0x6b0>
 8003790:	bb03      	cbnz	r3, 80037d4 <_vfiprintf_r+0x964>
 8003792:	f018 0f01 	tst.w	r8, #1
 8003796:	d01d      	beq.n	80037d4 <_vfiprintf_r+0x964>
 8003798:	ab2a      	add	r3, sp, #168	; 0xa8
 800379a:	2230      	movs	r2, #48	; 0x30
 800379c:	f803 2d41 	strb.w	r2, [r3, #-65]!
 80037a0:	ebc3 090a 	rsb	r9, r3, sl
 80037a4:	9307      	str	r3, [sp, #28]
 80037a6:	e492      	b.n	80030ce <_vfiprintf_r+0x25e>
 80037a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037aa:	46d1      	mov	r9, sl
 80037ac:	0933      	lsrs	r3, r6, #4
 80037ae:	f006 010f 	and.w	r1, r6, #15
 80037b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80037b6:	093a      	lsrs	r2, r7, #4
 80037b8:	461e      	mov	r6, r3
 80037ba:	4617      	mov	r7, r2
 80037bc:	5c43      	ldrb	r3, [r0, r1]
 80037be:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80037c2:	ea56 0307 	orrs.w	r3, r6, r7
 80037c6:	d1f1      	bne.n	80037ac <_vfiprintf_r+0x93c>
 80037c8:	464b      	mov	r3, r9
 80037ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80037ce:	ebc3 090a 	rsb	r9, r3, sl
 80037d2:	e47c      	b.n	80030ce <_vfiprintf_r+0x25e>
 80037d4:	f8cd a01c 	str.w	sl, [sp, #28]
 80037d8:	e479      	b.n	80030ce <_vfiprintf_r+0x25e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e449      	b.n	8003072 <_vfiprintf_r+0x202>
 80037de:	bf00      	nop
 80037e0:	08005c60 	.word	0x08005c60
 80037e4:	08005c70 	.word	0x08005c70
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	f040 80d7 	bne.w	800399c <_vfiprintf_r+0xb2c>
 80037ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80ae 	beq.w	8003954 <_vfiprintf_r+0xae4>
 80037f8:	2301      	movs	r3, #1
 80037fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80037fe:	4618      	mov	r0, r3
 8003800:	931b      	str	r3, [sp, #108]	; 0x6c
 8003802:	461a      	mov	r2, r3
 8003804:	911a      	str	r1, [sp, #104]	; 0x68
 8003806:	4654      	mov	r4, sl
 8003808:	e678      	b.n	80034fc <_vfiprintf_r+0x68c>
 800380a:	9a03      	ldr	r2, [sp, #12]
 800380c:	1b95      	subs	r5, r2, r6
 800380e:	2d00      	cmp	r5, #0
 8003810:	4652      	mov	r2, sl
 8003812:	f73f af09 	bgt.w	8003628 <_vfiprintf_r+0x7b8>
 8003816:	e6c8      	b.n	80035aa <_vfiprintf_r+0x73a>
 8003818:	465d      	mov	r5, fp
 800381a:	f7ff bb82 	b.w	8002f22 <_vfiprintf_r+0xb2>
 800381e:	9801      	ldr	r0, [sp, #4]
 8003820:	9900      	ldr	r1, [sp, #0]
 8003822:	aa0d      	add	r2, sp, #52	; 0x34
 8003824:	f7ff fae4 	bl	8002df0 <__sprint_r.part.0>
 8003828:	2800      	cmp	r0, #0
 800382a:	f47f aede 	bne.w	80035ea <_vfiprintf_r+0x77a>
 800382e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003830:	4652      	mov	r2, sl
 8003832:	e6f2      	b.n	800361a <_vfiprintf_r+0x7aa>
 8003834:	9904      	ldr	r1, [sp, #16]
 8003836:	460a      	mov	r2, r1
 8003838:	3204      	adds	r2, #4
 800383a:	680e      	ldr	r6, [r1, #0]
 800383c:	9204      	str	r2, [sp, #16]
 800383e:	2700      	movs	r7, #0
 8003840:	e417      	b.n	8003072 <_vfiprintf_r+0x202>
 8003842:	3204      	adds	r2, #4
 8003844:	681e      	ldr	r6, [r3, #0]
 8003846:	9204      	str	r2, [sp, #16]
 8003848:	2301      	movs	r3, #1
 800384a:	2700      	movs	r7, #0
 800384c:	e411      	b.n	8003072 <_vfiprintf_r+0x202>
 800384e:	6816      	ldr	r6, [r2, #0]
 8003850:	3204      	adds	r2, #4
 8003852:	9204      	str	r2, [sp, #16]
 8003854:	2700      	movs	r7, #0
 8003856:	e530      	b.n	80032ba <_vfiprintf_r+0x44a>
 8003858:	9a04      	ldr	r2, [sp, #16]
 800385a:	6816      	ldr	r6, [r2, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	17f7      	asrs	r7, r6, #31
 8003862:	9304      	str	r3, [sp, #16]
 8003864:	4632      	mov	r2, r6
 8003866:	463b      	mov	r3, r7
 8003868:	e4c2      	b.n	80031f0 <_vfiprintf_r+0x380>
 800386a:	9801      	ldr	r0, [sp, #4]
 800386c:	9900      	ldr	r1, [sp, #0]
 800386e:	aa0d      	add	r2, sp, #52	; 0x34
 8003870:	f7ff fabe 	bl	8002df0 <__sprint_r.part.0>
 8003874:	2800      	cmp	r0, #0
 8003876:	f47f aeb8 	bne.w	80035ea <_vfiprintf_r+0x77a>
 800387a:	4654      	mov	r4, sl
 800387c:	f7ff bbc2 	b.w	8003004 <_vfiprintf_r+0x194>
 8003880:	4608      	mov	r0, r1
 8003882:	4654      	mov	r4, sl
 8003884:	4611      	mov	r1, r2
 8003886:	e64b      	b.n	8003520 <_vfiprintf_r+0x6b0>
 8003888:	46d1      	mov	r9, sl
 800388a:	f8cd c014 	str.w	ip, [sp, #20]
 800388e:	4630      	mov	r0, r6
 8003890:	4639      	mov	r1, r7
 8003892:	220a      	movs	r2, #10
 8003894:	2300      	movs	r3, #0
 8003896:	f7fc ff63 	bl	8000760 <__aeabi_uldivmod>
 800389a:	3230      	adds	r2, #48	; 0x30
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80038a4:	2300      	movs	r3, #0
 80038a6:	220a      	movs	r2, #10
 80038a8:	f7fc ff5a 	bl	8000760 <__aeabi_uldivmod>
 80038ac:	4606      	mov	r6, r0
 80038ae:	460f      	mov	r7, r1
 80038b0:	ea56 0307 	orrs.w	r3, r6, r7
 80038b4:	d1eb      	bne.n	800388e <_vfiprintf_r+0xa1e>
 80038b6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80038ba:	e785      	b.n	80037c8 <_vfiprintf_r+0x958>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	9b07      	ldr	r3, [sp, #28]
 80038c0:	d085      	beq.n	80037ce <_vfiprintf_r+0x95e>
 80038c2:	3b01      	subs	r3, #1
 80038c4:	461a      	mov	r2, r3
 80038c6:	9307      	str	r3, [sp, #28]
 80038c8:	2330      	movs	r3, #48	; 0x30
 80038ca:	ebc2 090a 	rsb	r9, r2, sl
 80038ce:	f801 3c01 	strb.w	r3, [r1, #-1]
 80038d2:	f7ff bbfc 	b.w	80030ce <_vfiprintf_r+0x25e>
 80038d6:	9801      	ldr	r0, [sp, #4]
 80038d8:	9900      	ldr	r1, [sp, #0]
 80038da:	f8cd c014 	str.w	ip, [sp, #20]
 80038de:	aa0d      	add	r2, sp, #52	; 0x34
 80038e0:	f7ff fa86 	bl	8002df0 <__sprint_r.part.0>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	f47f ae80 	bne.w	80035ea <_vfiprintf_r+0x77a>
 80038ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80038ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038ee:	f8dd c014 	ldr.w	ip, [sp, #20]
 80038f2:	1c48      	adds	r0, r1, #1
 80038f4:	4654      	mov	r4, sl
 80038f6:	e613      	b.n	8003520 <_vfiprintf_r+0x6b0>
 80038f8:	9801      	ldr	r0, [sp, #4]
 80038fa:	9900      	ldr	r1, [sp, #0]
 80038fc:	f8cd c020 	str.w	ip, [sp, #32]
 8003900:	aa0d      	add	r2, sp, #52	; 0x34
 8003902:	f7ff fa75 	bl	8002df0 <__sprint_r.part.0>
 8003906:	2800      	cmp	r0, #0
 8003908:	f47f ae6f 	bne.w	80035ea <_vfiprintf_r+0x77a>
 800390c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800390e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003910:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003914:	1c48      	adds	r0, r1, #1
 8003916:	4654      	mov	r4, sl
 8003918:	e5f3      	b.n	8003502 <_vfiprintf_r+0x692>
 800391a:	2a00      	cmp	r2, #0
 800391c:	d167      	bne.n	80039ee <_vfiprintf_r+0xb7e>
 800391e:	2001      	movs	r0, #1
 8003920:	4611      	mov	r1, r2
 8003922:	4654      	mov	r4, sl
 8003924:	e600      	b.n	8003528 <_vfiprintf_r+0x6b8>
 8003926:	9801      	ldr	r0, [sp, #4]
 8003928:	9900      	ldr	r1, [sp, #0]
 800392a:	aa0d      	add	r2, sp, #52	; 0x34
 800392c:	f7ff fa60 	bl	8002df0 <__sprint_r.part.0>
 8003930:	2800      	cmp	r0, #0
 8003932:	f47f ae5a 	bne.w	80035ea <_vfiprintf_r+0x77a>
 8003936:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800393a:	3001      	adds	r0, #1
 800393c:	4654      	mov	r4, sl
 800393e:	e623      	b.n	8003588 <_vfiprintf_r+0x718>
 8003940:	252d      	movs	r5, #45	; 0x2d
 8003942:	4276      	negs	r6, r6
 8003944:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003948:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 800394c:	46e1      	mov	r9, ip
 800394e:	2301      	movs	r3, #1
 8003950:	f7ff bb94 	b.w	800307c <_vfiprintf_r+0x20c>
 8003954:	9b05      	ldr	r3, [sp, #20]
 8003956:	4611      	mov	r1, r2
 8003958:	2001      	movs	r0, #1
 800395a:	4654      	mov	r4, sl
 800395c:	2b00      	cmp	r3, #0
 800395e:	f43f ade3 	beq.w	8003528 <_vfiprintf_r+0x6b8>
 8003962:	aa0c      	add	r2, sp, #48	; 0x30
 8003964:	2302      	movs	r3, #2
 8003966:	e88a 000c 	stmia.w	sl, {r2, r3}
 800396a:	461a      	mov	r2, r3
 800396c:	e5d5      	b.n	800351a <_vfiprintf_r+0x6aa>
 800396e:	f018 0f10 	tst.w	r8, #16
 8003972:	d10b      	bne.n	800398c <_vfiprintf_r+0xb1c>
 8003974:	f018 0f40 	tst.w	r8, #64	; 0x40
 8003978:	d008      	beq.n	800398c <_vfiprintf_r+0xb1c>
 800397a:	9a04      	ldr	r2, [sp, #16]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	3204      	adds	r2, #4
 8003980:	9204      	str	r2, [sp, #16]
 8003982:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8003986:	801a      	strh	r2, [r3, #0]
 8003988:	f7ff baa4 	b.w	8002ed4 <_vfiprintf_r+0x64>
 800398c:	9a04      	ldr	r2, [sp, #16]
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	3204      	adds	r2, #4
 8003992:	9204      	str	r2, [sp, #16]
 8003994:	9a02      	ldr	r2, [sp, #8]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f7ff ba9c 	b.w	8002ed4 <_vfiprintf_r+0x64>
 800399c:	9801      	ldr	r0, [sp, #4]
 800399e:	9900      	ldr	r1, [sp, #0]
 80039a0:	f8cd c020 	str.w	ip, [sp, #32]
 80039a4:	aa0d      	add	r2, sp, #52	; 0x34
 80039a6:	f7ff fa23 	bl	8002df0 <__sprint_r.part.0>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	f47f ae1d 	bne.w	80035ea <_vfiprintf_r+0x77a>
 80039b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80039b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039b4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80039b8:	1c48      	adds	r0, r1, #1
 80039ba:	4654      	mov	r4, sl
 80039bc:	e590      	b.n	80034e0 <_vfiprintf_r+0x670>
 80039be:	f048 0820 	orr.w	r8, r8, #32
 80039c2:	f10b 0001 	add.w	r0, fp, #1
 80039c6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80039ca:	f7ff bab8 	b.w	8002f3e <_vfiprintf_r+0xce>
 80039ce:	426d      	negs	r5, r5
 80039d0:	9304      	str	r3, [sp, #16]
 80039d2:	4658      	mov	r0, fp
 80039d4:	f7ff bbc9 	b.w	800316a <_vfiprintf_r+0x2fa>
 80039d8:	9807      	ldr	r0, [sp, #28]
 80039da:	9604      	str	r6, [sp, #16]
 80039dc:	f001 fc78 	bl	80052d0 <strlen>
 80039e0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80039e4:	4681      	mov	r9, r0
 80039e6:	f04f 0c00 	mov.w	ip, #0
 80039ea:	f7ff bb70 	b.w	80030ce <_vfiprintf_r+0x25e>
 80039ee:	9801      	ldr	r0, [sp, #4]
 80039f0:	9900      	ldr	r1, [sp, #0]
 80039f2:	f8cd c014 	str.w	ip, [sp, #20]
 80039f6:	aa0d      	add	r2, sp, #52	; 0x34
 80039f8:	f7ff f9fa 	bl	8002df0 <__sprint_r.part.0>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f47f adf4 	bne.w	80035ea <_vfiprintf_r+0x77a>
 8003a02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a06:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003a0a:	1c48      	adds	r0, r1, #1
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	e58b      	b.n	8003528 <_vfiprintf_r+0x6b8>
 8003a10:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a14:	4f15      	ldr	r7, [pc, #84]	; (8003a6c <_vfiprintf_r+0xbfc>)
 8003a16:	3101      	adds	r1, #1
 8003a18:	f7ff bb9b 	b.w	8003152 <_vfiprintf_r+0x2e2>
 8003a1c:	f1bc 0f06 	cmp.w	ip, #6
 8003a20:	bf28      	it	cs
 8003a22:	f04f 0c06 	movcs.w	ip, #6
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <_vfiprintf_r+0xc00>)
 8003a28:	9604      	str	r6, [sp, #16]
 8003a2a:	46e1      	mov	r9, ip
 8003a2c:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8003a30:	9307      	str	r3, [sp, #28]
 8003a32:	e462      	b.n	80032fa <_vfiprintf_r+0x48a>
 8003a34:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a36:	4f0d      	ldr	r7, [pc, #52]	; (8003a6c <_vfiprintf_r+0xbfc>)
 8003a38:	f101 0e01 	add.w	lr, r1, #1
 8003a3c:	e617      	b.n	800366e <_vfiprintf_r+0x7fe>
 8003a3e:	46e1      	mov	r9, ip
 8003a40:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8003a44:	9604      	str	r6, [sp, #16]
 8003a46:	4684      	mov	ip, r0
 8003a48:	f7ff bb41 	b.w	80030ce <_vfiprintf_r+0x25e>
 8003a4c:	4686      	mov	lr, r0
 8003a4e:	e66a      	b.n	8003726 <_vfiprintf_r+0x8b6>
 8003a50:	9a04      	ldr	r2, [sp, #16]
 8003a52:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8003a56:	6816      	ldr	r6, [r2, #0]
 8003a58:	3204      	adds	r2, #4
 8003a5a:	2e00      	cmp	r6, #0
 8003a5c:	9204      	str	r2, [sp, #16]
 8003a5e:	f6bf aa6e 	bge.w	8002f3e <_vfiprintf_r+0xce>
 8003a62:	f04f 36ff 	mov.w	r6, #4294967295
 8003a66:	f7ff ba6a 	b.w	8002f3e <_vfiprintf_r+0xce>
 8003a6a:	bf00      	nop
 8003a6c:	08005c70 	.word	0x08005c70
 8003a70:	08005ca8 	.word	0x08005ca8
	...

08003a80 <__sbprintf>:
 8003a80:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8003a84:	460c      	mov	r4, r1
 8003a86:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8003a8a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8003a8e:	69e7      	ldr	r7, [r4, #28]
 8003a90:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8003a92:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8003a96:	9119      	str	r1, [sp, #100]	; 0x64
 8003a98:	ad1a      	add	r5, sp, #104	; 0x68
 8003a9a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8003a9e:	f02e 0e02 	bic.w	lr, lr, #2
 8003aa2:	f04f 0c00 	mov.w	ip, #0
 8003aa6:	9707      	str	r7, [sp, #28]
 8003aa8:	4669      	mov	r1, sp
 8003aaa:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003aac:	9500      	str	r5, [sp, #0]
 8003aae:	9504      	str	r5, [sp, #16]
 8003ab0:	9602      	str	r6, [sp, #8]
 8003ab2:	9605      	str	r6, [sp, #20]
 8003ab4:	f8ad e00c 	strh.w	lr, [sp, #12]
 8003ab8:	f8ad 900e 	strh.w	r9, [sp, #14]
 8003abc:	9709      	str	r7, [sp, #36]	; 0x24
 8003abe:	f8cd c018 	str.w	ip, [sp, #24]
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	f7ff f9d4 	bl	8002e70 <_vfiprintf_r>
 8003ac8:	1e05      	subs	r5, r0, #0
 8003aca:	db07      	blt.n	8003adc <__sbprintf+0x5c>
 8003acc:	4630      	mov	r0, r6
 8003ace:	4669      	mov	r1, sp
 8003ad0:	f000 f936 	bl	8003d40 <_fflush_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	bf18      	it	ne
 8003ad8:	f04f 35ff 	movne.w	r5, #4294967295
 8003adc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003ae0:	065b      	lsls	r3, r3, #25
 8003ae2:	d503      	bpl.n	8003aec <__sbprintf+0x6c>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	4628      	mov	r0, r5
 8003aee:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8003af2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8003af6:	bf00      	nop
	...

08003b00 <__swsetup_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <__swsetup_r+0xc0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4605      	mov	r5, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	b113      	cbz	r3, 8003b12 <__swsetup_r+0x12>
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	d036      	beq.n	8003b80 <__swsetup_r+0x80>
 8003b12:	89a2      	ldrh	r2, [r4, #12]
 8003b14:	b293      	uxth	r3, r2
 8003b16:	0718      	lsls	r0, r3, #28
 8003b18:	d50c      	bpl.n	8003b34 <__swsetup_r+0x34>
 8003b1a:	6920      	ldr	r0, [r4, #16]
 8003b1c:	b1a8      	cbz	r0, 8003b4a <__swsetup_r+0x4a>
 8003b1e:	f013 0201 	ands.w	r2, r3, #1
 8003b22:	d01e      	beq.n	8003b62 <__swsetup_r+0x62>
 8003b24:	6963      	ldr	r3, [r4, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	425b      	negs	r3, r3
 8003b2a:	61a3      	str	r3, [r4, #24]
 8003b2c:	60a2      	str	r2, [r4, #8]
 8003b2e:	b1f0      	cbz	r0, 8003b6e <__swsetup_r+0x6e>
 8003b30:	2000      	movs	r0, #0
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	06d9      	lsls	r1, r3, #27
 8003b36:	d53b      	bpl.n	8003bb0 <__swsetup_r+0xb0>
 8003b38:	0758      	lsls	r0, r3, #29
 8003b3a:	d425      	bmi.n	8003b88 <__swsetup_r+0x88>
 8003b3c:	6920      	ldr	r0, [r4, #16]
 8003b3e:	f042 0308 	orr.w	r3, r2, #8
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d1e9      	bne.n	8003b1e <__swsetup_r+0x1e>
 8003b4a:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8003b4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003b52:	d0e4      	beq.n	8003b1e <__swsetup_r+0x1e>
 8003b54:	4628      	mov	r0, r5
 8003b56:	4621      	mov	r1, r4
 8003b58:	f000 fd02 	bl	8004560 <__smakebuf_r>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	6920      	ldr	r0, [r4, #16]
 8003b60:	e7dd      	b.n	8003b1e <__swsetup_r+0x1e>
 8003b62:	0799      	lsls	r1, r3, #30
 8003b64:	bf58      	it	pl
 8003b66:	6962      	ldrpl	r2, [r4, #20]
 8003b68:	60a2      	str	r2, [r4, #8]
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d1e0      	bne.n	8003b30 <__swsetup_r+0x30>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	d5de      	bpl.n	8003b32 <__swsetup_r+0x32>
 8003b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f975 	bl	8003e70 <__sinit>
 8003b86:	e7c4      	b.n	8003b12 <__swsetup_r+0x12>
 8003b88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b8a:	b149      	cbz	r1, 8003ba0 <__swsetup_r+0xa0>
 8003b8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d003      	beq.n	8003b9c <__swsetup_r+0x9c>
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 fa3b 	bl	8004010 <_free_r>
 8003b9a:	89a2      	ldrh	r2, [r4, #12]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003ba0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6920      	ldr	r0, [r4, #16]
 8003ba8:	6063      	str	r3, [r4, #4]
 8003baa:	b292      	uxth	r2, r2
 8003bac:	6020      	str	r0, [r4, #0]
 8003bae:	e7c6      	b.n	8003b3e <__swsetup_r+0x3e>
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	2309      	movs	r3, #9
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	81a2      	strh	r2, [r4, #12]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	20000c50 	.word	0x20000c50
	...

08003bd0 <abort>:
 8003bd0:	b508      	push	{r3, lr}
 8003bd2:	2006      	movs	r0, #6
 8003bd4:	f001 fb04 	bl	80051e0 <raise>
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f7fe fd39 	bl	8002650 <_exit>
 8003bde:	bf00      	nop

08003be0 <__sflush_r>:
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be8:	460d      	mov	r5, r1
 8003bea:	0711      	lsls	r1, r2, #28
 8003bec:	4680      	mov	r8, r0
 8003bee:	d43c      	bmi.n	8003c6a <__sflush_r+0x8a>
 8003bf0:	686a      	ldr	r2, [r5, #4]
 8003bf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	81ab      	strh	r3, [r5, #12]
 8003bfa:	dd65      	ble.n	8003cc8 <__sflush_r+0xe8>
 8003bfc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003bfe:	2e00      	cmp	r6, #0
 8003c00:	d04b      	beq.n	8003c9a <__sflush_r+0xba>
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c08:	2100      	movs	r1, #0
 8003c0a:	b292      	uxth	r2, r2
 8003c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c10:	f8c8 1000 	str.w	r1, [r8]
 8003c14:	2a00      	cmp	r2, #0
 8003c16:	d05b      	beq.n	8003cd0 <__sflush_r+0xf0>
 8003c18:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003c1a:	075f      	lsls	r7, r3, #29
 8003c1c:	d505      	bpl.n	8003c2a <__sflush_r+0x4a>
 8003c1e:	6869      	ldr	r1, [r5, #4]
 8003c20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c22:	1a52      	subs	r2, r2, r1
 8003c24:	b10b      	cbz	r3, 8003c2a <__sflush_r+0x4a>
 8003c26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003c28:	1ad2      	subs	r2, r2, r3
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	69e9      	ldr	r1, [r5, #28]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	47b0      	blx	r6
 8003c32:	1c46      	adds	r6, r0, #1
 8003c34:	d056      	beq.n	8003ce4 <__sflush_r+0x104>
 8003c36:	89ab      	ldrh	r3, [r5, #12]
 8003c38:	692a      	ldr	r2, [r5, #16]
 8003c3a:	602a      	str	r2, [r5, #0]
 8003c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2200      	movs	r2, #0
 8003c44:	606a      	str	r2, [r5, #4]
 8003c46:	04da      	lsls	r2, r3, #19
 8003c48:	81ab      	strh	r3, [r5, #12]
 8003c4a:	d43b      	bmi.n	8003cc4 <__sflush_r+0xe4>
 8003c4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003c4e:	f8c8 4000 	str.w	r4, [r8]
 8003c52:	b311      	cbz	r1, 8003c9a <__sflush_r+0xba>
 8003c54:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	d002      	beq.n	8003c62 <__sflush_r+0x82>
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	f000 f9d7 	bl	8004010 <_free_r>
 8003c62:	2000      	movs	r0, #0
 8003c64:	6328      	str	r0, [r5, #48]	; 0x30
 8003c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6a:	692e      	ldr	r6, [r5, #16]
 8003c6c:	b1ae      	cbz	r6, 8003c9a <__sflush_r+0xba>
 8003c6e:	682c      	ldr	r4, [r5, #0]
 8003c70:	602e      	str	r6, [r5, #0]
 8003c72:	0791      	lsls	r1, r2, #30
 8003c74:	bf0c      	ite	eq
 8003c76:	696b      	ldreq	r3, [r5, #20]
 8003c78:	2300      	movne	r3, #0
 8003c7a:	1ba4      	subs	r4, r4, r6
 8003c7c:	60ab      	str	r3, [r5, #8]
 8003c7e:	e00a      	b.n	8003c96 <__sflush_r+0xb6>
 8003c80:	4632      	mov	r2, r6
 8003c82:	4623      	mov	r3, r4
 8003c84:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003c86:	69e9      	ldr	r1, [r5, #28]
 8003c88:	4640      	mov	r0, r8
 8003c8a:	47b8      	blx	r7
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	eba4 0400 	sub.w	r4, r4, r0
 8003c92:	4406      	add	r6, r0
 8003c94:	dd04      	ble.n	8003ca0 <__sflush_r+0xc0>
 8003c96:	2c00      	cmp	r4, #0
 8003c98:	dcf2      	bgt.n	8003c80 <__sflush_r+0xa0>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca0:	89ab      	ldrh	r3, [r5, #12]
 8003ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca6:	81ab      	strh	r3, [r5, #12]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	89ab      	ldrh	r3, [r5, #12]
 8003cb2:	692a      	ldr	r2, [r5, #16]
 8003cb4:	6069      	str	r1, [r5, #4]
 8003cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	81ab      	strh	r3, [r5, #12]
 8003cbe:	04db      	lsls	r3, r3, #19
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	d5c3      	bpl.n	8003c4c <__sflush_r+0x6c>
 8003cc4:	6528      	str	r0, [r5, #80]	; 0x50
 8003cc6:	e7c1      	b.n	8003c4c <__sflush_r+0x6c>
 8003cc8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	dc96      	bgt.n	8003bfc <__sflush_r+0x1c>
 8003cce:	e7e4      	b.n	8003c9a <__sflush_r+0xba>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	69e9      	ldr	r1, [r5, #28]
 8003cd6:	47b0      	blx	r6
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	4602      	mov	r2, r0
 8003cdc:	d019      	beq.n	8003d12 <__sflush_r+0x132>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003ce2:	e79a      	b.n	8003c1a <__sflush_r+0x3a>
 8003ce4:	f8d8 1000 	ldr.w	r1, [r8]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d0e1      	beq.n	8003cb0 <__sflush_r+0xd0>
 8003cec:	291d      	cmp	r1, #29
 8003cee:	d007      	beq.n	8003d00 <__sflush_r+0x120>
 8003cf0:	2916      	cmp	r1, #22
 8003cf2:	d005      	beq.n	8003d00 <__sflush_r+0x120>
 8003cf4:	89ab      	ldrh	r3, [r5, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfa:	81ab      	strh	r3, [r5, #12]
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d00:	89ab      	ldrh	r3, [r5, #12]
 8003d02:	692a      	ldr	r2, [r5, #16]
 8003d04:	602a      	str	r2, [r5, #0]
 8003d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	81ab      	strh	r3, [r5, #12]
 8003d0e:	606a      	str	r2, [r5, #4]
 8003d10:	e79c      	b.n	8003c4c <__sflush_r+0x6c>
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0e1      	beq.n	8003cde <__sflush_r+0xfe>
 8003d1a:	2b1d      	cmp	r3, #29
 8003d1c:	d007      	beq.n	8003d2e <__sflush_r+0x14e>
 8003d1e:	2b16      	cmp	r3, #22
 8003d20:	d005      	beq.n	8003d2e <__sflush_r+0x14e>
 8003d22:	89ab      	ldrh	r3, [r5, #12]
 8003d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d28:	81ab      	strh	r3, [r5, #12]
 8003d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d2e:	f8c8 4000 	str.w	r4, [r8]
 8003d32:	e7b2      	b.n	8003c9a <__sflush_r+0xba>
	...

08003d40 <_fflush_r>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
 8003d44:	b082      	sub	sp, #8
 8003d46:	b108      	cbz	r0, 8003d4c <_fflush_r+0xc>
 8003d48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d4a:	b153      	cbz	r3, 8003d62 <_fflush_r+0x22>
 8003d4c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003d50:	b908      	cbnz	r0, 8003d56 <_fflush_r+0x16>
 8003d52:	b002      	add	sp, #8
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	4620      	mov	r0, r4
 8003d58:	b002      	add	sp, #8
 8003d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5e:	f7ff bf3f 	b.w	8003be0 <__sflush_r>
 8003d62:	9101      	str	r1, [sp, #4]
 8003d64:	f000 f884 	bl	8003e70 <__sinit>
 8003d68:	9901      	ldr	r1, [sp, #4]
 8003d6a:	e7ef      	b.n	8003d4c <_fflush_r+0xc>
 8003d6c:	0000      	movs	r0, r0
	...

08003d70 <_cleanup_r>:
 8003d70:	4901      	ldr	r1, [pc, #4]	; (8003d78 <_cleanup_r+0x8>)
 8003d72:	f000 bbb5 	b.w	80044e0 <_fwalk_reent>
 8003d76:	bf00      	nop
 8003d78:	08005461 	.word	0x08005461
 8003d7c:	00000000 	.word	0x00000000

08003d80 <__sinit.part.1>:
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <__sinit.part.1+0xdc>)
 8003d86:	6845      	ldr	r5, [r0, #4]
 8003d88:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003d8a:	2400      	movs	r4, #0
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8003d92:	2304      	movs	r3, #4
 8003d94:	2103      	movs	r1, #3
 8003d96:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8003d9a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003d9e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8003da2:	b083      	sub	sp, #12
 8003da4:	602c      	str	r4, [r5, #0]
 8003da6:	606c      	str	r4, [r5, #4]
 8003da8:	60ac      	str	r4, [r5, #8]
 8003daa:	666c      	str	r4, [r5, #100]	; 0x64
 8003dac:	81ec      	strh	r4, [r5, #14]
 8003dae:	612c      	str	r4, [r5, #16]
 8003db0:	616c      	str	r4, [r5, #20]
 8003db2:	61ac      	str	r4, [r5, #24]
 8003db4:	81ab      	strh	r3, [r5, #12]
 8003db6:	4621      	mov	r1, r4
 8003db8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	f000 ff87 	bl	8004cd0 <memset>
 8003dc2:	68be      	ldr	r6, [r7, #8]
 8003dc4:	f8df b098 	ldr.w	fp, [pc, #152]	; 8003e60 <__sinit.part.1+0xe0>
 8003dc8:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003e64 <__sinit.part.1+0xe4>
 8003dcc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003e68 <__sinit.part.1+0xe8>
 8003dd0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003e6c <__sinit.part.1+0xec>
 8003dd4:	f8c5 b020 	str.w	fp, [r5, #32]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2209      	movs	r2, #9
 8003ddc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003de0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003de4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003de8:	61ed      	str	r5, [r5, #28]
 8003dea:	4621      	mov	r1, r4
 8003dec:	81f3      	strh	r3, [r6, #14]
 8003dee:	81b2      	strh	r2, [r6, #12]
 8003df0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003df4:	6034      	str	r4, [r6, #0]
 8003df6:	6074      	str	r4, [r6, #4]
 8003df8:	60b4      	str	r4, [r6, #8]
 8003dfa:	6674      	str	r4, [r6, #100]	; 0x64
 8003dfc:	6134      	str	r4, [r6, #16]
 8003dfe:	6174      	str	r4, [r6, #20]
 8003e00:	61b4      	str	r4, [r6, #24]
 8003e02:	2208      	movs	r2, #8
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	f000 ff63 	bl	8004cd0 <memset>
 8003e0a:	68fd      	ldr	r5, [r7, #12]
 8003e0c:	61f6      	str	r6, [r6, #28]
 8003e0e:	2012      	movs	r0, #18
 8003e10:	2202      	movs	r2, #2
 8003e12:	f8c6 b020 	str.w	fp, [r6, #32]
 8003e16:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003e1a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003e1e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003e22:	4621      	mov	r1, r4
 8003e24:	81a8      	strh	r0, [r5, #12]
 8003e26:	81ea      	strh	r2, [r5, #14]
 8003e28:	602c      	str	r4, [r5, #0]
 8003e2a:	606c      	str	r4, [r5, #4]
 8003e2c:	60ac      	str	r4, [r5, #8]
 8003e2e:	666c      	str	r4, [r5, #100]	; 0x64
 8003e30:	612c      	str	r4, [r5, #16]
 8003e32:	616c      	str	r4, [r5, #20]
 8003e34:	61ac      	str	r4, [r5, #24]
 8003e36:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	f000 ff48 	bl	8004cd0 <memset>
 8003e40:	9b01      	ldr	r3, [sp, #4]
 8003e42:	61ed      	str	r5, [r5, #28]
 8003e44:	f8c5 b020 	str.w	fp, [r5, #32]
 8003e48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003e4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003e50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e56:	b003      	add	sp, #12
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	08003d71 	.word	0x08003d71
 8003e60:	08005231 	.word	0x08005231
 8003e64:	08005261 	.word	0x08005261
 8003e68:	080052a1 	.word	0x080052a1
 8003e6c:	080052c1 	.word	0x080052c1

08003e70 <__sinit>:
 8003e70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e72:	b103      	cbz	r3, 8003e76 <__sinit+0x6>
 8003e74:	4770      	bx	lr
 8003e76:	f7ff bf83 	b.w	8003d80 <__sinit.part.1>
 8003e7a:	bf00      	nop
 8003e7c:	0000      	movs	r0, r0
	...

08003e80 <__sfp_lock_acquire>:
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
	...

08003e90 <__sfp_lock_release>:
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
	...

08003ea0 <_fputwc_r>:
 8003ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea4:	8993      	ldrh	r3, [r2, #12]
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	049a      	lsls	r2, r3, #18
 8003eaa:	b082      	sub	sp, #8
 8003eac:	4607      	mov	r7, r0
 8003eae:	460e      	mov	r6, r1
 8003eb0:	d406      	bmi.n	8003ec0 <_fputwc_r+0x20>
 8003eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	6662      	str	r2, [r4, #100]	; 0x64
 8003ec0:	f000 fb46 	bl	8004550 <__locale_mb_cur_max>
 8003ec4:	2801      	cmp	r0, #1
 8003ec6:	d041      	beq.n	8003f4c <_fputwc_r+0xac>
 8003ec8:	4638      	mov	r0, r7
 8003eca:	a901      	add	r1, sp, #4
 8003ecc:	4632      	mov	r2, r6
 8003ece:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8003ed2:	f001 fa85 	bl	80053e0 <_wcrtomb_r>
 8003ed6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003eda:	4680      	mov	r8, r0
 8003edc:	d02f      	beq.n	8003f3e <_fputwc_r+0x9e>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d03c      	beq.n	8003f5c <_fputwc_r+0xbc>
 8003ee2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	e009      	b.n	8003efe <_fputwc_r+0x5e>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	7019      	strb	r1, [r3, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	45a8      	cmp	r8, r5
 8003ef8:	d930      	bls.n	8003f5c <_fputwc_r+0xbc>
 8003efa:	ab01      	add	r3, sp, #4
 8003efc:	5d59      	ldrb	r1, [r3, r5]
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	daf0      	bge.n	8003eea <_fputwc_r+0x4a>
 8003f08:	69a2      	ldr	r2, [r4, #24]
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	db07      	blt.n	8003f1e <_fputwc_r+0x7e>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	7019      	strb	r1, [r3, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	7819      	ldrb	r1, [r3, #0]
 8003f16:	290a      	cmp	r1, #10
 8003f18:	f103 0301 	add.w	r3, r3, #1
 8003f1c:	d1e9      	bne.n	8003ef2 <_fputwc_r+0x52>
 8003f1e:	4638      	mov	r0, r7
 8003f20:	4622      	mov	r2, r4
 8003f22:	f001 fa05 	bl	8005330 <__swbuf_r>
 8003f26:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003f2a:	fab0 f080 	clz	r0, r0
 8003f2e:	0940      	lsrs	r0, r0, #5
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0df      	beq.n	8003ef4 <_fputwc_r+0x54>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	b002      	add	sp, #8
 8003f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	b002      	add	sp, #8
 8003f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f4c:	1e73      	subs	r3, r6, #1
 8003f4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003f50:	d8ba      	bhi.n	8003ec8 <_fputwc_r+0x28>
 8003f52:	b2f1      	uxtb	r1, r6
 8003f54:	4680      	mov	r8, r0
 8003f56:	f88d 1004 	strb.w	r1, [sp, #4]
 8003f5a:	e7c4      	b.n	8003ee6 <_fputwc_r+0x46>
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	b002      	add	sp, #8
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f70 <_malloc_trim_r>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	4f23      	ldr	r7, [pc, #140]	; (8004000 <_malloc_trim_r+0x90>)
 8003f74:	460c      	mov	r4, r1
 8003f76:	4606      	mov	r6, r0
 8003f78:	f000 fefa 	bl	8004d70 <__malloc_lock>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685d      	ldr	r5, [r3, #4]
 8003f80:	f025 0503 	bic.w	r5, r5, #3
 8003f84:	1b29      	subs	r1, r5, r4
 8003f86:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8003f8a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003f8e:	f021 010f 	bic.w	r1, r1, #15
 8003f92:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003f96:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003f9a:	db07      	blt.n	8003fac <_malloc_trim_r+0x3c>
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f7fd fe8e 	bl	8001cc0 <_sbrk_r>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	442b      	add	r3, r5
 8003fa8:	4298      	cmp	r0, r3
 8003faa:	d004      	beq.n	8003fb6 <_malloc_trim_r+0x46>
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 fee7 	bl	8004d80 <__malloc_unlock>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	4261      	negs	r1, r4
 8003fba:	f7fd fe81 	bl	8001cc0 <_sbrk_r>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d00d      	beq.n	8003fde <_malloc_trim_r+0x6e>
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <_malloc_trim_r+0x94>)
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	1b2d      	subs	r5, r5, r4
 8003fca:	f045 0501 	orr.w	r5, r5, #1
 8003fce:	4630      	mov	r0, r6
 8003fd0:	1b09      	subs	r1, r1, r4
 8003fd2:	6055      	str	r5, [r2, #4]
 8003fd4:	6019      	str	r1, [r3, #0]
 8003fd6:	f000 fed3 	bl	8004d80 <__malloc_unlock>
 8003fda:	2001      	movs	r0, #1
 8003fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fde:	4630      	mov	r0, r6
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f7fd fe6d 	bl	8001cc0 <_sbrk_r>
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	1a83      	subs	r3, r0, r2
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	ddde      	ble.n	8003fac <_malloc_trim_r+0x3c>
 8003fee:	4c06      	ldr	r4, [pc, #24]	; (8004008 <_malloc_trim_r+0x98>)
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <_malloc_trim_r+0x94>)
 8003ff2:	6824      	ldr	r4, [r4, #0]
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	1b00      	subs	r0, r0, r4
 8003ffa:	6053      	str	r3, [r2, #4]
 8003ffc:	6008      	str	r0, [r1, #0]
 8003ffe:	e7d5      	b.n	8003fac <_malloc_trim_r+0x3c>
 8004000:	20000c78 	.word	0x20000c78
 8004004:	2000afdc 	.word	0x2000afdc
 8004008:	20001084 	.word	0x20001084
 800400c:	00000000 	.word	0x00000000

08004010 <_free_r>:
 8004010:	2900      	cmp	r1, #0
 8004012:	d04e      	beq.n	80040b2 <_free_r+0xa2>
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004018:	460c      	mov	r4, r1
 800401a:	4680      	mov	r8, r0
 800401c:	f000 fea8 	bl	8004d70 <__malloc_lock>
 8004020:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8004024:	4962      	ldr	r1, [pc, #392]	; (80041b0 <_free_r+0x1a0>)
 8004026:	f027 0201 	bic.w	r2, r7, #1
 800402a:	f1a4 0508 	sub.w	r5, r4, #8
 800402e:	18ab      	adds	r3, r5, r2
 8004030:	688e      	ldr	r6, [r1, #8]
 8004032:	6858      	ldr	r0, [r3, #4]
 8004034:	429e      	cmp	r6, r3
 8004036:	f020 0003 	bic.w	r0, r0, #3
 800403a:	d05a      	beq.n	80040f2 <_free_r+0xe2>
 800403c:	07fe      	lsls	r6, r7, #31
 800403e:	6058      	str	r0, [r3, #4]
 8004040:	d40b      	bmi.n	800405a <_free_r+0x4a>
 8004042:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004046:	1bed      	subs	r5, r5, r7
 8004048:	f101 0e08 	add.w	lr, r1, #8
 800404c:	68ac      	ldr	r4, [r5, #8]
 800404e:	4574      	cmp	r4, lr
 8004050:	443a      	add	r2, r7
 8004052:	d067      	beq.n	8004124 <_free_r+0x114>
 8004054:	68ef      	ldr	r7, [r5, #12]
 8004056:	60e7      	str	r7, [r4, #12]
 8004058:	60bc      	str	r4, [r7, #8]
 800405a:	181c      	adds	r4, r3, r0
 800405c:	6864      	ldr	r4, [r4, #4]
 800405e:	07e4      	lsls	r4, r4, #31
 8004060:	d40c      	bmi.n	800407c <_free_r+0x6c>
 8004062:	4f54      	ldr	r7, [pc, #336]	; (80041b4 <_free_r+0x1a4>)
 8004064:	689c      	ldr	r4, [r3, #8]
 8004066:	42bc      	cmp	r4, r7
 8004068:	4402      	add	r2, r0
 800406a:	d07c      	beq.n	8004166 <_free_r+0x156>
 800406c:	68d8      	ldr	r0, [r3, #12]
 800406e:	60e0      	str	r0, [r4, #12]
 8004070:	f042 0301 	orr.w	r3, r2, #1
 8004074:	6084      	str	r4, [r0, #8]
 8004076:	606b      	str	r3, [r5, #4]
 8004078:	50aa      	str	r2, [r5, r2]
 800407a:	e003      	b.n	8004084 <_free_r+0x74>
 800407c:	f042 0301 	orr.w	r3, r2, #1
 8004080:	606b      	str	r3, [r5, #4]
 8004082:	50aa      	str	r2, [r5, r2]
 8004084:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004088:	d214      	bcs.n	80040b4 <_free_r+0xa4>
 800408a:	08d2      	lsrs	r2, r2, #3
 800408c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8004090:	6848      	ldr	r0, [r1, #4]
 8004092:	689f      	ldr	r7, [r3, #8]
 8004094:	60af      	str	r7, [r5, #8]
 8004096:	1092      	asrs	r2, r2, #2
 8004098:	2401      	movs	r4, #1
 800409a:	fa04 f202 	lsl.w	r2, r4, r2
 800409e:	4310      	orrs	r0, r2
 80040a0:	60eb      	str	r3, [r5, #12]
 80040a2:	6048      	str	r0, [r1, #4]
 80040a4:	609d      	str	r5, [r3, #8]
 80040a6:	60fd      	str	r5, [r7, #12]
 80040a8:	4640      	mov	r0, r8
 80040aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ae:	f000 be67 	b.w	8004d80 <__malloc_unlock>
 80040b2:	4770      	bx	lr
 80040b4:	0a53      	lsrs	r3, r2, #9
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d847      	bhi.n	800414a <_free_r+0x13a>
 80040ba:	0993      	lsrs	r3, r2, #6
 80040bc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80040c0:	0060      	lsls	r0, r4, #1
 80040c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80040c6:	493a      	ldr	r1, [pc, #232]	; (80041b0 <_free_r+0x1a0>)
 80040c8:	6883      	ldr	r3, [r0, #8]
 80040ca:	4283      	cmp	r3, r0
 80040cc:	d043      	beq.n	8004156 <_free_r+0x146>
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	f021 0103 	bic.w	r1, r1, #3
 80040d4:	4291      	cmp	r1, r2
 80040d6:	d902      	bls.n	80040de <_free_r+0xce>
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4298      	cmp	r0, r3
 80040dc:	d1f7      	bne.n	80040ce <_free_r+0xbe>
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	60ea      	str	r2, [r5, #12]
 80040e2:	60ab      	str	r3, [r5, #8]
 80040e4:	4640      	mov	r0, r8
 80040e6:	6095      	str	r5, [r2, #8]
 80040e8:	60dd      	str	r5, [r3, #12]
 80040ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	f000 be47 	b.w	8004d80 <__malloc_unlock>
 80040f2:	07ff      	lsls	r7, r7, #31
 80040f4:	4402      	add	r2, r0
 80040f6:	d407      	bmi.n	8004108 <_free_r+0xf8>
 80040f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80040fc:	1aed      	subs	r5, r5, r3
 80040fe:	441a      	add	r2, r3
 8004100:	68a8      	ldr	r0, [r5, #8]
 8004102:	68eb      	ldr	r3, [r5, #12]
 8004104:	60c3      	str	r3, [r0, #12]
 8004106:	6098      	str	r0, [r3, #8]
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <_free_r+0x1a8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0001 	orr.w	r0, r2, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	6068      	str	r0, [r5, #4]
 8004114:	608d      	str	r5, [r1, #8]
 8004116:	d3c7      	bcc.n	80040a8 <_free_r+0x98>
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <_free_r+0x1ac>)
 800411a:	4640      	mov	r0, r8
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	f7ff ff27 	bl	8003f70 <_malloc_trim_r>
 8004122:	e7c1      	b.n	80040a8 <_free_r+0x98>
 8004124:	1819      	adds	r1, r3, r0
 8004126:	6849      	ldr	r1, [r1, #4]
 8004128:	07c9      	lsls	r1, r1, #31
 800412a:	d409      	bmi.n	8004140 <_free_r+0x130>
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4402      	add	r2, r0
 8004132:	f042 0001 	orr.w	r0, r2, #1
 8004136:	60d9      	str	r1, [r3, #12]
 8004138:	608b      	str	r3, [r1, #8]
 800413a:	6068      	str	r0, [r5, #4]
 800413c:	50aa      	str	r2, [r5, r2]
 800413e:	e7b3      	b.n	80040a8 <_free_r+0x98>
 8004140:	f042 0301 	orr.w	r3, r2, #1
 8004144:	606b      	str	r3, [r5, #4]
 8004146:	50aa      	str	r2, [r5, r2]
 8004148:	e7ae      	b.n	80040a8 <_free_r+0x98>
 800414a:	2b14      	cmp	r3, #20
 800414c:	d814      	bhi.n	8004178 <_free_r+0x168>
 800414e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8004152:	0060      	lsls	r0, r4, #1
 8004154:	e7b5      	b.n	80040c2 <_free_r+0xb2>
 8004156:	684a      	ldr	r2, [r1, #4]
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2001      	movs	r0, #1
 800415c:	40a0      	lsls	r0, r4
 800415e:	4302      	orrs	r2, r0
 8004160:	604a      	str	r2, [r1, #4]
 8004162:	461a      	mov	r2, r3
 8004164:	e7bc      	b.n	80040e0 <_free_r+0xd0>
 8004166:	f042 0301 	orr.w	r3, r2, #1
 800416a:	614d      	str	r5, [r1, #20]
 800416c:	610d      	str	r5, [r1, #16]
 800416e:	60ec      	str	r4, [r5, #12]
 8004170:	60ac      	str	r4, [r5, #8]
 8004172:	606b      	str	r3, [r5, #4]
 8004174:	50aa      	str	r2, [r5, r2]
 8004176:	e797      	b.n	80040a8 <_free_r+0x98>
 8004178:	2b54      	cmp	r3, #84	; 0x54
 800417a:	d804      	bhi.n	8004186 <_free_r+0x176>
 800417c:	0b13      	lsrs	r3, r2, #12
 800417e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8004182:	0060      	lsls	r0, r4, #1
 8004184:	e79d      	b.n	80040c2 <_free_r+0xb2>
 8004186:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800418a:	d804      	bhi.n	8004196 <_free_r+0x186>
 800418c:	0bd3      	lsrs	r3, r2, #15
 800418e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8004192:	0060      	lsls	r0, r4, #1
 8004194:	e795      	b.n	80040c2 <_free_r+0xb2>
 8004196:	f240 5054 	movw	r0, #1364	; 0x554
 800419a:	4283      	cmp	r3, r0
 800419c:	d804      	bhi.n	80041a8 <_free_r+0x198>
 800419e:	0c93      	lsrs	r3, r2, #18
 80041a0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80041a4:	0060      	lsls	r0, r4, #1
 80041a6:	e78c      	b.n	80040c2 <_free_r+0xb2>
 80041a8:	20fc      	movs	r0, #252	; 0xfc
 80041aa:	247e      	movs	r4, #126	; 0x7e
 80041ac:	e789      	b.n	80040c2 <_free_r+0xb2>
 80041ae:	bf00      	nop
 80041b0:	20000c78 	.word	0x20000c78
 80041b4:	20000c80 	.word	0x20000c80
 80041b8:	20001080 	.word	0x20001080
 80041bc:	2000afd8 	.word	0x2000afd8

080041c0 <__sfvwrite_r>:
 80041c0:	6893      	ldr	r3, [r2, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d07a      	beq.n	80042bc <__sfvwrite_r+0xfc>
 80041c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80041ce:	f01e 0f08 	tst.w	lr, #8
 80041d2:	b083      	sub	sp, #12
 80041d4:	460c      	mov	r4, r1
 80041d6:	4681      	mov	r9, r0
 80041d8:	4616      	mov	r6, r2
 80041da:	d026      	beq.n	800422a <__sfvwrite_r+0x6a>
 80041dc:	690b      	ldr	r3, [r1, #16]
 80041de:	b323      	cbz	r3, 800422a <__sfvwrite_r+0x6a>
 80041e0:	f00e 0802 	and.w	r8, lr, #2
 80041e4:	fa1f f088 	uxth.w	r0, r8
 80041e8:	6835      	ldr	r5, [r6, #0]
 80041ea:	b370      	cbz	r0, 800424a <__sfvwrite_r+0x8a>
 80041ec:	f04f 0a00 	mov.w	sl, #0
 80041f0:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 80044d4 <__sfvwrite_r+0x314>
 80041f4:	46d0      	mov	r8, sl
 80041f6:	45d8      	cmp	r8, fp
 80041f8:	4643      	mov	r3, r8
 80041fa:	4652      	mov	r2, sl
 80041fc:	bf28      	it	cs
 80041fe:	465b      	movcs	r3, fp
 8004200:	4648      	mov	r0, r9
 8004202:	f1b8 0f00 	cmp.w	r8, #0
 8004206:	d053      	beq.n	80042b0 <__sfvwrite_r+0xf0>
 8004208:	69e1      	ldr	r1, [r4, #28]
 800420a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800420c:	47b8      	blx	r7
 800420e:	2800      	cmp	r0, #0
 8004210:	dd73      	ble.n	80042fa <__sfvwrite_r+0x13a>
 8004212:	68b3      	ldr	r3, [r6, #8]
 8004214:	1a1b      	subs	r3, r3, r0
 8004216:	4482      	add	sl, r0
 8004218:	ebc0 0808 	rsb	r8, r0, r8
 800421c:	60b3      	str	r3, [r6, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e9      	bne.n	80041f6 <__sfvwrite_r+0x36>
 8004222:	2000      	movs	r0, #0
 8004224:	b003      	add	sp, #12
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	4648      	mov	r0, r9
 800422c:	4621      	mov	r1, r4
 800422e:	f7ff fc67 	bl	8003b00 <__swsetup_r>
 8004232:	2800      	cmp	r0, #0
 8004234:	f040 8145 	bne.w	80044c2 <__sfvwrite_r+0x302>
 8004238:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 800423c:	6835      	ldr	r5, [r6, #0]
 800423e:	f00e 0802 	and.w	r8, lr, #2
 8004242:	fa1f f088 	uxth.w	r0, r8
 8004246:	2800      	cmp	r0, #0
 8004248:	d1d0      	bne.n	80041ec <__sfvwrite_r+0x2c>
 800424a:	f01e 0b01 	ands.w	fp, lr, #1
 800424e:	d15d      	bne.n	800430c <__sfvwrite_r+0x14c>
 8004250:	46d8      	mov	r8, fp
 8004252:	f1b8 0f00 	cmp.w	r8, #0
 8004256:	d025      	beq.n	80042a4 <__sfvwrite_r+0xe4>
 8004258:	f41e 7f00 	tst.w	lr, #512	; 0x200
 800425c:	68a7      	ldr	r7, [r4, #8]
 800425e:	d02f      	beq.n	80042c0 <__sfvwrite_r+0x100>
 8004260:	45b8      	cmp	r8, r7
 8004262:	46ba      	mov	sl, r7
 8004264:	f0c0 80a9 	bcc.w	80043ba <__sfvwrite_r+0x1fa>
 8004268:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 800426c:	f040 80b6 	bne.w	80043dc <__sfvwrite_r+0x21c>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	4652      	mov	r2, sl
 8004274:	4659      	mov	r1, fp
 8004276:	f000 fcc3 	bl	8004c00 <memmove>
 800427a:	68a0      	ldr	r0, [r4, #8]
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	1bc0      	subs	r0, r0, r7
 8004280:	eb02 030a 	add.w	r3, r2, sl
 8004284:	60a0      	str	r0, [r4, #8]
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	4640      	mov	r0, r8
 800428a:	68b3      	ldr	r3, [r6, #8]
 800428c:	1a1b      	subs	r3, r3, r0
 800428e:	4483      	add	fp, r0
 8004290:	ebc0 0808 	rsb	r8, r0, r8
 8004294:	60b3      	str	r3, [r6, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0c3      	beq.n	8004222 <__sfvwrite_r+0x62>
 800429a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 800429e:	f1b8 0f00 	cmp.w	r8, #0
 80042a2:	d1d9      	bne.n	8004258 <__sfvwrite_r+0x98>
 80042a4:	f8d5 b000 	ldr.w	fp, [r5]
 80042a8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80042ac:	3508      	adds	r5, #8
 80042ae:	e7d0      	b.n	8004252 <__sfvwrite_r+0x92>
 80042b0:	f8d5 a000 	ldr.w	sl, [r5]
 80042b4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80042b8:	3508      	adds	r5, #8
 80042ba:	e79c      	b.n	80041f6 <__sfvwrite_r+0x36>
 80042bc:	2000      	movs	r0, #0
 80042be:	4770      	bx	lr
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	4298      	cmp	r0, r3
 80042c6:	d803      	bhi.n	80042d0 <__sfvwrite_r+0x110>
 80042c8:	6962      	ldr	r2, [r4, #20]
 80042ca:	4590      	cmp	r8, r2
 80042cc:	f080 80b9 	bcs.w	8004442 <__sfvwrite_r+0x282>
 80042d0:	4547      	cmp	r7, r8
 80042d2:	bf28      	it	cs
 80042d4:	4647      	movcs	r7, r8
 80042d6:	463a      	mov	r2, r7
 80042d8:	4659      	mov	r1, fp
 80042da:	f000 fc91 	bl	8004c00 <memmove>
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	1bdb      	subs	r3, r3, r7
 80042e4:	443a      	add	r2, r7
 80042e6:	60a3      	str	r3, [r4, #8]
 80042e8:	6022      	str	r2, [r4, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d14a      	bne.n	8004384 <__sfvwrite_r+0x1c4>
 80042ee:	4648      	mov	r0, r9
 80042f0:	4621      	mov	r1, r4
 80042f2:	f7ff fd25 	bl	8003d40 <_fflush_r>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d044      	beq.n	8004384 <__sfvwrite_r+0x1c4>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004300:	f04f 30ff 	mov.w	r0, #4294967295
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430c:	4680      	mov	r8, r0
 800430e:	9000      	str	r0, [sp, #0]
 8004310:	4683      	mov	fp, r0
 8004312:	4682      	mov	sl, r0
 8004314:	f1ba 0f00 	cmp.w	sl, #0
 8004318:	d02c      	beq.n	8004374 <__sfvwrite_r+0x1b4>
 800431a:	9b00      	ldr	r3, [sp, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d050      	beq.n	80043c2 <__sfvwrite_r+0x202>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	6921      	ldr	r1, [r4, #16]
 8004324:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8004328:	6962      	ldr	r2, [r4, #20]
 800432a:	45d0      	cmp	r8, sl
 800432c:	4643      	mov	r3, r8
 800432e:	bf28      	it	cs
 8004330:	4653      	movcs	r3, sl
 8004332:	4288      	cmp	r0, r1
 8004334:	461f      	mov	r7, r3
 8004336:	d904      	bls.n	8004342 <__sfvwrite_r+0x182>
 8004338:	eb0e 0c02 	add.w	ip, lr, r2
 800433c:	4563      	cmp	r3, ip
 800433e:	f300 8092 	bgt.w	8004466 <__sfvwrite_r+0x2a6>
 8004342:	4293      	cmp	r3, r2
 8004344:	db20      	blt.n	8004388 <__sfvwrite_r+0x1c8>
 8004346:	4613      	mov	r3, r2
 8004348:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800434a:	69e1      	ldr	r1, [r4, #28]
 800434c:	4648      	mov	r0, r9
 800434e:	465a      	mov	r2, fp
 8004350:	47b8      	blx	r7
 8004352:	1e07      	subs	r7, r0, #0
 8004354:	ddd1      	ble.n	80042fa <__sfvwrite_r+0x13a>
 8004356:	ebb8 0807 	subs.w	r8, r8, r7
 800435a:	d025      	beq.n	80043a8 <__sfvwrite_r+0x1e8>
 800435c:	68b3      	ldr	r3, [r6, #8]
 800435e:	1bdb      	subs	r3, r3, r7
 8004360:	44bb      	add	fp, r7
 8004362:	ebc7 0a0a 	rsb	sl, r7, sl
 8004366:	60b3      	str	r3, [r6, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f43f af5a 	beq.w	8004222 <__sfvwrite_r+0x62>
 800436e:	f1ba 0f00 	cmp.w	sl, #0
 8004372:	d1d2      	bne.n	800431a <__sfvwrite_r+0x15a>
 8004374:	2300      	movs	r3, #0
 8004376:	f8d5 b000 	ldr.w	fp, [r5]
 800437a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	3508      	adds	r5, #8
 8004382:	e7c7      	b.n	8004314 <__sfvwrite_r+0x154>
 8004384:	4638      	mov	r0, r7
 8004386:	e780      	b.n	800428a <__sfvwrite_r+0xca>
 8004388:	461a      	mov	r2, r3
 800438a:	4659      	mov	r1, fp
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	f000 fc37 	bl	8004c00 <memmove>
 8004392:	68a2      	ldr	r2, [r4, #8]
 8004394:	6821      	ldr	r1, [r4, #0]
 8004396:	9b01      	ldr	r3, [sp, #4]
 8004398:	ebb8 0807 	subs.w	r8, r8, r7
 800439c:	eba2 0203 	sub.w	r2, r2, r3
 80043a0:	440b      	add	r3, r1
 80043a2:	60a2      	str	r2, [r4, #8]
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	d1d9      	bne.n	800435c <__sfvwrite_r+0x19c>
 80043a8:	4648      	mov	r0, r9
 80043aa:	4621      	mov	r1, r4
 80043ac:	f7ff fcc8 	bl	8003d40 <_fflush_r>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d1a2      	bne.n	80042fa <__sfvwrite_r+0x13a>
 80043b4:	f8cd 8000 	str.w	r8, [sp]
 80043b8:	e7d0      	b.n	800435c <__sfvwrite_r+0x19c>
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	4647      	mov	r7, r8
 80043be:	46c2      	mov	sl, r8
 80043c0:	e757      	b.n	8004272 <__sfvwrite_r+0xb2>
 80043c2:	4658      	mov	r0, fp
 80043c4:	210a      	movs	r1, #10
 80043c6:	4652      	mov	r2, sl
 80043c8:	f000 fbca 	bl	8004b60 <memchr>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d073      	beq.n	80044b8 <__sfvwrite_r+0x2f8>
 80043d0:	3001      	adds	r0, #1
 80043d2:	2301      	movs	r3, #1
 80043d4:	ebcb 0800 	rsb	r8, fp, r0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	e7a1      	b.n	8004320 <__sfvwrite_r+0x160>
 80043dc:	6967      	ldr	r7, [r4, #20]
 80043de:	6921      	ldr	r1, [r4, #16]
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80043ec:	1c58      	adds	r0, r3, #1
 80043ee:	107f      	asrs	r7, r7, #1
 80043f0:	4440      	add	r0, r8
 80043f2:	4287      	cmp	r7, r0
 80043f4:	463a      	mov	r2, r7
 80043f6:	bf3c      	itt	cc
 80043f8:	4607      	movcc	r7, r0
 80043fa:	463a      	movcc	r2, r7
 80043fc:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	d046      	beq.n	8004492 <__sfvwrite_r+0x2d2>
 8004404:	4611      	mov	r1, r2
 8004406:	4648      	mov	r0, r9
 8004408:	f000 f91a 	bl	8004640 <_malloc_r>
 800440c:	9b00      	ldr	r3, [sp, #0]
 800440e:	4682      	mov	sl, r0
 8004410:	2800      	cmp	r0, #0
 8004412:	d059      	beq.n	80044c8 <__sfvwrite_r+0x308>
 8004414:	461a      	mov	r2, r3
 8004416:	6921      	ldr	r1, [r4, #16]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f7fc f901 	bl	8000620 <memcpy>
 800441e:	89a2      	ldrh	r2, [r4, #12]
 8004420:	9b00      	ldr	r3, [sp, #0]
 8004422:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442a:	81a2      	strh	r2, [r4, #12]
 800442c:	eb0a 0003 	add.w	r0, sl, r3
 8004430:	1afb      	subs	r3, r7, r3
 8004432:	f8c4 a010 	str.w	sl, [r4, #16]
 8004436:	6167      	str	r7, [r4, #20]
 8004438:	6020      	str	r0, [r4, #0]
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	4647      	mov	r7, r8
 800443e:	46c2      	mov	sl, r8
 8004440:	e717      	b.n	8004272 <__sfvwrite_r+0xb2>
 8004442:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004446:	4543      	cmp	r3, r8
 8004448:	bf28      	it	cs
 800444a:	4643      	movcs	r3, r8
 800444c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800444e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004452:	4648      	mov	r0, r9
 8004454:	fb03 f302 	mul.w	r3, r3, r2
 8004458:	69e1      	ldr	r1, [r4, #28]
 800445a:	465a      	mov	r2, fp
 800445c:	47b8      	blx	r7
 800445e:	2800      	cmp	r0, #0
 8004460:	f73f af13 	bgt.w	800428a <__sfvwrite_r+0xca>
 8004464:	e749      	b.n	80042fa <__sfvwrite_r+0x13a>
 8004466:	4662      	mov	r2, ip
 8004468:	4659      	mov	r1, fp
 800446a:	f8cd c004 	str.w	ip, [sp, #4]
 800446e:	f000 fbc7 	bl	8004c00 <memmove>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004478:	4463      	add	r3, ip
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	4648      	mov	r0, r9
 800447e:	4621      	mov	r1, r4
 8004480:	f7ff fc5e 	bl	8003d40 <_fflush_r>
 8004484:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004488:	2800      	cmp	r0, #0
 800448a:	f47f af36 	bne.w	80042fa <__sfvwrite_r+0x13a>
 800448e:	4667      	mov	r7, ip
 8004490:	e761      	b.n	8004356 <__sfvwrite_r+0x196>
 8004492:	4648      	mov	r0, r9
 8004494:	f000 fc7c 	bl	8004d90 <_realloc_r>
 8004498:	9b00      	ldr	r3, [sp, #0]
 800449a:	4682      	mov	sl, r0
 800449c:	2800      	cmp	r0, #0
 800449e:	d1c5      	bne.n	800442c <__sfvwrite_r+0x26c>
 80044a0:	4648      	mov	r0, r9
 80044a2:	6921      	ldr	r1, [r4, #16]
 80044a4:	f7ff fdb4 	bl	8004010 <_free_r>
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	220c      	movs	r2, #12
 80044ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f8c9 2000 	str.w	r2, [r9]
 80044b6:	e721      	b.n	80042fc <__sfvwrite_r+0x13c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	f10a 0801 	add.w	r8, sl, #1
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	e72e      	b.n	8004320 <__sfvwrite_r+0x160>
 80044c2:	f04f 30ff 	mov.w	r0, #4294967295
 80044c6:	e6ad      	b.n	8004224 <__sfvwrite_r+0x64>
 80044c8:	230c      	movs	r3, #12
 80044ca:	f8c9 3000 	str.w	r3, [r9]
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	e714      	b.n	80042fc <__sfvwrite_r+0x13c>
 80044d2:	bf00      	nop
 80044d4:	7ffffc00 	.word	0x7ffffc00
	...

080044e0 <_fwalk_reent>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80044e8:	d01f      	beq.n	800452a <_fwalk_reent+0x4a>
 80044ea:	4688      	mov	r8, r1
 80044ec:	4606      	mov	r6, r0
 80044ee:	f04f 0900 	mov.w	r9, #0
 80044f2:	687d      	ldr	r5, [r7, #4]
 80044f4:	68bc      	ldr	r4, [r7, #8]
 80044f6:	3d01      	subs	r5, #1
 80044f8:	d411      	bmi.n	800451e <_fwalk_reent+0x3e>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8004502:	d908      	bls.n	8004516 <_fwalk_reent+0x36>
 8004504:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004508:	3301      	adds	r3, #1
 800450a:	4621      	mov	r1, r4
 800450c:	4630      	mov	r0, r6
 800450e:	d002      	beq.n	8004516 <_fwalk_reent+0x36>
 8004510:	47c0      	blx	r8
 8004512:	ea49 0900 	orr.w	r9, r9, r0
 8004516:	1c6b      	adds	r3, r5, #1
 8004518:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800451c:	d1ed      	bne.n	80044fa <_fwalk_reent+0x1a>
 800451e:	683f      	ldr	r7, [r7, #0]
 8004520:	2f00      	cmp	r7, #0
 8004522:	d1e6      	bne.n	80044f2 <_fwalk_reent+0x12>
 8004524:	4648      	mov	r0, r9
 8004526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452a:	46b9      	mov	r9, r7
 800452c:	4648      	mov	r0, r9
 800452e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004532:	bf00      	nop
	...

08004540 <__locale_charset>:
 8004540:	4800      	ldr	r0, [pc, #0]	; (8004544 <__locale_charset+0x4>)
 8004542:	4770      	bx	lr
 8004544:	20000c54 	.word	0x20000c54
	...

08004550 <__locale_mb_cur_max>:
 8004550:	4b01      	ldr	r3, [pc, #4]	; (8004558 <__locale_mb_cur_max+0x8>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000c74 	.word	0x20000c74
 800455c:	00000000 	.word	0x00000000

08004560 <__smakebuf_r>:
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	b29a      	uxth	r2, r3
 8004564:	f012 0f02 	tst.w	r2, #2
 8004568:	d13c      	bne.n	80045e4 <__smakebuf_r+0x84>
 800456a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456c:	460c      	mov	r4, r1
 800456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004572:	2900      	cmp	r1, #0
 8004574:	b091      	sub	sp, #68	; 0x44
 8004576:	4605      	mov	r5, r0
 8004578:	db19      	blt.n	80045ae <__smakebuf_r+0x4e>
 800457a:	aa01      	add	r2, sp, #4
 800457c:	f7fd fb90 	bl	8001ca0 <_fstat_r>
 8004580:	2800      	cmp	r0, #0
 8004582:	db12      	blt.n	80045aa <__smakebuf_r+0x4a>
 8004584:	9b02      	ldr	r3, [sp, #8]
 8004586:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8004592:	fab7 f787 	clz	r7, r7
 8004596:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800459a:	d02a      	beq.n	80045f2 <__smakebuf_r+0x92>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80045a8:	e00b      	b.n	80045c2 <__smakebuf_r+0x62>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b6:	81a3      	strh	r3, [r4, #12]
 80045b8:	bf0c      	ite	eq
 80045ba:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80045be:	2640      	movne	r6, #64	; 0x40
 80045c0:	2700      	movs	r7, #0
 80045c2:	4628      	mov	r0, r5
 80045c4:	4631      	mov	r1, r6
 80045c6:	f000 f83b 	bl	8004640 <_malloc_r>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	b340      	cbz	r0, 8004620 <__smakebuf_r+0xc0>
 80045ce:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <__smakebuf_r+0xd8>)
 80045d0:	63ea      	str	r2, [r5, #60]	; 0x3c
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	6020      	str	r0, [r4, #0]
 80045da:	6120      	str	r0, [r4, #16]
 80045dc:	6166      	str	r6, [r4, #20]
 80045de:	b99f      	cbnz	r7, 8004608 <__smakebuf_r+0xa8>
 80045e0:	b011      	add	sp, #68	; 0x44
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 80045e8:	2201      	movs	r2, #1
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	610b      	str	r3, [r1, #16]
 80045ee:	614a      	str	r2, [r1, #20]
 80045f0:	4770      	bx	lr
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <__smakebuf_r+0xdc>)
 80045f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d1d0      	bne.n	800459c <__smakebuf_r+0x3c>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004600:	4333      	orrs	r3, r6
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	64e6      	str	r6, [r4, #76]	; 0x4c
 8004606:	e7dc      	b.n	80045c2 <__smakebuf_r+0x62>
 8004608:	4628      	mov	r0, r5
 800460a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800460e:	f7fd fb3f 	bl	8001c90 <_isatty_r>
 8004612:	2800      	cmp	r0, #0
 8004614:	d0e4      	beq.n	80045e0 <__smakebuf_r+0x80>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	e7df      	b.n	80045e0 <__smakebuf_r+0x80>
 8004620:	059a      	lsls	r2, r3, #22
 8004622:	d4dd      	bmi.n	80045e0 <__smakebuf_r+0x80>
 8004624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	2101      	movs	r1, #1
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	6122      	str	r2, [r4, #16]
 8004634:	6161      	str	r1, [r4, #20]
 8004636:	e7d3      	b.n	80045e0 <__smakebuf_r+0x80>
 8004638:	08003d71 	.word	0x08003d71
 800463c:	080052a1 	.word	0x080052a1

08004640 <_malloc_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	f101 050b 	add.w	r5, r1, #11
 8004648:	2d16      	cmp	r5, #22
 800464a:	b083      	sub	sp, #12
 800464c:	4606      	mov	r6, r0
 800464e:	d927      	bls.n	80046a0 <_malloc_r+0x60>
 8004650:	f035 0507 	bics.w	r5, r5, #7
 8004654:	f100 80b6 	bmi.w	80047c4 <_malloc_r+0x184>
 8004658:	42a9      	cmp	r1, r5
 800465a:	f200 80b3 	bhi.w	80047c4 <_malloc_r+0x184>
 800465e:	f000 fb87 	bl	8004d70 <__malloc_lock>
 8004662:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004666:	d222      	bcs.n	80046ae <_malloc_r+0x6e>
 8004668:	4fc2      	ldr	r7, [pc, #776]	; (8004974 <_malloc_r+0x334>)
 800466a:	08e8      	lsrs	r0, r5, #3
 800466c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8004670:	68dc      	ldr	r4, [r3, #12]
 8004672:	429c      	cmp	r4, r3
 8004674:	f000 81c9 	beq.w	8004a0a <_malloc_r+0x3ca>
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	68e1      	ldr	r1, [r4, #12]
 800467c:	68a5      	ldr	r5, [r4, #8]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	4423      	add	r3, r4
 8004684:	4630      	mov	r0, r6
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	60e9      	str	r1, [r5, #12]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	608d      	str	r5, [r1, #8]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	f000 fb75 	bl	8004d80 <__malloc_unlock>
 8004696:	3408      	adds	r4, #8
 8004698:	4620      	mov	r0, r4
 800469a:	b003      	add	sp, #12
 800469c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a0:	2910      	cmp	r1, #16
 80046a2:	f200 808f 	bhi.w	80047c4 <_malloc_r+0x184>
 80046a6:	f000 fb63 	bl	8004d70 <__malloc_lock>
 80046aa:	2510      	movs	r5, #16
 80046ac:	e7dc      	b.n	8004668 <_malloc_r+0x28>
 80046ae:	0a68      	lsrs	r0, r5, #9
 80046b0:	f000 808f 	beq.w	80047d2 <_malloc_r+0x192>
 80046b4:	2804      	cmp	r0, #4
 80046b6:	f200 8154 	bhi.w	8004962 <_malloc_r+0x322>
 80046ba:	09a8      	lsrs	r0, r5, #6
 80046bc:	3038      	adds	r0, #56	; 0x38
 80046be:	0041      	lsls	r1, r0, #1
 80046c0:	4fac      	ldr	r7, [pc, #688]	; (8004974 <_malloc_r+0x334>)
 80046c2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80046c6:	68cc      	ldr	r4, [r1, #12]
 80046c8:	42a1      	cmp	r1, r4
 80046ca:	d106      	bne.n	80046da <_malloc_r+0x9a>
 80046cc:	e00c      	b.n	80046e8 <_malloc_r+0xa8>
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	f280 8082 	bge.w	80047d8 <_malloc_r+0x198>
 80046d4:	68e4      	ldr	r4, [r4, #12]
 80046d6:	42a1      	cmp	r1, r4
 80046d8:	d006      	beq.n	80046e8 <_malloc_r+0xa8>
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	f023 0303 	bic.w	r3, r3, #3
 80046e0:	1b5a      	subs	r2, r3, r5
 80046e2:	2a0f      	cmp	r2, #15
 80046e4:	ddf3      	ble.n	80046ce <_malloc_r+0x8e>
 80046e6:	3801      	subs	r0, #1
 80046e8:	3001      	adds	r0, #1
 80046ea:	49a2      	ldr	r1, [pc, #648]	; (8004974 <_malloc_r+0x334>)
 80046ec:	693c      	ldr	r4, [r7, #16]
 80046ee:	f101 0e08 	add.w	lr, r1, #8
 80046f2:	4574      	cmp	r4, lr
 80046f4:	f000 817e 	beq.w	80049f4 <_malloc_r+0x3b4>
 80046f8:	6863      	ldr	r3, [r4, #4]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	1b5a      	subs	r2, r3, r5
 8004700:	2a0f      	cmp	r2, #15
 8004702:	f300 8164 	bgt.w	80049ce <_malloc_r+0x38e>
 8004706:	2a00      	cmp	r2, #0
 8004708:	f8c1 e014 	str.w	lr, [r1, #20]
 800470c:	f8c1 e010 	str.w	lr, [r1, #16]
 8004710:	da73      	bge.n	80047fa <_malloc_r+0x1ba>
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	f080 8139 	bcs.w	800498c <_malloc_r+0x34c>
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8004720:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8004724:	684a      	ldr	r2, [r1, #4]
 8004726:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800472a:	f8c4 9008 	str.w	r9, [r4, #8]
 800472e:	2301      	movs	r3, #1
 8004730:	fa03 f30c 	lsl.w	r3, r3, ip
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c4 800c 	str.w	r8, [r4, #12]
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	f8c8 4008 	str.w	r4, [r8, #8]
 8004740:	f8c9 400c 	str.w	r4, [r9, #12]
 8004744:	1082      	asrs	r2, r0, #2
 8004746:	2401      	movs	r4, #1
 8004748:	4094      	lsls	r4, r2
 800474a:	429c      	cmp	r4, r3
 800474c:	d862      	bhi.n	8004814 <_malloc_r+0x1d4>
 800474e:	4223      	tst	r3, r4
 8004750:	d106      	bne.n	8004760 <_malloc_r+0x120>
 8004752:	f020 0003 	bic.w	r0, r0, #3
 8004756:	0064      	lsls	r4, r4, #1
 8004758:	4223      	tst	r3, r4
 800475a:	f100 0004 	add.w	r0, r0, #4
 800475e:	d0fa      	beq.n	8004756 <_malloc_r+0x116>
 8004760:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8004764:	46c4      	mov	ip, r8
 8004766:	4681      	mov	r9, r0
 8004768:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800476c:	459c      	cmp	ip, r3
 800476e:	d107      	bne.n	8004780 <_malloc_r+0x140>
 8004770:	e142      	b.n	80049f8 <_malloc_r+0x3b8>
 8004772:	2900      	cmp	r1, #0
 8004774:	f280 8152 	bge.w	8004a1c <_malloc_r+0x3dc>
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	459c      	cmp	ip, r3
 800477c:	f000 813c 	beq.w	80049f8 <_malloc_r+0x3b8>
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	f022 0203 	bic.w	r2, r2, #3
 8004786:	1b51      	subs	r1, r2, r5
 8004788:	290f      	cmp	r1, #15
 800478a:	ddf2      	ble.n	8004772 <_malloc_r+0x132>
 800478c:	461c      	mov	r4, r3
 800478e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004792:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004796:	195a      	adds	r2, r3, r5
 8004798:	f045 0901 	orr.w	r9, r5, #1
 800479c:	f041 0501 	orr.w	r5, r1, #1
 80047a0:	f8c3 9004 	str.w	r9, [r3, #4]
 80047a4:	4630      	mov	r0, r6
 80047a6:	f8c8 c00c 	str.w	ip, [r8, #12]
 80047aa:	f8cc 8008 	str.w	r8, [ip, #8]
 80047ae:	617a      	str	r2, [r7, #20]
 80047b0:	613a      	str	r2, [r7, #16]
 80047b2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80047b6:	f8c2 e008 	str.w	lr, [r2, #8]
 80047ba:	6055      	str	r5, [r2, #4]
 80047bc:	5051      	str	r1, [r2, r1]
 80047be:	f000 fadf 	bl	8004d80 <__malloc_unlock>
 80047c2:	e769      	b.n	8004698 <_malloc_r+0x58>
 80047c4:	2400      	movs	r4, #0
 80047c6:	230c      	movs	r3, #12
 80047c8:	4620      	mov	r0, r4
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	b003      	add	sp, #12
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d2:	217e      	movs	r1, #126	; 0x7e
 80047d4:	203f      	movs	r0, #63	; 0x3f
 80047d6:	e773      	b.n	80046c0 <_malloc_r+0x80>
 80047d8:	4423      	add	r3, r4
 80047da:	68e1      	ldr	r1, [r4, #12]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68a5      	ldr	r5, [r4, #8]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	60e9      	str	r1, [r5, #12]
 80047e6:	4630      	mov	r0, r6
 80047e8:	608d      	str	r5, [r1, #8]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	f000 fac8 	bl	8004d80 <__malloc_unlock>
 80047f0:	3408      	adds	r4, #8
 80047f2:	4620      	mov	r0, r4
 80047f4:	b003      	add	sp, #12
 80047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	4423      	add	r3, r4
 80047fc:	4630      	mov	r0, r6
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	f000 fabb 	bl	8004d80 <__malloc_unlock>
 800480a:	3408      	adds	r4, #8
 800480c:	4620      	mov	r0, r4
 800480e:	b003      	add	sp, #12
 8004810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004814:	68bc      	ldr	r4, [r7, #8]
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	f023 0803 	bic.w	r8, r3, #3
 800481c:	4545      	cmp	r5, r8
 800481e:	d804      	bhi.n	800482a <_malloc_r+0x1ea>
 8004820:	ebc5 0308 	rsb	r3, r5, r8
 8004824:	2b0f      	cmp	r3, #15
 8004826:	f300 808c 	bgt.w	8004942 <_malloc_r+0x302>
 800482a:	4b53      	ldr	r3, [pc, #332]	; (8004978 <_malloc_r+0x338>)
 800482c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004988 <_malloc_r+0x348>
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f8da 3000 	ldr.w	r3, [sl]
 8004836:	3301      	adds	r3, #1
 8004838:	442a      	add	r2, r5
 800483a:	eb04 0b08 	add.w	fp, r4, r8
 800483e:	f000 8150 	beq.w	8004ae2 <_malloc_r+0x4a2>
 8004842:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004846:	320f      	adds	r2, #15
 8004848:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800484c:	f022 020f 	bic.w	r2, r2, #15
 8004850:	4611      	mov	r1, r2
 8004852:	4630      	mov	r0, r6
 8004854:	9201      	str	r2, [sp, #4]
 8004856:	f7fd fa33 	bl	8001cc0 <_sbrk_r>
 800485a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800485e:	4681      	mov	r9, r0
 8004860:	9a01      	ldr	r2, [sp, #4]
 8004862:	f000 80f5 	beq.w	8004a50 <_malloc_r+0x410>
 8004866:	4583      	cmp	fp, r0
 8004868:	f200 80ef 	bhi.w	8004a4a <_malloc_r+0x40a>
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <_malloc_r+0x33c>)
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	45cb      	cmp	fp, r9
 8004872:	4411      	add	r1, r2
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	f000 813d 	beq.w	8004af4 <_malloc_r+0x4b4>
 800487a:	f8da 0000 	ldr.w	r0, [sl]
 800487e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004988 <_malloc_r+0x348>
 8004882:	3001      	adds	r0, #1
 8004884:	bf1b      	ittet	ne
 8004886:	ebcb 0b09 	rsbne	fp, fp, r9
 800488a:	4459      	addne	r1, fp
 800488c:	f8ce 9000 	streq.w	r9, [lr]
 8004890:	6019      	strne	r1, [r3, #0]
 8004892:	f019 0107 	ands.w	r1, r9, #7
 8004896:	f000 8107 	beq.w	8004aa8 <_malloc_r+0x468>
 800489a:	f1c1 0008 	rsb	r0, r1, #8
 800489e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80048a2:	4481      	add	r9, r0
 80048a4:	3108      	adds	r1, #8
 80048a6:	444a      	add	r2, r9
 80048a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80048ac:	ebc2 0a01 	rsb	sl, r2, r1
 80048b0:	4651      	mov	r1, sl
 80048b2:	4630      	mov	r0, r6
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f7fd fa03 	bl	8001cc0 <_sbrk_r>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	f000 8127 	beq.w	8004b10 <_malloc_r+0x4d0>
 80048c2:	ebc9 0200 	rsb	r2, r9, r0
 80048c6:	4452      	add	r2, sl
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	f8c7 9008 	str.w	r9, [r7, #8]
 80048d2:	4451      	add	r1, sl
 80048d4:	42bc      	cmp	r4, r7
 80048d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80048da:	6019      	str	r1, [r3, #0]
 80048dc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800497c <_malloc_r+0x33c>
 80048e0:	d016      	beq.n	8004910 <_malloc_r+0x2d0>
 80048e2:	f1b8 0f0f 	cmp.w	r8, #15
 80048e6:	f240 80e2 	bls.w	8004aae <_malloc_r+0x46e>
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	f1a8 030c 	sub.w	r3, r8, #12
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	18e0      	adds	r0, r4, r3
 80048f6:	f002 0201 	and.w	r2, r2, #1
 80048fa:	f04f 0e05 	mov.w	lr, #5
 80048fe:	431a      	orrs	r2, r3
 8004900:	2b0f      	cmp	r3, #15
 8004902:	6062      	str	r2, [r4, #4]
 8004904:	f8c0 e004 	str.w	lr, [r0, #4]
 8004908:	f8c0 e008 	str.w	lr, [r0, #8]
 800490c:	f200 8104 	bhi.w	8004b18 <_malloc_r+0x4d8>
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <_malloc_r+0x340>)
 8004912:	68bc      	ldr	r4, [r7, #8]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4291      	cmp	r1, r2
 8004918:	bf88      	it	hi
 800491a:	6019      	strhi	r1, [r3, #0]
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <_malloc_r+0x344>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4291      	cmp	r1, r2
 8004922:	6862      	ldr	r2, [r4, #4]
 8004924:	bf88      	it	hi
 8004926:	6019      	strhi	r1, [r3, #0]
 8004928:	f022 0203 	bic.w	r2, r2, #3
 800492c:	4295      	cmp	r5, r2
 800492e:	eba2 0305 	sub.w	r3, r2, r5
 8004932:	d801      	bhi.n	8004938 <_malloc_r+0x2f8>
 8004934:	2b0f      	cmp	r3, #15
 8004936:	dc04      	bgt.n	8004942 <_malloc_r+0x302>
 8004938:	4630      	mov	r0, r6
 800493a:	f000 fa21 	bl	8004d80 <__malloc_unlock>
 800493e:	2400      	movs	r4, #0
 8004940:	e6aa      	b.n	8004698 <_malloc_r+0x58>
 8004942:	1962      	adds	r2, r4, r5
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	f045 0501 	orr.w	r5, r5, #1
 800494c:	6065      	str	r5, [r4, #4]
 800494e:	4630      	mov	r0, r6
 8004950:	60ba      	str	r2, [r7, #8]
 8004952:	6053      	str	r3, [r2, #4]
 8004954:	f000 fa14 	bl	8004d80 <__malloc_unlock>
 8004958:	3408      	adds	r4, #8
 800495a:	4620      	mov	r0, r4
 800495c:	b003      	add	sp, #12
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	2814      	cmp	r0, #20
 8004964:	d969      	bls.n	8004a3a <_malloc_r+0x3fa>
 8004966:	2854      	cmp	r0, #84	; 0x54
 8004968:	f200 8097 	bhi.w	8004a9a <_malloc_r+0x45a>
 800496c:	0b28      	lsrs	r0, r5, #12
 800496e:	306e      	adds	r0, #110	; 0x6e
 8004970:	0041      	lsls	r1, r0, #1
 8004972:	e6a5      	b.n	80046c0 <_malloc_r+0x80>
 8004974:	20000c78 	.word	0x20000c78
 8004978:	2000afd8 	.word	0x2000afd8
 800497c:	2000afdc 	.word	0x2000afdc
 8004980:	2000afd4 	.word	0x2000afd4
 8004984:	2000afd0 	.word	0x2000afd0
 8004988:	20001084 	.word	0x20001084
 800498c:	0a5a      	lsrs	r2, r3, #9
 800498e:	2a04      	cmp	r2, #4
 8004990:	d956      	bls.n	8004a40 <_malloc_r+0x400>
 8004992:	2a14      	cmp	r2, #20
 8004994:	f200 80a7 	bhi.w	8004ae6 <_malloc_r+0x4a6>
 8004998:	325b      	adds	r2, #91	; 0x5b
 800499a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800499e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80049a2:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004b58 <_malloc_r+0x518>
 80049a6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80049aa:	4561      	cmp	r1, ip
 80049ac:	f000 8085 	beq.w	8004aba <_malloc_r+0x47a>
 80049b0:	684a      	ldr	r2, [r1, #4]
 80049b2:	f022 0203 	bic.w	r2, r2, #3
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d202      	bcs.n	80049c0 <_malloc_r+0x380>
 80049ba:	6889      	ldr	r1, [r1, #8]
 80049bc:	458c      	cmp	ip, r1
 80049be:	d1f7      	bne.n	80049b0 <_malloc_r+0x370>
 80049c0:	68ca      	ldr	r2, [r1, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60e2      	str	r2, [r4, #12]
 80049c6:	60a1      	str	r1, [r4, #8]
 80049c8:	6094      	str	r4, [r2, #8]
 80049ca:	60cc      	str	r4, [r1, #12]
 80049cc:	e6ba      	b.n	8004744 <_malloc_r+0x104>
 80049ce:	1963      	adds	r3, r4, r5
 80049d0:	f042 0701 	orr.w	r7, r2, #1
 80049d4:	f045 0501 	orr.w	r5, r5, #1
 80049d8:	6065      	str	r5, [r4, #4]
 80049da:	4630      	mov	r0, r6
 80049dc:	614b      	str	r3, [r1, #20]
 80049de:	610b      	str	r3, [r1, #16]
 80049e0:	f8c3 e00c 	str.w	lr, [r3, #12]
 80049e4:	f8c3 e008 	str.w	lr, [r3, #8]
 80049e8:	605f      	str	r7, [r3, #4]
 80049ea:	509a      	str	r2, [r3, r2]
 80049ec:	3408      	adds	r4, #8
 80049ee:	f000 f9c7 	bl	8004d80 <__malloc_unlock>
 80049f2:	e651      	b.n	8004698 <_malloc_r+0x58>
 80049f4:	684b      	ldr	r3, [r1, #4]
 80049f6:	e6a5      	b.n	8004744 <_malloc_r+0x104>
 80049f8:	f109 0901 	add.w	r9, r9, #1
 80049fc:	f019 0f03 	tst.w	r9, #3
 8004a00:	f10c 0c08 	add.w	ip, ip, #8
 8004a04:	f47f aeb0 	bne.w	8004768 <_malloc_r+0x128>
 8004a08:	e02b      	b.n	8004a62 <_malloc_r+0x422>
 8004a0a:	f104 0308 	add.w	r3, r4, #8
 8004a0e:	6964      	ldr	r4, [r4, #20]
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	bf08      	it	eq
 8004a14:	3002      	addeq	r0, #2
 8004a16:	f43f ae68 	beq.w	80046ea <_malloc_r+0xaa>
 8004a1a:	e62d      	b.n	8004678 <_malloc_r+0x38>
 8004a1c:	441a      	add	r2, r3
 8004a1e:	461c      	mov	r4, r3
 8004a20:	6851      	ldr	r1, [r2, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004a28:	f041 0101 	orr.w	r1, r1, #1
 8004a2c:	6051      	str	r1, [r2, #4]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	60eb      	str	r3, [r5, #12]
 8004a32:	609d      	str	r5, [r3, #8]
 8004a34:	f000 f9a4 	bl	8004d80 <__malloc_unlock>
 8004a38:	e62e      	b.n	8004698 <_malloc_r+0x58>
 8004a3a:	305b      	adds	r0, #91	; 0x5b
 8004a3c:	0041      	lsls	r1, r0, #1
 8004a3e:	e63f      	b.n	80046c0 <_malloc_r+0x80>
 8004a40:	099a      	lsrs	r2, r3, #6
 8004a42:	3238      	adds	r2, #56	; 0x38
 8004a44:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004a48:	e7a9      	b.n	800499e <_malloc_r+0x35e>
 8004a4a:	42bc      	cmp	r4, r7
 8004a4c:	f43f af0e 	beq.w	800486c <_malloc_r+0x22c>
 8004a50:	68bc      	ldr	r4, [r7, #8]
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	f022 0203 	bic.w	r2, r2, #3
 8004a58:	e768      	b.n	800492c <_malloc_r+0x2ec>
 8004a5a:	f8d8 8000 	ldr.w	r8, [r8]
 8004a5e:	4598      	cmp	r8, r3
 8004a60:	d177      	bne.n	8004b52 <_malloc_r+0x512>
 8004a62:	f010 0f03 	tst.w	r0, #3
 8004a66:	f1a8 0308 	sub.w	r3, r8, #8
 8004a6a:	f100 30ff 	add.w	r0, r0, #4294967295
 8004a6e:	d1f4      	bne.n	8004a5a <_malloc_r+0x41a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	ea23 0304 	bic.w	r3, r3, r4
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	0064      	lsls	r4, r4, #1
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	f63f aeca 	bhi.w	8004814 <_malloc_r+0x1d4>
 8004a80:	2c00      	cmp	r4, #0
 8004a82:	f43f aec7 	beq.w	8004814 <_malloc_r+0x1d4>
 8004a86:	4223      	tst	r3, r4
 8004a88:	4648      	mov	r0, r9
 8004a8a:	f47f ae69 	bne.w	8004760 <_malloc_r+0x120>
 8004a8e:	0064      	lsls	r4, r4, #1
 8004a90:	4223      	tst	r3, r4
 8004a92:	f100 0004 	add.w	r0, r0, #4
 8004a96:	d0fa      	beq.n	8004a8e <_malloc_r+0x44e>
 8004a98:	e662      	b.n	8004760 <_malloc_r+0x120>
 8004a9a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8004a9e:	d818      	bhi.n	8004ad2 <_malloc_r+0x492>
 8004aa0:	0be8      	lsrs	r0, r5, #15
 8004aa2:	3077      	adds	r0, #119	; 0x77
 8004aa4:	0041      	lsls	r1, r0, #1
 8004aa6:	e60b      	b.n	80046c0 <_malloc_r+0x80>
 8004aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aac:	e6fb      	b.n	80048a6 <_malloc_r+0x266>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f8c9 3004 	str.w	r3, [r9, #4]
 8004ab4:	464c      	mov	r4, r9
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	e738      	b.n	800492c <_malloc_r+0x2ec>
 8004aba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004abe:	1092      	asrs	r2, r2, #2
 8004ac0:	f04f 0c01 	mov.w	ip, #1
 8004ac4:	fa0c f202 	lsl.w	r2, ip, r2
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ace:	460a      	mov	r2, r1
 8004ad0:	e778      	b.n	80049c4 <_malloc_r+0x384>
 8004ad2:	f240 5354 	movw	r3, #1364	; 0x554
 8004ad6:	4298      	cmp	r0, r3
 8004ad8:	d817      	bhi.n	8004b0a <_malloc_r+0x4ca>
 8004ada:	0ca8      	lsrs	r0, r5, #18
 8004adc:	307c      	adds	r0, #124	; 0x7c
 8004ade:	0041      	lsls	r1, r0, #1
 8004ae0:	e5ee      	b.n	80046c0 <_malloc_r+0x80>
 8004ae2:	3210      	adds	r2, #16
 8004ae4:	e6b4      	b.n	8004850 <_malloc_r+0x210>
 8004ae6:	2a54      	cmp	r2, #84	; 0x54
 8004ae8:	d81e      	bhi.n	8004b28 <_malloc_r+0x4e8>
 8004aea:	0b1a      	lsrs	r2, r3, #12
 8004aec:	326e      	adds	r2, #110	; 0x6e
 8004aee:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004af2:	e754      	b.n	800499e <_malloc_r+0x35e>
 8004af4:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8004af8:	2800      	cmp	r0, #0
 8004afa:	f47f aebe 	bne.w	800487a <_malloc_r+0x23a>
 8004afe:	4442      	add	r2, r8
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	e702      	b.n	8004910 <_malloc_r+0x2d0>
 8004b0a:	21fc      	movs	r1, #252	; 0xfc
 8004b0c:	207e      	movs	r0, #126	; 0x7e
 8004b0e:	e5d7      	b.n	80046c0 <_malloc_r+0x80>
 8004b10:	2201      	movs	r2, #1
 8004b12:	f04f 0a00 	mov.w	sl, #0
 8004b16:	e6d9      	b.n	80048cc <_malloc_r+0x28c>
 8004b18:	f104 0108 	add.w	r1, r4, #8
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff fa77 	bl	8004010 <_free_r>
 8004b22:	f8da 1000 	ldr.w	r1, [sl]
 8004b26:	e6f3      	b.n	8004910 <_malloc_r+0x2d0>
 8004b28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b2c:	d804      	bhi.n	8004b38 <_malloc_r+0x4f8>
 8004b2e:	0bda      	lsrs	r2, r3, #15
 8004b30:	3277      	adds	r2, #119	; 0x77
 8004b32:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004b36:	e732      	b.n	800499e <_malloc_r+0x35e>
 8004b38:	f240 5154 	movw	r1, #1364	; 0x554
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d804      	bhi.n	8004b4a <_malloc_r+0x50a>
 8004b40:	0c9a      	lsrs	r2, r3, #18
 8004b42:	327c      	adds	r2, #124	; 0x7c
 8004b44:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004b48:	e729      	b.n	800499e <_malloc_r+0x35e>
 8004b4a:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8004b4e:	227e      	movs	r2, #126	; 0x7e
 8004b50:	e725      	b.n	800499e <_malloc_r+0x35e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	e790      	b.n	8004a78 <_malloc_r+0x438>
 8004b56:	bf00      	nop
 8004b58:	20000c78 	.word	0x20000c78
 8004b5c:	00000000 	.word	0x00000000

08004b60 <memchr>:
 8004b60:	0783      	lsls	r3, r0, #30
 8004b62:	b470      	push	{r4, r5, r6}
 8004b64:	b2c9      	uxtb	r1, r1
 8004b66:	d040      	beq.n	8004bea <memchr+0x8a>
 8004b68:	1e54      	subs	r4, r2, #1
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	d03f      	beq.n	8004bee <memchr+0x8e>
 8004b6e:	7803      	ldrb	r3, [r0, #0]
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf18      	it	ne
 8004b74:	1c43      	addne	r3, r0, #1
 8004b76:	d106      	bne.n	8004b86 <memchr+0x26>
 8004b78:	e01d      	b.n	8004bb6 <memchr+0x56>
 8004b7a:	b1f4      	cbz	r4, 8004bba <memchr+0x5a>
 8004b7c:	7802      	ldrb	r2, [r0, #0]
 8004b7e:	428a      	cmp	r2, r1
 8004b80:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b84:	d017      	beq.n	8004bb6 <memchr+0x56>
 8004b86:	f013 0f03 	tst.w	r3, #3
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f103 0301 	add.w	r3, r3, #1
 8004b90:	d1f3      	bne.n	8004b7a <memchr+0x1a>
 8004b92:	2c03      	cmp	r4, #3
 8004b94:	d814      	bhi.n	8004bc0 <memchr+0x60>
 8004b96:	b184      	cbz	r4, 8004bba <memchr+0x5a>
 8004b98:	7803      	ldrb	r3, [r0, #0]
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	d00b      	beq.n	8004bb6 <memchr+0x56>
 8004b9e:	1905      	adds	r5, r0, r4
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	e002      	b.n	8004baa <memchr+0x4a>
 8004ba4:	7802      	ldrb	r2, [r0, #0]
 8004ba6:	428a      	cmp	r2, r1
 8004ba8:	d005      	beq.n	8004bb6 <memchr+0x56>
 8004baa:	42ab      	cmp	r3, r5
 8004bac:	4618      	mov	r0, r3
 8004bae:	f103 0301 	add.w	r3, r3, #1
 8004bb2:	d1f7      	bne.n	8004ba4 <memchr+0x44>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	bc70      	pop	{r4, r5, r6}
 8004bb8:	4770      	bx	lr
 8004bba:	4620      	mov	r0, r4
 8004bbc:	bc70      	pop	{r4, r5, r6}
 8004bbe:	4770      	bx	lr
 8004bc0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004bca:	4610      	mov	r0, r2
 8004bcc:	3204      	adds	r2, #4
 8004bce:	6803      	ldr	r3, [r0, #0]
 8004bd0:	4073      	eors	r3, r6
 8004bd2:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8004bd6:	ea25 0303 	bic.w	r3, r5, r3
 8004bda:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004bde:	d1da      	bne.n	8004b96 <memchr+0x36>
 8004be0:	3c04      	subs	r4, #4
 8004be2:	2c03      	cmp	r4, #3
 8004be4:	4610      	mov	r0, r2
 8004be6:	d8f0      	bhi.n	8004bca <memchr+0x6a>
 8004be8:	e7d5      	b.n	8004b96 <memchr+0x36>
 8004bea:	4614      	mov	r4, r2
 8004bec:	e7d1      	b.n	8004b92 <memchr+0x32>
 8004bee:	4610      	mov	r0, r2
 8004bf0:	e7e1      	b.n	8004bb6 <memchr+0x56>
 8004bf2:	bf00      	nop
	...

08004c00 <memmove>:
 8004c00:	4288      	cmp	r0, r1
 8004c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c04:	d90d      	bls.n	8004c22 <memmove+0x22>
 8004c06:	188b      	adds	r3, r1, r2
 8004c08:	4298      	cmp	r0, r3
 8004c0a:	d20a      	bcs.n	8004c22 <memmove+0x22>
 8004c0c:	1881      	adds	r1, r0, r2
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	d054      	beq.n	8004cbc <memmove+0xbc>
 8004c12:	1a9a      	subs	r2, r3, r2
 8004c14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d1f9      	bne.n	8004c14 <memmove+0x14>
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c22:	2a0f      	cmp	r2, #15
 8004c24:	d948      	bls.n	8004cb8 <memmove+0xb8>
 8004c26:	ea40 0301 	orr.w	r3, r0, r1
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d147      	bne.n	8004cbe <memmove+0xbe>
 8004c2e:	f100 0410 	add.w	r4, r0, #16
 8004c32:	f101 0310 	add.w	r3, r1, #16
 8004c36:	4615      	mov	r5, r2
 8004c38:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8004c3c:	f844 6c10 	str.w	r6, [r4, #-16]
 8004c40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8004c44:	f844 6c0c 	str.w	r6, [r4, #-12]
 8004c48:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8004c4c:	f844 6c08 	str.w	r6, [r4, #-8]
 8004c50:	3d10      	subs	r5, #16
 8004c52:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8004c56:	f844 6c04 	str.w	r6, [r4, #-4]
 8004c5a:	2d0f      	cmp	r5, #15
 8004c5c:	f103 0310 	add.w	r3, r3, #16
 8004c60:	f104 0410 	add.w	r4, r4, #16
 8004c64:	d8e8      	bhi.n	8004c38 <memmove+0x38>
 8004c66:	f1a2 0310 	sub.w	r3, r2, #16
 8004c6a:	f023 030f 	bic.w	r3, r3, #15
 8004c6e:	f002 0e0f 	and.w	lr, r2, #15
 8004c72:	3310      	adds	r3, #16
 8004c74:	f1be 0f03 	cmp.w	lr, #3
 8004c78:	4419      	add	r1, r3
 8004c7a:	4403      	add	r3, r0
 8004c7c:	d921      	bls.n	8004cc2 <memmove+0xc2>
 8004c7e:	1f1e      	subs	r6, r3, #4
 8004c80:	460d      	mov	r5, r1
 8004c82:	4674      	mov	r4, lr
 8004c84:	3c04      	subs	r4, #4
 8004c86:	f855 7b04 	ldr.w	r7, [r5], #4
 8004c8a:	f846 7f04 	str.w	r7, [r6, #4]!
 8004c8e:	2c03      	cmp	r4, #3
 8004c90:	d8f8      	bhi.n	8004c84 <memmove+0x84>
 8004c92:	f1ae 0404 	sub.w	r4, lr, #4
 8004c96:	f024 0403 	bic.w	r4, r4, #3
 8004c9a:	3404      	adds	r4, #4
 8004c9c:	4423      	add	r3, r4
 8004c9e:	4421      	add	r1, r4
 8004ca0:	f002 0203 	and.w	r2, r2, #3
 8004ca4:	b152      	cbz	r2, 8004cbc <memmove+0xbc>
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	440a      	add	r2, r1
 8004caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f9      	bne.n	8004caa <memmove+0xaa>
 8004cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb8:	4603      	mov	r3, r0
 8004cba:	e7f3      	b.n	8004ca4 <memmove+0xa4>
 8004cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	e7f1      	b.n	8004ca6 <memmove+0xa6>
 8004cc2:	4672      	mov	r2, lr
 8004cc4:	e7ee      	b.n	8004ca4 <memmove+0xa4>
 8004cc6:	bf00      	nop
	...

08004cd0 <memset>:
 8004cd0:	b470      	push	{r4, r5, r6}
 8004cd2:	0784      	lsls	r4, r0, #30
 8004cd4:	d046      	beq.n	8004d64 <memset+0x94>
 8004cd6:	1e54      	subs	r4, r2, #1
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	d041      	beq.n	8004d60 <memset+0x90>
 8004cdc:	b2cd      	uxtb	r5, r1
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e002      	b.n	8004ce8 <memset+0x18>
 8004ce2:	1e62      	subs	r2, r4, #1
 8004ce4:	b3e4      	cbz	r4, 8004d60 <memset+0x90>
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	f803 5b01 	strb.w	r5, [r3], #1
 8004cec:	079a      	lsls	r2, r3, #30
 8004cee:	d1f8      	bne.n	8004ce2 <memset+0x12>
 8004cf0:	2c03      	cmp	r4, #3
 8004cf2:	d92e      	bls.n	8004d52 <memset+0x82>
 8004cf4:	b2cd      	uxtb	r5, r1
 8004cf6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004cfa:	2c0f      	cmp	r4, #15
 8004cfc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004d00:	d919      	bls.n	8004d36 <memset+0x66>
 8004d02:	f103 0210 	add.w	r2, r3, #16
 8004d06:	4626      	mov	r6, r4
 8004d08:	3e10      	subs	r6, #16
 8004d0a:	2e0f      	cmp	r6, #15
 8004d0c:	f842 5c10 	str.w	r5, [r2, #-16]
 8004d10:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004d14:	f842 5c08 	str.w	r5, [r2, #-8]
 8004d18:	f842 5c04 	str.w	r5, [r2, #-4]
 8004d1c:	f102 0210 	add.w	r2, r2, #16
 8004d20:	d8f2      	bhi.n	8004d08 <memset+0x38>
 8004d22:	f1a4 0210 	sub.w	r2, r4, #16
 8004d26:	f022 020f 	bic.w	r2, r2, #15
 8004d2a:	f004 040f 	and.w	r4, r4, #15
 8004d2e:	3210      	adds	r2, #16
 8004d30:	2c03      	cmp	r4, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	d90d      	bls.n	8004d52 <memset+0x82>
 8004d36:	461e      	mov	r6, r3
 8004d38:	4622      	mov	r2, r4
 8004d3a:	3a04      	subs	r2, #4
 8004d3c:	2a03      	cmp	r2, #3
 8004d3e:	f846 5b04 	str.w	r5, [r6], #4
 8004d42:	d8fa      	bhi.n	8004d3a <memset+0x6a>
 8004d44:	1f22      	subs	r2, r4, #4
 8004d46:	f022 0203 	bic.w	r2, r2, #3
 8004d4a:	3204      	adds	r2, #4
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f004 0403 	and.w	r4, r4, #3
 8004d52:	b12c      	cbz	r4, 8004d60 <memset+0x90>
 8004d54:	b2c9      	uxtb	r1, r1
 8004d56:	441c      	add	r4, r3
 8004d58:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d1fb      	bne.n	8004d58 <memset+0x88>
 8004d60:	bc70      	pop	{r4, r5, r6}
 8004d62:	4770      	bx	lr
 8004d64:	4614      	mov	r4, r2
 8004d66:	4603      	mov	r3, r0
 8004d68:	e7c2      	b.n	8004cf0 <memset+0x20>
 8004d6a:	bf00      	nop
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <__malloc_lock>:
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
	...

08004d80 <__malloc_unlock>:
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
	...

08004d90 <_realloc_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	4617      	mov	r7, r2
 8004d96:	b083      	sub	sp, #12
 8004d98:	460e      	mov	r6, r1
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	f000 80e7 	beq.w	8004f6e <_realloc_r+0x1de>
 8004da0:	4681      	mov	r9, r0
 8004da2:	f107 050b 	add.w	r5, r7, #11
 8004da6:	f7ff ffe3 	bl	8004d70 <__malloc_lock>
 8004daa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004dae:	2d16      	cmp	r5, #22
 8004db0:	f023 0403 	bic.w	r4, r3, #3
 8004db4:	f1a6 0808 	sub.w	r8, r6, #8
 8004db8:	d84c      	bhi.n	8004e54 <_realloc_r+0xc4>
 8004dba:	2210      	movs	r2, #16
 8004dbc:	4615      	mov	r5, r2
 8004dbe:	42af      	cmp	r7, r5
 8004dc0:	d84d      	bhi.n	8004e5e <_realloc_r+0xce>
 8004dc2:	4294      	cmp	r4, r2
 8004dc4:	f280 8084 	bge.w	8004ed0 <_realloc_r+0x140>
 8004dc8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8005178 <_realloc_r+0x3e8>
 8004dcc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004dd0:	eb08 0104 	add.w	r1, r8, r4
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	f000 80d6 	beq.w	8004f86 <_realloc_r+0x1f6>
 8004dda:	6848      	ldr	r0, [r1, #4]
 8004ddc:	f020 0e01 	bic.w	lr, r0, #1
 8004de0:	448e      	add	lr, r1
 8004de2:	f8de e004 	ldr.w	lr, [lr, #4]
 8004de6:	f01e 0f01 	tst.w	lr, #1
 8004dea:	d13f      	bne.n	8004e6c <_realloc_r+0xdc>
 8004dec:	f020 0003 	bic.w	r0, r0, #3
 8004df0:	4420      	add	r0, r4
 8004df2:	4290      	cmp	r0, r2
 8004df4:	f280 80c1 	bge.w	8004f7a <_realloc_r+0x1ea>
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	f100 808f 	bmi.w	8004f1c <_realloc_r+0x18c>
 8004dfe:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004e02:	ebc3 0a08 	rsb	sl, r3, r8
 8004e06:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	eb00 0e03 	add.w	lr, r0, r3
 8004e12:	4596      	cmp	lr, r2
 8004e14:	db34      	blt.n	8004e80 <_realloc_r+0xf0>
 8004e16:	68cb      	ldr	r3, [r1, #12]
 8004e18:	688a      	ldr	r2, [r1, #8]
 8004e1a:	4657      	mov	r7, sl
 8004e1c:	60d3      	str	r3, [r2, #12]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004e24:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004e28:	60cb      	str	r3, [r1, #12]
 8004e2a:	1f22      	subs	r2, r4, #4
 8004e2c:	2a24      	cmp	r2, #36	; 0x24
 8004e2e:	6099      	str	r1, [r3, #8]
 8004e30:	f200 8136 	bhi.w	80050a0 <_realloc_r+0x310>
 8004e34:	2a13      	cmp	r2, #19
 8004e36:	f240 80fd 	bls.w	8005034 <_realloc_r+0x2a4>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	f8ca 3008 	str.w	r3, [sl, #8]
 8004e40:	6873      	ldr	r3, [r6, #4]
 8004e42:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e46:	2a1b      	cmp	r2, #27
 8004e48:	f200 8140 	bhi.w	80050cc <_realloc_r+0x33c>
 8004e4c:	3608      	adds	r6, #8
 8004e4e:	f10a 0310 	add.w	r3, sl, #16
 8004e52:	e0f0      	b.n	8005036 <_realloc_r+0x2a6>
 8004e54:	f025 0507 	bic.w	r5, r5, #7
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	daaf      	bge.n	8004dbe <_realloc_r+0x2e>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	2000      	movs	r0, #0
 8004e62:	f8c9 3000 	str.w	r3, [r9]
 8004e66:	b003      	add	sp, #12
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	07d9      	lsls	r1, r3, #31
 8004e6e:	d455      	bmi.n	8004f1c <_realloc_r+0x18c>
 8004e70:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004e74:	ebc3 0a08 	rsb	sl, r3, r8
 8004e78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	4423      	add	r3, r4
 8004e82:	4293      	cmp	r3, r2
 8004e84:	db4a      	blt.n	8004f1c <_realloc_r+0x18c>
 8004e86:	4657      	mov	r7, sl
 8004e88:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004e8c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8004e90:	1f22      	subs	r2, r4, #4
 8004e92:	2a24      	cmp	r2, #36	; 0x24
 8004e94:	60c1      	str	r1, [r0, #12]
 8004e96:	6088      	str	r0, [r1, #8]
 8004e98:	f200 810e 	bhi.w	80050b8 <_realloc_r+0x328>
 8004e9c:	2a13      	cmp	r2, #19
 8004e9e:	f240 8109 	bls.w	80050b4 <_realloc_r+0x324>
 8004ea2:	6831      	ldr	r1, [r6, #0]
 8004ea4:	f8ca 1008 	str.w	r1, [sl, #8]
 8004ea8:	6871      	ldr	r1, [r6, #4]
 8004eaa:	f8ca 100c 	str.w	r1, [sl, #12]
 8004eae:	2a1b      	cmp	r2, #27
 8004eb0:	f200 8121 	bhi.w	80050f6 <_realloc_r+0x366>
 8004eb4:	3608      	adds	r6, #8
 8004eb6:	f10a 0210 	add.w	r2, sl, #16
 8004eba:	6831      	ldr	r1, [r6, #0]
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	6871      	ldr	r1, [r6, #4]
 8004ec0:	6051      	str	r1, [r2, #4]
 8004ec2:	68b1      	ldr	r1, [r6, #8]
 8004ec4:	6091      	str	r1, [r2, #8]
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004ecc:	463e      	mov	r6, r7
 8004ece:	46d0      	mov	r8, sl
 8004ed0:	1b62      	subs	r2, r4, r5
 8004ed2:	2a0f      	cmp	r2, #15
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	d80e      	bhi.n	8004ef8 <_realloc_r+0x168>
 8004eda:	4323      	orrs	r3, r4
 8004edc:	4444      	add	r4, r8
 8004ede:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6063      	str	r3, [r4, #4]
 8004eea:	4648      	mov	r0, r9
 8004eec:	f7ff ff48 	bl	8004d80 <__malloc_unlock>
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	b003      	add	sp, #12
 8004ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef8:	eb08 0105 	add.w	r1, r8, r5
 8004efc:	431d      	orrs	r5, r3
 8004efe:	f042 0301 	orr.w	r3, r2, #1
 8004f02:	440a      	add	r2, r1
 8004f04:	f8c8 5004 	str.w	r5, [r8, #4]
 8004f08:	604b      	str	r3, [r1, #4]
 8004f0a:	6853      	ldr	r3, [r2, #4]
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	3108      	adds	r1, #8
 8004f12:	6053      	str	r3, [r2, #4]
 8004f14:	4648      	mov	r0, r9
 8004f16:	f7ff f87b 	bl	8004010 <_free_r>
 8004f1a:	e7e6      	b.n	8004eea <_realloc_r+0x15a>
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4648      	mov	r0, r9
 8004f20:	f7ff fb8e 	bl	8004640 <_malloc_r>
 8004f24:	4607      	mov	r7, r0
 8004f26:	b1d8      	cbz	r0, 8004f60 <_realloc_r+0x1d0>
 8004f28:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	4442      	add	r2, r8
 8004f32:	f1a0 0108 	sub.w	r1, r0, #8
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f000 80ac 	beq.w	8005094 <_realloc_r+0x304>
 8004f3c:	1f22      	subs	r2, r4, #4
 8004f3e:	2a24      	cmp	r2, #36	; 0x24
 8004f40:	f200 8099 	bhi.w	8005076 <_realloc_r+0x2e6>
 8004f44:	2a13      	cmp	r2, #19
 8004f46:	d86a      	bhi.n	800501e <_realloc_r+0x28e>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	6811      	ldr	r1, [r2, #0]
 8004f4e:	6019      	str	r1, [r3, #0]
 8004f50:	6851      	ldr	r1, [r2, #4]
 8004f52:	6059      	str	r1, [r3, #4]
 8004f54:	6892      	ldr	r2, [r2, #8]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4648      	mov	r0, r9
 8004f5c:	f7ff f858 	bl	8004010 <_free_r>
 8004f60:	4648      	mov	r0, r9
 8004f62:	f7ff ff0d 	bl	8004d80 <__malloc_unlock>
 8004f66:	4638      	mov	r0, r7
 8004f68:	b003      	add	sp, #12
 8004f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6e:	4611      	mov	r1, r2
 8004f70:	b003      	add	sp, #12
 8004f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f76:	f7ff bb63 	b.w	8004640 <_malloc_r>
 8004f7a:	68ca      	ldr	r2, [r1, #12]
 8004f7c:	6889      	ldr	r1, [r1, #8]
 8004f7e:	4604      	mov	r4, r0
 8004f80:	60ca      	str	r2, [r1, #12]
 8004f82:	6091      	str	r1, [r2, #8]
 8004f84:	e7a4      	b.n	8004ed0 <_realloc_r+0x140>
 8004f86:	6841      	ldr	r1, [r0, #4]
 8004f88:	f021 0103 	bic.w	r1, r1, #3
 8004f8c:	4421      	add	r1, r4
 8004f8e:	f105 0010 	add.w	r0, r5, #16
 8004f92:	4281      	cmp	r1, r0
 8004f94:	da5b      	bge.n	800504e <_realloc_r+0x2be>
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d4c0      	bmi.n	8004f1c <_realloc_r+0x18c>
 8004f9a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004f9e:	ebc3 0a08 	rsb	sl, r3, r8
 8004fa2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	eb01 0c03 	add.w	ip, r1, r3
 8004fae:	4560      	cmp	r0, ip
 8004fb0:	f73f af66 	bgt.w	8004e80 <_realloc_r+0xf0>
 8004fb4:	4657      	mov	r7, sl
 8004fb6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004fba:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004fbe:	1f22      	subs	r2, r4, #4
 8004fc0:	2a24      	cmp	r2, #36	; 0x24
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	6099      	str	r1, [r3, #8]
 8004fc6:	f200 80b8 	bhi.w	800513a <_realloc_r+0x3aa>
 8004fca:	2a13      	cmp	r2, #19
 8004fcc:	f240 80a9 	bls.w	8005122 <_realloc_r+0x392>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	f8ca 3008 	str.w	r3, [sl, #8]
 8004fd6:	6873      	ldr	r3, [r6, #4]
 8004fd8:	f8ca 300c 	str.w	r3, [sl, #12]
 8004fdc:	2a1b      	cmp	r2, #27
 8004fde:	f200 80b5 	bhi.w	800514c <_realloc_r+0x3bc>
 8004fe2:	3608      	adds	r6, #8
 8004fe4:	f10a 0310 	add.w	r3, sl, #16
 8004fe8:	6832      	ldr	r2, [r6, #0]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	6872      	ldr	r2, [r6, #4]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	68b2      	ldr	r2, [r6, #8]
 8004ff2:	609a      	str	r2, [r3, #8]
 8004ff4:	eb0a 0205 	add.w	r2, sl, r5
 8004ff8:	ebc5 030c 	rsb	r3, r5, ip
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	f8cb 2008 	str.w	r2, [fp, #8]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	f8da 3004 	ldr.w	r3, [sl, #4]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	431d      	orrs	r5, r3
 8005010:	4648      	mov	r0, r9
 8005012:	f8ca 5004 	str.w	r5, [sl, #4]
 8005016:	f7ff feb3 	bl	8004d80 <__malloc_unlock>
 800501a:	4638      	mov	r0, r7
 800501c:	e769      	b.n	8004ef2 <_realloc_r+0x162>
 800501e:	6833      	ldr	r3, [r6, #0]
 8005020:	6003      	str	r3, [r0, #0]
 8005022:	6873      	ldr	r3, [r6, #4]
 8005024:	6043      	str	r3, [r0, #4]
 8005026:	2a1b      	cmp	r2, #27
 8005028:	d829      	bhi.n	800507e <_realloc_r+0x2ee>
 800502a:	f100 0308 	add.w	r3, r0, #8
 800502e:	f106 0208 	add.w	r2, r6, #8
 8005032:	e78b      	b.n	8004f4c <_realloc_r+0x1bc>
 8005034:	463b      	mov	r3, r7
 8005036:	6832      	ldr	r2, [r6, #0]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	6872      	ldr	r2, [r6, #4]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	68b2      	ldr	r2, [r6, #8]
 8005040:	609a      	str	r2, [r3, #8]
 8005042:	463e      	mov	r6, r7
 8005044:	4674      	mov	r4, lr
 8005046:	f8da 3004 	ldr.w	r3, [sl, #4]
 800504a:	46d0      	mov	r8, sl
 800504c:	e740      	b.n	8004ed0 <_realloc_r+0x140>
 800504e:	eb08 0205 	add.w	r2, r8, r5
 8005052:	1b4b      	subs	r3, r1, r5
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	f8cb 2008 	str.w	r2, [fp, #8]
 800505c:	6053      	str	r3, [r2, #4]
 800505e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	431d      	orrs	r5, r3
 8005068:	4648      	mov	r0, r9
 800506a:	f846 5c04 	str.w	r5, [r6, #-4]
 800506e:	f7ff fe87 	bl	8004d80 <__malloc_unlock>
 8005072:	4630      	mov	r0, r6
 8005074:	e73d      	b.n	8004ef2 <_realloc_r+0x162>
 8005076:	4631      	mov	r1, r6
 8005078:	f7ff fdc2 	bl	8004c00 <memmove>
 800507c:	e76c      	b.n	8004f58 <_realloc_r+0x1c8>
 800507e:	68b3      	ldr	r3, [r6, #8]
 8005080:	6083      	str	r3, [r0, #8]
 8005082:	68f3      	ldr	r3, [r6, #12]
 8005084:	60c3      	str	r3, [r0, #12]
 8005086:	2a24      	cmp	r2, #36	; 0x24
 8005088:	d02c      	beq.n	80050e4 <_realloc_r+0x354>
 800508a:	f100 0310 	add.w	r3, r0, #16
 800508e:	f106 0210 	add.w	r2, r6, #16
 8005092:	e75b      	b.n	8004f4c <_realloc_r+0x1bc>
 8005094:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005098:	f022 0203 	bic.w	r2, r2, #3
 800509c:	4414      	add	r4, r2
 800509e:	e717      	b.n	8004ed0 <_realloc_r+0x140>
 80050a0:	4631      	mov	r1, r6
 80050a2:	4638      	mov	r0, r7
 80050a4:	4674      	mov	r4, lr
 80050a6:	463e      	mov	r6, r7
 80050a8:	f7ff fdaa 	bl	8004c00 <memmove>
 80050ac:	46d0      	mov	r8, sl
 80050ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050b2:	e70d      	b.n	8004ed0 <_realloc_r+0x140>
 80050b4:	463a      	mov	r2, r7
 80050b6:	e700      	b.n	8004eba <_realloc_r+0x12a>
 80050b8:	4631      	mov	r1, r6
 80050ba:	4638      	mov	r0, r7
 80050bc:	461c      	mov	r4, r3
 80050be:	463e      	mov	r6, r7
 80050c0:	f7ff fd9e 	bl	8004c00 <memmove>
 80050c4:	46d0      	mov	r8, sl
 80050c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050ca:	e701      	b.n	8004ed0 <_realloc_r+0x140>
 80050cc:	68b3      	ldr	r3, [r6, #8]
 80050ce:	f8ca 3010 	str.w	r3, [sl, #16]
 80050d2:	68f3      	ldr	r3, [r6, #12]
 80050d4:	f8ca 3014 	str.w	r3, [sl, #20]
 80050d8:	2a24      	cmp	r2, #36	; 0x24
 80050da:	d018      	beq.n	800510e <_realloc_r+0x37e>
 80050dc:	3610      	adds	r6, #16
 80050de:	f10a 0318 	add.w	r3, sl, #24
 80050e2:	e7a8      	b.n	8005036 <_realloc_r+0x2a6>
 80050e4:	6933      	ldr	r3, [r6, #16]
 80050e6:	6103      	str	r3, [r0, #16]
 80050e8:	6973      	ldr	r3, [r6, #20]
 80050ea:	6143      	str	r3, [r0, #20]
 80050ec:	f106 0218 	add.w	r2, r6, #24
 80050f0:	f100 0318 	add.w	r3, r0, #24
 80050f4:	e72a      	b.n	8004f4c <_realloc_r+0x1bc>
 80050f6:	68b1      	ldr	r1, [r6, #8]
 80050f8:	f8ca 1010 	str.w	r1, [sl, #16]
 80050fc:	68f1      	ldr	r1, [r6, #12]
 80050fe:	f8ca 1014 	str.w	r1, [sl, #20]
 8005102:	2a24      	cmp	r2, #36	; 0x24
 8005104:	d00f      	beq.n	8005126 <_realloc_r+0x396>
 8005106:	3610      	adds	r6, #16
 8005108:	f10a 0218 	add.w	r2, sl, #24
 800510c:	e6d5      	b.n	8004eba <_realloc_r+0x12a>
 800510e:	6933      	ldr	r3, [r6, #16]
 8005110:	f8ca 3018 	str.w	r3, [sl, #24]
 8005114:	6973      	ldr	r3, [r6, #20]
 8005116:	f8ca 301c 	str.w	r3, [sl, #28]
 800511a:	3618      	adds	r6, #24
 800511c:	f10a 0320 	add.w	r3, sl, #32
 8005120:	e789      	b.n	8005036 <_realloc_r+0x2a6>
 8005122:	463b      	mov	r3, r7
 8005124:	e760      	b.n	8004fe8 <_realloc_r+0x258>
 8005126:	6932      	ldr	r2, [r6, #16]
 8005128:	f8ca 2018 	str.w	r2, [sl, #24]
 800512c:	6972      	ldr	r2, [r6, #20]
 800512e:	f8ca 201c 	str.w	r2, [sl, #28]
 8005132:	3618      	adds	r6, #24
 8005134:	f10a 0220 	add.w	r2, sl, #32
 8005138:	e6bf      	b.n	8004eba <_realloc_r+0x12a>
 800513a:	4631      	mov	r1, r6
 800513c:	4638      	mov	r0, r7
 800513e:	f8cd c004 	str.w	ip, [sp, #4]
 8005142:	f7ff fd5d 	bl	8004c00 <memmove>
 8005146:	f8dd c004 	ldr.w	ip, [sp, #4]
 800514a:	e753      	b.n	8004ff4 <_realloc_r+0x264>
 800514c:	68b3      	ldr	r3, [r6, #8]
 800514e:	f8ca 3010 	str.w	r3, [sl, #16]
 8005152:	68f3      	ldr	r3, [r6, #12]
 8005154:	f8ca 3014 	str.w	r3, [sl, #20]
 8005158:	2a24      	cmp	r2, #36	; 0x24
 800515a:	d003      	beq.n	8005164 <_realloc_r+0x3d4>
 800515c:	3610      	adds	r6, #16
 800515e:	f10a 0318 	add.w	r3, sl, #24
 8005162:	e741      	b.n	8004fe8 <_realloc_r+0x258>
 8005164:	6933      	ldr	r3, [r6, #16]
 8005166:	f8ca 3018 	str.w	r3, [sl, #24]
 800516a:	6973      	ldr	r3, [r6, #20]
 800516c:	f8ca 301c 	str.w	r3, [sl, #28]
 8005170:	3618      	adds	r6, #24
 8005172:	f10a 0320 	add.w	r3, sl, #32
 8005176:	e737      	b.n	8004fe8 <_realloc_r+0x258>
 8005178:	20000c78 	.word	0x20000c78
 800517c:	00000000 	.word	0x00000000

08005180 <_raise_r>:
 8005180:	291f      	cmp	r1, #31
 8005182:	b538      	push	{r3, r4, r5, lr}
 8005184:	d822      	bhi.n	80051cc <_raise_r+0x4c>
 8005186:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800518a:	4605      	mov	r5, r0
 800518c:	460c      	mov	r4, r1
 800518e:	b19a      	cbz	r2, 80051b8 <_raise_r+0x38>
 8005190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005194:	b183      	cbz	r3, 80051b8 <_raise_r+0x38>
 8005196:	2b01      	cmp	r3, #1
 8005198:	d00c      	beq.n	80051b4 <_raise_r+0x34>
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	d006      	beq.n	80051ac <_raise_r+0x2c>
 800519e:	2500      	movs	r5, #0
 80051a0:	4620      	mov	r0, r4
 80051a2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 80051a6:	4798      	blx	r3
 80051a8:	4628      	mov	r0, r5
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	2316      	movs	r3, #22
 80051ae:	6003      	str	r3, [r0, #0]
 80051b0:	2001      	movs	r0, #1
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	2000      	movs	r0, #0
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f831 	bl	8005220 <_getpid_r>
 80051be:	4622      	mov	r2, r4
 80051c0:	4601      	mov	r1, r0
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b812 	b.w	80051f0 <_kill_r>
 80051cc:	2316      	movs	r3, #22
 80051ce:	6003      	str	r3, [r0, #0]
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	bf00      	nop
	...

080051e0 <raise>:
 80051e0:	4b02      	ldr	r3, [pc, #8]	; (80051ec <raise+0xc>)
 80051e2:	4601      	mov	r1, r0
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f7ff bfcb 	b.w	8005180 <_raise_r>
 80051ea:	bf00      	nop
 80051ec:	20000c50 	.word	0x20000c50

080051f0 <_kill_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4c08      	ldr	r4, [pc, #32]	; (8005214 <_kill_r+0x24>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4605      	mov	r5, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f7fd fa17 	bl	8002630 <_kill>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d000      	beq.n	8005208 <_kill_r+0x18>
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0fb      	beq.n	8005206 <_kill_r+0x16>
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	2000b004 	.word	0x2000b004
	...

08005220 <_getpid_r>:
 8005220:	f7fd ba0e 	b.w	8002640 <_getpid>
	...

08005230 <__sread>:
 8005230:	b510      	push	{r4, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	f7fc fd6a 	bl	8001d10 <_read_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	db03      	blt.n	8005248 <__sread+0x18>
 8005240:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005242:	4403      	add	r3, r0
 8005244:	6523      	str	r3, [r4, #80]	; 0x50
 8005246:	bd10      	pop	{r4, pc}
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524e:	81a3      	strh	r3, [r4, #12]
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
	...

08005260 <__swrite>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	898a      	ldrh	r2, [r1, #12]
 8005268:	461d      	mov	r5, r3
 800526a:	05d3      	lsls	r3, r2, #23
 800526c:	460c      	mov	r4, r1
 800526e:	4607      	mov	r7, r0
 8005270:	d506      	bpl.n	8005280 <__swrite+0x20>
 8005272:	2200      	movs	r2, #0
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	2302      	movs	r3, #2
 800527a:	f7fc fd41 	bl	8001d00 <_lseek_r>
 800527e:	89a2      	ldrh	r2, [r4, #12]
 8005280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005288:	81a2      	strh	r2, [r4, #12]
 800528a:	4638      	mov	r0, r7
 800528c:	4632      	mov	r2, r6
 800528e:	462b      	mov	r3, r5
 8005290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	f7fc bd2c 	b.w	8001cf0 <_write_r>
	...

080052a0 <__sseek>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	f7fc fd2a 	bl	8001d00 <_lseek_r>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	1c42      	adds	r2, r0, #1
 80052b0:	bf0e      	itee	eq
 80052b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ba:	6520      	strne	r0, [r4, #80]	; 0x50
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	bd10      	pop	{r4, pc}

080052c0 <__sclose>:
 80052c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c4:	f7fc bd0c 	b.w	8001ce0 <_close_r>
	...

080052d0 <strlen>:
 80052d0:	f020 0103 	bic.w	r1, r0, #3
 80052d4:	f010 0003 	ands.w	r0, r0, #3
 80052d8:	f1c0 0000 	rsb	r0, r0, #0
 80052dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80052e0:	f100 0c04 	add.w	ip, r0, #4
 80052e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80052e8:	f06f 0200 	mvn.w	r2, #0
 80052ec:	bf1c      	itt	ne
 80052ee:	fa22 f20c 	lsrne.w	r2, r2, ip
 80052f2:	4313      	orrne	r3, r2
 80052f4:	f04f 0c01 	mov.w	ip, #1
 80052f8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80052fc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8005300:	eba3 020c 	sub.w	r2, r3, ip
 8005304:	ea22 0203 	bic.w	r2, r2, r3
 8005308:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800530c:	bf04      	itt	eq
 800530e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005312:	3004      	addeq	r0, #4
 8005314:	d0f4      	beq.n	8005300 <strlen+0x30>
 8005316:	f1c2 0100 	rsb	r1, r2, #0
 800531a:	ea02 0201 	and.w	r2, r2, r1
 800531e:	fab2 f282 	clz	r2, r2
 8005322:	f1c2 021f 	rsb	r2, r2, #31
 8005326:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800532a:	4770      	bx	lr
 800532c:	0000      	movs	r0, r0
	...

08005330 <__swbuf_r>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	460d      	mov	r5, r1
 8005334:	4614      	mov	r4, r2
 8005336:	4606      	mov	r6, r0
 8005338:	b110      	cbz	r0, 8005340 <__swbuf_r+0x10>
 800533a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d048      	beq.n	80053d2 <__swbuf_r+0xa2>
 8005340:	89a2      	ldrh	r2, [r4, #12]
 8005342:	69a3      	ldr	r3, [r4, #24]
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	b291      	uxth	r1, r2
 8005348:	0708      	lsls	r0, r1, #28
 800534a:	d538      	bpl.n	80053be <__swbuf_r+0x8e>
 800534c:	6923      	ldr	r3, [r4, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d035      	beq.n	80053be <__swbuf_r+0x8e>
 8005352:	0489      	lsls	r1, r1, #18
 8005354:	b2ed      	uxtb	r5, r5
 8005356:	d515      	bpl.n	8005384 <__swbuf_r+0x54>
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	6961      	ldr	r1, [r4, #20]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	428b      	cmp	r3, r1
 8005360:	da1c      	bge.n	800539c <__swbuf_r+0x6c>
 8005362:	3301      	adds	r3, #1
 8005364:	68a1      	ldr	r1, [r4, #8]
 8005366:	1c50      	adds	r0, r2, #1
 8005368:	3901      	subs	r1, #1
 800536a:	60a1      	str	r1, [r4, #8]
 800536c:	6020      	str	r0, [r4, #0]
 800536e:	7015      	strb	r5, [r2, #0]
 8005370:	6962      	ldr	r2, [r4, #20]
 8005372:	429a      	cmp	r2, r3
 8005374:	d01a      	beq.n	80053ac <__swbuf_r+0x7c>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	07db      	lsls	r3, r3, #31
 800537a:	d501      	bpl.n	8005380 <__swbuf_r+0x50>
 800537c:	2d0a      	cmp	r5, #10
 800537e:	d015      	beq.n	80053ac <__swbuf_r+0x7c>
 8005380:	4628      	mov	r0, r5
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800538e:	81a2      	strh	r2, [r4, #12]
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	6661      	str	r1, [r4, #100]	; 0x64
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	428b      	cmp	r3, r1
 800539a:	dbe2      	blt.n	8005362 <__swbuf_r+0x32>
 800539c:	4630      	mov	r0, r6
 800539e:	4621      	mov	r1, r4
 80053a0:	f7fe fcce 	bl	8003d40 <_fflush_r>
 80053a4:	b940      	cbnz	r0, 80053b8 <__swbuf_r+0x88>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	2301      	movs	r3, #1
 80053aa:	e7db      	b.n	8005364 <__swbuf_r+0x34>
 80053ac:	4630      	mov	r0, r6
 80053ae:	4621      	mov	r1, r4
 80053b0:	f7fe fcc6 	bl	8003d40 <_fflush_r>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d0e3      	beq.n	8005380 <__swbuf_r+0x50>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	4630      	mov	r0, r6
 80053c0:	4621      	mov	r1, r4
 80053c2:	f7fe fb9d 	bl	8003b00 <__swsetup_r>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1f6      	bne.n	80053b8 <__swbuf_r+0x88>
 80053ca:	89a2      	ldrh	r2, [r4, #12]
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	b291      	uxth	r1, r2
 80053d0:	e7bf      	b.n	8005352 <__swbuf_r+0x22>
 80053d2:	f7fe fd4d 	bl	8003e70 <__sinit>
 80053d6:	e7b3      	b.n	8005340 <__swbuf_r+0x10>
	...

080053e0 <_wcrtomb_r>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	4605      	mov	r5, r0
 80053e6:	b086      	sub	sp, #24
 80053e8:	461e      	mov	r6, r3
 80053ea:	460c      	mov	r4, r1
 80053ec:	b1a1      	cbz	r1, 8005418 <_wcrtomb_r+0x38>
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <_wcrtomb_r+0x50>)
 80053f0:	4617      	mov	r7, r2
 80053f2:	f8d3 8000 	ldr.w	r8, [r3]
 80053f6:	f7ff f8a3 	bl	8004540 <__locale_charset>
 80053fa:	9600      	str	r6, [sp, #0]
 80053fc:	4603      	mov	r3, r0
 80053fe:	4621      	mov	r1, r4
 8005400:	463a      	mov	r2, r7
 8005402:	4628      	mov	r0, r5
 8005404:	47c0      	blx	r8
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	d103      	bne.n	8005412 <_wcrtomb_r+0x32>
 800540a:	2200      	movs	r2, #0
 800540c:	238a      	movs	r3, #138	; 0x8a
 800540e:	6032      	str	r2, [r6, #0]
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	b006      	add	sp, #24
 8005414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <_wcrtomb_r+0x50>)
 800541a:	681f      	ldr	r7, [r3, #0]
 800541c:	f7ff f890 	bl	8004540 <__locale_charset>
 8005420:	9600      	str	r6, [sp, #0]
 8005422:	4603      	mov	r3, r0
 8005424:	4622      	mov	r2, r4
 8005426:	4628      	mov	r0, r5
 8005428:	a903      	add	r1, sp, #12
 800542a:	47b8      	blx	r7
 800542c:	e7eb      	b.n	8005406 <_wcrtomb_r+0x26>
 800542e:	bf00      	nop
 8005430:	20001088 	.word	0x20001088
	...

08005440 <__ascii_wctomb>:
 8005440:	b121      	cbz	r1, 800544c <__ascii_wctomb+0xc>
 8005442:	2aff      	cmp	r2, #255	; 0xff
 8005444:	d804      	bhi.n	8005450 <__ascii_wctomb+0x10>
 8005446:	700a      	strb	r2, [r1, #0]
 8005448:	2001      	movs	r0, #1
 800544a:	4770      	bx	lr
 800544c:	4608      	mov	r0, r1
 800544e:	4770      	bx	lr
 8005450:	238a      	movs	r3, #138	; 0x8a
 8005452:	6003      	str	r3, [r0, #0]
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	0000      	movs	r0, r0
	...

08005460 <_fclose_r>:
 8005460:	2900      	cmp	r1, #0
 8005462:	d03d      	beq.n	80054e0 <_fclose_r+0x80>
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4605      	mov	r5, r0
 8005468:	460c      	mov	r4, r1
 800546a:	b108      	cbz	r0, 8005470 <_fclose_r+0x10>
 800546c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800546e:	b37b      	cbz	r3, 80054d0 <_fclose_r+0x70>
 8005470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005474:	b90b      	cbnz	r3, 800547a <_fclose_r+0x1a>
 8005476:	2000      	movs	r0, #0
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	4628      	mov	r0, r5
 800547c:	4621      	mov	r1, r4
 800547e:	f7fe fbaf 	bl	8003be0 <__sflush_r>
 8005482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005484:	4606      	mov	r6, r0
 8005486:	b133      	cbz	r3, 8005496 <_fclose_r+0x36>
 8005488:	4628      	mov	r0, r5
 800548a:	69e1      	ldr	r1, [r4, #28]
 800548c:	4798      	blx	r3
 800548e:	2800      	cmp	r0, #0
 8005490:	bfb8      	it	lt
 8005492:	f04f 36ff 	movlt.w	r6, #4294967295
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	061b      	lsls	r3, r3, #24
 800549a:	d41c      	bmi.n	80054d6 <_fclose_r+0x76>
 800549c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800549e:	b141      	cbz	r1, 80054b2 <_fclose_r+0x52>
 80054a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80054a4:	4299      	cmp	r1, r3
 80054a6:	d002      	beq.n	80054ae <_fclose_r+0x4e>
 80054a8:	4628      	mov	r0, r5
 80054aa:	f7fe fdb1 	bl	8004010 <_free_r>
 80054ae:	2300      	movs	r3, #0
 80054b0:	6323      	str	r3, [r4, #48]	; 0x30
 80054b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054b4:	b121      	cbz	r1, 80054c0 <_fclose_r+0x60>
 80054b6:	4628      	mov	r0, r5
 80054b8:	f7fe fdaa 	bl	8004010 <_free_r>
 80054bc:	2300      	movs	r3, #0
 80054be:	6463      	str	r3, [r4, #68]	; 0x44
 80054c0:	f7fe fcde 	bl	8003e80 <__sfp_lock_acquire>
 80054c4:	2300      	movs	r3, #0
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	f7fe fce2 	bl	8003e90 <__sfp_lock_release>
 80054cc:	4630      	mov	r0, r6
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f7fe fcce 	bl	8003e70 <__sinit>
 80054d4:	e7cc      	b.n	8005470 <_fclose_r+0x10>
 80054d6:	4628      	mov	r0, r5
 80054d8:	6921      	ldr	r1, [r4, #16]
 80054da:	f7fe fd99 	bl	8004010 <_free_r>
 80054de:	e7dd      	b.n	800549c <_fclose_r+0x3c>
 80054e0:	2000      	movs	r0, #0
 80054e2:	4770      	bx	lr
	...

080054f0 <__FUNCTION__.8003>:
 80054f0:	4d78 4d42 7361 6574 5272 5554 6552 6563     xMBMasterRTURece
 8005500:	7669 4665 4d53 0000 0000 0000 0000 0000     iveFSM..........

08005510 <CSWTCH.7>:
 8005510:	0200 0404 0404 0604 0000 0000 0000 0000     ................

08005520 <__FUNCTION__.7742>:
 8005520:	4d78 5542 6974 536c 7465 6942 7374 0000     xMBUtilSetBits..

08005530 <__FUNCTION__.8026>:
 8005530:	4d78 4d42 7361 6574 5272 5554 6954 656d     xMBMasterRTUTime
 8005540:	4572 7078 7269 6465 0000 0000 0000 0000     rExpired........

08005550 <__FUNCTION__.8013>:
 8005550:	4d78 4d42 7361 6574 5272 5554 7254 6e61     xMBMasterRTUTran
 8005560:	6d73 7469 5346 004d 0000 0000 0000 0000     smitFSM.........

08005570 <__FUNCTION__.7990>:
 8005570:	4d65 4d42 7361 6574 5272 5554 6552 6563     eMBMasterRTURece
 8005580:	7669 0065 0000 0000 0000 0000 0000 0000     ive.............
 8005590:	6469 656c 0000 0000 7246 6565 6f4d 6264     idle....FreeModb
 80055a0:	7375 6d2f 646f 7562 2f73 7472 2f75 626d     us/modbus/rtu/mb
 80055b0:	7472 5f75 2e6d 0063 2028 5265 7663 7453     rtu_m.c.( eRcvSt
 80055c0:	7461 2065 3d3d 5320 4154 4554 4d5f 525f     ate == STATE_M_R
 80055d0:	5f58 4e49 5449 2920 7c20 207c 2028 5265     X_INIT ) || ( eR
 80055e0:	7663 7453 7461 2065 3d3d 5320 4154 4554     cvState == STATE
 80055f0:	4d5f 525f 5f58 4352 2056 2029 7c7c 2820     _M_RX_RCV ) || (
 8005600:	6520 6352 5376 6174 6574 3d20 203d 5453      eRcvState == ST
 8005610:	5441 5f45 5f4d 5852 455f 5252 524f 2920     ATE_M_RX_ERROR )
 8005620:	7c20 207c 2028 5265 7663 7453 7461 2065      || ( eRcvState 
 8005630:	3d3d 5320 4154 4554 4d5f 525f 5f58 4449     == STATE_M_RX_ID
 8005640:	454c 2920 0000 0000 2028 5365 646e 7453     LE )....( eSndSt
 8005650:	7461 2065 3d3d 5320 4154 4554 4d5f 545f     ate == STATE_M_T
 8005660:	5f58 4658 5257 2920 7c20 207c 2028 5365     X_XFWR ) || ( eS
 8005670:	646e 7453 7461 2065 3d3d 5320 4154 4554     ndState == STATE
 8005680:	4d5f 545f 5f58 4449 454c 2920 0000 0000     _M_TX_IDLE )....
 8005690:	7375 614d 7473 7265 6352 4276 6675 6566     usMasterRcvBuffe
 80056a0:	5072 736f 3c20 4d20 5f42 4553 5f52 4450     rPos < MB_SER_PD
 80056b0:	5f55 4953 455a 4d5f 5841 0000 2028 5365     U_SIZE_MAX..( eS
 80056c0:	646e 7453 7461 2065 3d3d 5320 4154 4554     ndState == STATE
 80056d0:	4d5f 545f 5f58 4449 454c 2920 7c20 207c     _M_TX_IDLE ) || 
 80056e0:	2028 5365 646e 7453 7461 2065 3d3d 5320     ( eSndState == S
 80056f0:	4154 4554 4d5f 545f 5f58 4658 5257 2920     TATE_M_TX_XFWR )
 8005700:	0000 0000 7246 6565 6f4d 6264 7375 6d2f     ....FreeModbus/m
 8005710:	646f 7562 2f73 7566 636e 6974 6e6f 2f73     odbus/functions/
 8005720:	626d 7475 6c69 2e73 0063 0000 6375 424e     mbutils.c...ucNB
 8005730:	7469 2073 3d3c 3820 0000 0000 5265 7663     its <= 8....eRcv
 8005740:	7453 7461 2065 3d3d 5320 4154 4554 4d5f     State == STATE_M
 8005750:	525f 5f58 4449 454c 0000 0000 0000 0000     _RX_IDLE........

08005760 <aucCRCLo>:
 8005760:	c000 01c1 03c3 c202 06c6 c707 c505 04c4     ................
 8005770:	0ccc cd0d cf0f 0ece ca0a 0bcb 09c9 c808     ................
 8005780:	18d8 d919 db1b 1ada de1e 1fdf 1ddd dc1c     ................
 8005790:	d414 15d5 17d7 d616 12d2 d313 d111 10d0     ................
 80057a0:	30f0 f131 f333 32f2 f636 37f7 35f5 f434     .01.3..26..7.54.
 80057b0:	fc3c 3dfd 3fff fe3e 3afa fb3b f939 38f8     <..=.?>..:;.9..8
 80057c0:	e828 29e9 2beb ea2a 2eee ef2f ed2d 2cec     (..).+*.../.-..,
 80057d0:	24e4 e525 e727 26e6 e222 23e3 21e1 e020     .$%.'..&"..#.! .
 80057e0:	60a0 a161 a363 62a2 a666 67a7 65a5 a464     .`a.c..bf..g.ed.
 80057f0:	ac6c 6dad 6faf ae6e 6aaa ab6b a969 68a8     l..m.on..jk.i..h
 8005800:	b878 79b9 7bbb ba7a 7ebe bf7f bd7d 7cbc     x..y.{z..~..}..|
 8005810:	74b4 b575 b777 76b6 b272 73b3 71b1 b070     .tu.w..vr..s.qp.
 8005820:	9050 5191 5393 9252 5696 9757 9555 5494     P..Q.SR..VW.U..T
 8005830:	5c9c 9d5d 9f5f 5e9e 9a5a 5b9b 5999 9858     .\]._..^Z..[.YX.
 8005840:	4888 8949 8b4b 4a8a 8e4e 4f8f 4d8d 8c4c     .HI.K..JN..O.ML.
 8005850:	8444 4585 4787 8646 4282 8343 8141 4080     D..E.GF..BC.A..@

08005860 <aucCRCHi>:
 8005860:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 8005870:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 8005880:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 8005890:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 80058a0:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 80058b0:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 80058c0:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 80058d0:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 80058e0:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 80058f0:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 8005900:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 8005910:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 8005920:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 8005930:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 8005940:	c001 4180 c100 4081 c100 4081 c001 4180     ...A...@...@...A
 8005950:	c100 4081 c001 4180 c001 4180 c100 4081     ...@...A...A...@
 8005960:	6573 646e 7265 0000 6f6d 6264 7375 725f     sender..modbus_r
 8005970:	7165 6575 7473 0000 7375 524d 6765 6f48     equest..usMRegHo
 8005980:	646c 7542 5b66 6425 3a5d 2520 0a64 0000     ldBuf[%d]: %d...
 8005990:	6f6e 6527 7272 726f 0000 0000 7265 6f72     no'error....erro
 80059a0:	0072 0000 6f6d 6264 7375 705f 6c6f 006c     r...modbus_poll.
 80059b0:	5365 6174 7574 3a73 2520 0a73 0000 0000     eStatus: %s.....
 80059c0:	7325 000a 6170 6972 7974 6520 7272 0000     %s..parity err..
 80059d0:	7266 6d61 6e69 2067 7265 0072 6f6e 7369     framing err.nois
 80059e0:	2065 7265 0072 0000 766f 7265 7572 206e     e err...overrun 
 80059f0:	7265 0072 6469 656c 6c20 6e69 2065 7265     err.idle line er
 8005a00:	0072 0000 6175 7472 7220 2078 7265 0072     r...uart rx err.
 8005a10:	655f 6978 0074 0000 6552 6563 7669 2065     _exit...Receive 
 8005a20:	6e45 6261 656c 0000 6552 6563 7669 2065     Enable..Receive 
 8005a30:	6944 6173 6c62 0065 7254 6e61 6d73 7469     Disable.Transmit
 8005a40:	4520 616e 6c62 0065 7254 6e61 6d73 7469      Enable.Transmit
 8005a50:	4420 7369 6261 656c 0000 0000 0000 0000      Disable........

08005a60 <xMasterFuncHandlers>:
 8005a60:	0011 0000 16b1 0800 0004 0000 0d11 0800     ................
 8005a70:	0003 0000 1761 0800 0010 0000 17c1 0800     ....a...........
 8005a80:	0006 0000 1821 0800 0017 0000 16c1 0800     ....!...........
 8005a90:	0001 0000 1931 0800 0005 0000 18d1 0800     ....1...........
 8005aa0:	000f 0000 1861 0800 0002 0000 1bb1 0800     ....a...........
	...

08005ae0 <ch_debug>:
 8005ae0:	616d 6e69 1600 1800 0404 0844 100c 1814     main......D.....
 8005af0:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................
 8005b00:	5753 2056 6e45 6261 656c 0a64 0000 0000     SWV Enabled.....
 8005b10:	7325 0000 6843 6269 4f69 2053 3356 302e     %s..ChibiOS V3.0
 8005b20:	000a 0000 6168 5f6c 6c6c 5f64 6e69 7469     ....hal_lld_init
 8005b30:	0000 0000 6170 496c 696e 0074 0000 0000     ....palInit.....

08005b40 <vmt>:
 8005b40:	2601 0800 2071 0800 2621 0800 2081 0800     .&..q ..!&... ..

08005b50 <_stm32_dma_streams>:
 8005b50:	6010 4002 6008 4002 0000 000b 6028 4002     .`.@.`.@....(`.@
 8005b60:	6008 4002 0106 000c 6040 4002 6008 4002     .`.@....@`.@.`.@
 8005b70:	0210 000d 6058 4002 6008 4002 0316 000e     ....X`.@.`.@....
 8005b80:	6070 4002 600c 4002 0400 000f 6088 4002     p`.@.`.@.....`.@
 8005b90:	600c 4002 0506 0010 60a0 4002 600c 4002     .`.@.....`.@.`.@
 8005ba0:	0610 0011 60b8 4002 600c 4002 0716 002f     .....`.@.`.@../.
 8005bb0:	6410 4002 6408 4002 0800 0038 6428 4002     .d.@.d.@..8.(d.@
 8005bc0:	6408 4002 0906 0039 6440 4002 6408 4002     .d.@..9.@d.@.d.@
 8005bd0:	0a10 003a 6458 4002 6408 4002 0b16 003b     ..:.Xd.@.d.@..;.
 8005be0:	6470 4002 640c 4002 0c00 003c 6488 4002     pd.@.d.@..<..d.@
 8005bf0:	640c 4002 0d06 0044 64a0 4002 640c 4002     .d.@..D..d.@.d.@
 8005c00:	0e10 0045 64b8 4002 640c 4002 0f16 0046     ..E..d.@.d.@..F.
 8005c10:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
 8005c20:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
 8005c30:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
 8005c40:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
 8005c50:	0043 0000 0000 0000 0000 0000 0000 0000     C...............

08005c60 <zeroes.6753>:
 8005c60:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08005c70 <blanks.6752>:
 8005c70:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8005c80:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8005c90:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8005ca0:	6463 6665 0000 0000 6e28 6c75 296c 0000          cdef....(null).
