
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80001c0:	4bbb      	ldr	r3, [pc, #748]	; (80004b0 <__init_array_end+0x2f0>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80001c2:	4cbc      	ldr	r4, [pc, #752]	; (80004b4 <__init_array_end+0x2f4>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80001c4:	691a      	ldr	r2, [r3, #16]
 80001c6:	f04f 31ff 	mov.w	r1, #4294967295
 80001ca:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 80001cc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80001d0:	6119      	str	r1, [r3, #16]
 80001d2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80001d4:	6958      	ldr	r0, [r3, #20]
 80001d6:	6159      	str	r1, [r3, #20]
 80001d8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80001da:	6a18      	ldr	r0, [r3, #32]
 80001dc:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80001e0:	6218      	str	r0, [r3, #32]
 80001e2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80001e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80001e6:	6259      	str	r1, [r3, #36]	; 0x24
 80001e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80001ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80001ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80001f0:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80001f2:	6821      	ldr	r1, [r4, #0]
 80001f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80001f8:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80001fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80001fc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000200:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000204:	b08b      	sub	sp, #44	; 0x2c
 8000206:	d003      	beq.n	8000210 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000208:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800020c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800020e:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8000210:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80004b4 <__init_array_end+0x2f4>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000214:	4da6      	ldr	r5, [pc, #664]	; (80004b0 <__init_array_end+0x2f0>)
 8000216:	f8dc 4004 	ldr.w	r4, [ip, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800021a:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 80004fc <__init_array_end+0x33c>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800021e:	4ba6      	ldr	r3, [pc, #664]	; (80004b8 <__init_array_end+0x2f8>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000220:	4fa6      	ldr	r7, [pc, #664]	; (80004bc <__init_array_end+0x2fc>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000222:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8000500 <__init_array_end+0x340>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000226:	48a6      	ldr	r0, [pc, #664]	; (80004c0 <__init_array_end+0x300>)
 8000228:	4ea6      	ldr	r6, [pc, #664]	; (80004c4 <__init_array_end+0x304>)
 800022a:	49a7      	ldr	r1, [pc, #668]	; (80004c8 <__init_array_end+0x308>)
 800022c:	4aa7      	ldr	r2, [pc, #668]	; (80004cc <__init_array_end+0x30c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800022e:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8000504 <__init_array_end+0x344>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000232:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8000508 <__init_array_end+0x348>
 8000236:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 800023a:	f8cc 4004 	str.w	r4, [ip, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800023e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8000240:	f044 049f 	orr.w	r4, r4, #159	; 0x9f
 8000244:	632c      	str	r4, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000246:	f8d5 c050 	ldr.w	ip, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800024a:	2400      	movs	r4, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800024c:	f04c 0c9f 	orr.w	ip, ip, #159	; 0x9f
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000250:	f46f 688a 	mvn.w	r8, #1104	; 0x450
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000254:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000258:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800025c:	f8ce 8008 	str.w	r8, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000260:	f64f 78df 	movw	r8, #65503	; 0xffdf

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000264:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 8000268:	f8ce 8014 	str.w	r8, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800026c:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8000270:	f44f 282a 	mov.w	r8, #696320	; 0xaa000

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000274:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8000278:	f8ce 8024 	str.w	r8, [lr, #36]	; 0x24
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800027c:	f04f 33ff 	mov.w	r3, #4294967295
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000280:	f8ce a000 	str.w	sl, [lr]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000284:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8000288:	f64f 7eff 	movw	lr, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800028c:	f04f 0a80 	mov.w	sl, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000290:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000292:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000294:	f8c7 800c 	str.w	r8, [r7, #12]
  gpiop->ODR     = config->odr;
 8000298:	f8c7 e014 	str.w	lr, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800029c:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800029e:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80002a0:	f8c7 a000 	str.w	sl, [r7]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80002a4:	2745      	movs	r7, #69	; 0x45
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002a6:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80002a8:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80002aa:	f8c6 900c 	str.w	r9, [r6, #12]
  gpiop->ODR     = config->odr;
 80002ae:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80002b2:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80002b4:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80002b6:	6034      	str	r4, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002b8:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80002ba:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80002bc:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 80002c0:	f8c0 e014 	str.w	lr, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80002c4:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80002c6:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80002c8:	6004      	str	r4, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002ca:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80002cc:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80002ce:	60cf      	str	r7, [r1, #12]
  gpiop->ODR     = config->odr;
 80002d0:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80002d4:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80002d6:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80002d8:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80002da:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80002dc:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80002de:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80002e0:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80002e4:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80002e6:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80002e8:	6014      	str	r4, [r2, #0]
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80002ea:	4a79      	ldr	r2, [pc, #484]	; (80004d0 <__init_array_end+0x310>)
 80002ec:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 80004d0 <__init_array_end+0x310>
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80002f0:	4f78      	ldr	r7, [pc, #480]	; (80004d4 <__init_array_end+0x314>)
 80002f2:	f84c bb04 	str.w	fp, [ip], #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80002f6:	f102 0154 	add.w	r1, r2, #84	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80002fa:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80002fe:	f04f 0b01 	mov.w	fp, #1
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000302:	f04f 0e10 	mov.w	lr, #16
 8000306:	f102 060c 	add.w	r6, r2, #12
 800030a:	f1a1 0924 	sub.w	r9, r1, #36	; 0x24
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 800030e:	f102 0874 	add.w	r8, r2, #116	; 0x74
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000312:	6201      	str	r1, [r0, #32]
  iqp->q_top = bp + size;
 8000314:	3264      	adds	r2, #100	; 0x64
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000316:	6241      	str	r1, [r0, #36]	; 0x24
 8000318:	6181      	str	r1, [r0, #24]

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 800031a:	496f      	ldr	r1, [pc, #444]	; (80004d8 <__init_array_end+0x318>)
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800031c:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000320:	6144      	str	r4, [r0, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000322:	6284      	str	r4, [r0, #40]	; 0x28
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000324:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8000328:	f8c0 c004 	str.w	ip, [r0, #4]
 800032c:	f880 b008 	strb.w	fp, [r0, #8]
 8000330:	6106      	str	r6, [r0, #16]
 8000332:	60c6      	str	r6, [r0, #12]
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8000334:	61c2      	str	r2, [r0, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8000336:	6442      	str	r2, [r0, #68]	; 0x44
 8000338:	6482      	str	r2, [r0, #72]	; 0x48
 800033a:	63c2      	str	r2, [r0, #60]	; 0x3c
 800033c:	f8c0 9034 	str.w	r9, [r0, #52]	; 0x34
 8000340:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000344:	62c0      	str	r0, [r0, #44]	; 0x2c

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 8000346:	64c1      	str	r1, [r0, #76]	; 0x4c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000348:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800034a:	4964      	ldr	r1, [pc, #400]	; (80004dc <__init_array_end+0x31c>)
  oqp->q_link = link;
 800034c:	6500      	str	r0, [r0, #80]	; 0x50

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800034e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000352:	ea46 060b 	orr.w	r6, r6, fp
 8000356:	642e      	str	r6, [r5, #64]	; 0x40

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000358:	f242 5c7f 	movw	ip, #9599	; 0x257f
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800035c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8000360:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000364:	62d3      	str	r3, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000366:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000368:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800036a:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800036c:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800036e:	f8c2 b014 	str.w	fp, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000372:	f8c2 b000 	str.w	fp, [r2]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000376:	f887 a31c 	strb.w	sl, [r7, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800037a:	f8c7 6180 	str.w	r6, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800037e:	603e      	str	r6, [r7, #0]
 8000380:	608c      	str	r4, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000382:	f8d1 900c 	ldr.w	r9, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000386:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800050c <__init_array_end+0x34c>
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800038a:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000510 <__init_array_end+0x350>
 800038e:	4e54      	ldr	r6, [pc, #336]	; (80004e0 <__init_array_end+0x320>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000390:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8000394:	ea09 0202 	and.w	r2, r9, r2
  reg_value  =  (reg_value                                 |
 8000398:	ea42 0808 	orr.w	r8, r2, r8

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800039c:	4a51      	ldr	r2, [pc, #324]	; (80004e4 <__init_array_end+0x324>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800039e:	f8c1 800c 	str.w	r8, [r1, #12]
 80003a2:	68d2      	ldr	r2, [r2, #12]
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80003a4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8000514 <__init_array_end+0x354>
 80003a8:	f8c0 8074 	str.w	r8, [r0, #116]	; 0x74
 80003ac:	484d      	ldr	r0, [pc, #308]	; (80004e4 <__init_array_end+0x324>)
 80003ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003b2:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003b4:	f8dc 0000 	ldr.w	r0, [ip]
 80003b8:	6076      	str	r6, [r6, #4]
 80003ba:	ea40 000b 	orr.w	r0, r0, fp
 80003be:	f8cc 0000 	str.w	r0, [ip]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 80003c2:	f106 021c 	add.w	r2, r6, #28
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80003c6:	eb0d 000e 	add.w	r0, sp, lr
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003ca:	f04f 0a20 	mov.w	sl, #32

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80003ce:	f04f 0800 	mov.w	r8, #0
 80003d2:	f04f 0900 	mov.w	r9, #0
 80003d6:	f881 e01f 	strb.w	lr, [r1, #31]
 80003da:	f881 a022 	strb.w	sl, [r1, #34]	; 0x22
  ch.vtlist.vt_delta = (systime_t)-1;
 80003de:	6273      	str	r3, [r6, #36]	; 0x24
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 80003e0:	6232      	str	r2, [r6, #32]
 80003e2:	61f2      	str	r2, [r6, #28]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80003e4:	60b4      	str	r4, [r6, #8]
 80003e6:	6036      	str	r6, [r6, #0]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80003e8:	6176      	str	r6, [r6, #20]
 80003ea:	6136      	str	r6, [r6, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 80003ec:	62b4      	str	r4, [r6, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 80003ee:	6774      	str	r4, [r6, #116]	; 0x74
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80003f0:	9304      	str	r3, [sp, #16]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80003f2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80003f6:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80003f8:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80003fa:	9407      	str	r4, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80003fc:	f005 f838 	bl	8005470 <chTMStartMeasurementX.constprop.56>
  chTMStopMeasurementX(&tm);
 8000400:	a804      	add	r0, sp, #16
 8000402:	f001 fc75 	bl	8001cf0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000406:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <__init_array_end+0x328>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000408:	4a38      	ldr	r2, [pc, #224]	; (80004ec <__init_array_end+0x32c>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800040a:	f8d6 e014 	ldr.w	lr, [r6, #20]
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800040e:	4838      	ldr	r0, [pc, #224]	; (80004f0 <__init_array_end+0x330>)
 8000410:	f8df c104 	ldr.w	ip, [pc, #260]	; 8000518 <__init_array_end+0x358>
 8000414:	f8c6 e044 	str.w	lr, [r6, #68]	; 0x44
 8000418:	f103 0810 	add.w	r8, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800041c:	f022 0207 	bic.w	r2, r2, #7
 8000420:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8000424:	f8c3 8014 	str.w	r8, [r3, #20]
 8000428:	f8c3 8010 	str.w	r8, [r3, #16]
 800042c:	9202      	str	r2, [sp, #8]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800042e:	f04f 0840 	mov.w	r8, #64	; 0x40
  ch.tm.offset = tm.last;
 8000432:	9a06      	ldr	r2, [sp, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000434:	6171      	str	r1, [r6, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000436:	619c      	str	r4, [r3, #24]
 8000438:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800051c <__init_array_end+0x35c>
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800043c:	f886 404d 	strb.w	r4, [r6, #77]	; 0x4d
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000440:	f020 0007 	bic.w	r0, r0, #7
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000444:	66b4      	str	r4, [r6, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8000446:	6674      	str	r4, [r6, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8000448:	f886 b04e 	strb.w	fp, [r6, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 800044c:	64b4      	str	r4, [r6, #72]	; 0x48
  REG_INSERT(tp);
 800044e:	6436      	str	r6, [r6, #64]	; 0x40
 8000450:	6772      	str	r2, [r6, #116]	; 0x74
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000452:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8000456:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800045a:	f8ce 1010 	str.w	r1, [lr, #16]
 800045e:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8000520 <__init_array_end+0x360>
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000462:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000464:	60dc      	str	r4, [r3, #12]
 8000466:	f8cc 0000 	str.w	r0, [ip]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800046a:	61b1      	str	r1, [r6, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800046c:	f106 0054 	add.w	r0, r6, #84	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000470:	f106 0158 	add.w	r1, r6, #88	; 0x58
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000474:	f8c3 e000 	str.w	lr, [r3]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000478:	9b02      	ldr	r3, [sp, #8]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800047a:	f886 b04c 	strb.w	fp, [r6, #76]	; 0x4c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800047e:	6570      	str	r0, [r6, #84]	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000480:	65f1      	str	r1, [r6, #92]	; 0x5c
 8000482:	65b1      	str	r1, [r6, #88]	; 0x58
 8000484:	f8c9 3000 	str.w	r3, [r9]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000488:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800048c:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 800048e:	69b3      	ldr	r3, [r6, #24]
 8000490:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <__init_array_end+0x334>)
 8000492:	619a      	str	r2, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 8000494:	f106 0078 	add.w	r0, r6, #120	; 0x78
 8000498:	465a      	mov	r2, fp
 800049a:	9400      	str	r4, [sp, #0]
 800049c:	21d8      	movs	r1, #216	; 0xd8
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <__init_array_end+0x338>)
 80004a0:	f000 fe1e 	bl	80010e0 <chThdCreateStatic>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004a4:	f38a 8811 	msr	BASEPRI, sl
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <__init_array_end+0x310>)
 80004aa:	7a1b      	ldrb	r3, [r3, #8]
 80004ac:	e03a      	b.n	8000524 <__init_array_end+0x364>
 80004ae:	bf00      	nop
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40007000 	.word	0x40007000
 80004b8:	64155105 	.word	0x64155105
 80004bc:	40020400 	.word	0x40020400
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40021c00 	.word	0x40021c00
 80004d0:	20000a6c 	.word	0x20000a6c
 80004d4:	e000e100 	.word	0xe000e100
 80004d8:	08001db1 	.word	0x08001db1
 80004dc:	e000ed00 	.word	0xe000ed00
 80004e0:	20000b78 	.word	0x20000b78
 80004e4:	e000edf0 	.word	0xe000edf0
 80004e8:	20000ae8 	.word	0x20000ae8
 80004ec:	20020000 	.word	0x20020000
 80004f0:	2000137f 	.word	0x2000137f
 80004f4:	08005a00 	.word	0x08005a00
 80004f8:	080009d1 	.word	0x080009d1
 80004fc:	40020000 	.word	0x40020000
 8000500:	2a8004a0 	.word	0x2a8004a0
 8000504:	51555555 	.word	0x51555555
 8000508:	08005a40 	.word	0x08005a40
 800050c:	05fa0300 	.word	0x05fa0300
 8000510:	e0001000 	.word	0xe0001000
 8000514:	40004400 	.word	0x40004400
 8000518:	20000a28 	.word	0x20000a28
 800051c:	20000b1c 	.word	0x20000b1c
 8000520:	08000921 	.word	0x08000921
 8000524:	455b      	cmp	r3, fp
 8000526:	d10a      	bne.n	800053e <__init_array_end+0x37e>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8000528:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800052a:	22c0      	movs	r2, #192	; 0xc0
 800052c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000530:	642b      	str	r3, [r5, #64]	; 0x40
 8000532:	f887 2326 	strb.w	r2, [r7, #806]	; 0x326
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000536:	f8c7 8184 	str.w	r8, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800053a:	f8c7 8004 	str.w	r8, [r7, #4]
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <__init_array_end+0x3d8>)
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <__init_array_end+0x3dc>)
 8000542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000544:	4293      	cmp	r3, r2
 8000546:	f000 8177 	beq.w	8000838 <__init_array_end+0x678>
 800054a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800054e:	4293      	cmp	r3, r2
 8000550:	f000 8172 	beq.w	8000838 <__init_array_end+0x678>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8000554:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000558:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800055a:	f244 0140 	movw	r1, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800055e:	2401      	movs	r4, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000560:	f242 102c 	movw	r0, #8492	; 0x212c
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8000564:	2200      	movs	r2, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000566:	6119      	str	r1, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000568:	615c      	str	r4, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800056a:	60d8      	str	r0, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800056c:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800056e:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8000570:	685b      	ldr	r3, [r3, #4]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <__init_array_end+0x3d8>)
 8000574:	2102      	movs	r1, #2
 8000576:	7219      	strb	r1, [r3, #8]
 8000578:	f382 8811 	msr	BASEPRI, r2
 800057c:	4c08      	ldr	r4, [pc, #32]	; (80005a0 <__init_array_end+0x3e0>)
  sdStart(&SD2, NULL);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <__init_array_end+0x3e4>)
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <__init_array_end+0x3e8>)
 8000584:	4e09      	ldr	r6, [pc, #36]	; (80005ac <__init_array_end+0x3ec>)
 8000586:	f8df a028 	ldr.w	sl, [pc, #40]	; 80005b0 <__init_array_end+0x3f0>
 800058a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	f000 fda6 	bl	80010e0 <chThdCreateStatic>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000594:	46a3      	mov	fp, r4
 8000596:	e011      	b.n	80005bc <__init_array_end+0x3fc>
 8000598:	20000a6c 	.word	0x20000a6c
 800059c:	40011000 	.word	0x40011000
 80005a0:	20000ae4 	.word	0x20000ae4
 80005a4:	200008e0 	.word	0x200008e0
 80005a8:	08001df1 	.word	0x08001df1
 80005ac:	20000b08 	.word	0x20000b08
 80005b0:	20000a40 	.word	0x20000a40
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON))
      TestThread(&SD2);
    chThdSleepMilliseconds(500);
 80005b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80005b8:	f000 ff6a 	bl	8001490 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON))
 80005bc:	4ba0      	ldr	r3, [pc, #640]	; (8000840 <__init_array_end+0x680>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	049b      	lsls	r3, r3, #18
 80005c2:	d4f7      	bmi.n	80005b4 <__init_array_end+0x3f4>
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
  int i, j;

  chp = p;
 80005c4:	4b9f      	ldr	r3, [pc, #636]	; (8000844 <__init_array_end+0x684>)
  test_println("");
 80005c6:	48a0      	ldr	r0, [pc, #640]	; (8000848 <__init_array_end+0x688>)
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
  int i, j;

  chp = p;
 80005c8:	6023      	str	r3, [r4, #0]
  test_println("");
 80005ca:	f000 fbb1 	bl	8000d30 <test_println>
  test_println("*** ChibiOS/RT test suite");
 80005ce:	489f      	ldr	r0, [pc, #636]	; (800084c <__init_array_end+0x68c>)
  test_println("***");
 80005d0:	4d9f      	ldr	r5, [pc, #636]	; (8000850 <__init_array_end+0x690>)
msg_t TestThread(void *p) {
  int i, j;

  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
 80005d2:	f000 fbad 	bl	8000d30 <test_println>
  test_println("***");
 80005d6:	489f      	ldr	r0, [pc, #636]	; (8000854 <__init_array_end+0x694>)
 80005d8:	f000 fbaa 	bl	8000d30 <test_println>
 80005dc:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80005de:	6820      	ldr	r0, [r4, #0]
 80005e0:	6803      	ldr	r3, [r0, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80005e6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d1f7      	bne.n	80005de <__init_array_end+0x41e>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 80005ee:	489a      	ldr	r0, [pc, #616]	; (8000858 <__init_array_end+0x698>)
 80005f0:	4d9a      	ldr	r5, [pc, #616]	; (800085c <__init_array_end+0x69c>)
 80005f2:	f000 fb9d 	bl	8000d30 <test_println>
 80005f6:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80005f8:	6820      	ldr	r0, [r4, #0]
 80005fa:	6803      	ldr	r3, [r0, #0]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000600:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000604:	2900      	cmp	r1, #0
 8000606:	d1f7      	bne.n	80005f8 <__init_array_end+0x438>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8000608:	4895      	ldr	r0, [pc, #596]	; (8000860 <__init_array_end+0x6a0>)
 800060a:	4d96      	ldr	r5, [pc, #600]	; (8000864 <__init_array_end+0x6a4>)
 800060c:	f000 fb90 	bl	8000d30 <test_println>
 8000610:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000612:	6820      	ldr	r0, [r4, #0]
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800061a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800061e:	2900      	cmp	r1, #0
 8000620:	d1f7      	bne.n	8000612 <__init_array_end+0x452>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8000622:	4891      	ldr	r0, [pc, #580]	; (8000868 <__init_array_end+0x6a8>)
 8000624:	4d91      	ldr	r5, [pc, #580]	; (800086c <__init_array_end+0x6ac>)
 8000626:	f000 fb83 	bl	8000d30 <test_println>
 800062a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800062c:	6820      	ldr	r0, [r4, #0]
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000634:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000638:	2900      	cmp	r1, #0
 800063a:	d1f7      	bne.n	800062c <__init_array_end+0x46c>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800063c:	488c      	ldr	r0, [pc, #560]	; (8000870 <__init_array_end+0x6b0>)
 800063e:	4d8d      	ldr	r5, [pc, #564]	; (8000874 <__init_array_end+0x6b4>)
 8000640:	f000 fb76 	bl	8000d30 <test_println>
 8000644:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000646:	6820      	ldr	r0, [r4, #0]
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800064e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000652:	2900      	cmp	r1, #0
 8000654:	d1f7      	bne.n	8000646 <__init_array_end+0x486>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8000656:	4888      	ldr	r0, [pc, #544]	; (8000878 <__init_array_end+0x6b8>)
 8000658:	4d88      	ldr	r5, [pc, #544]	; (800087c <__init_array_end+0x6bc>)
 800065a:	f000 fb69 	bl	8000d30 <test_println>
 800065e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000660:	6820      	ldr	r0, [r4, #0]
 8000662:	6803      	ldr	r3, [r0, #0]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000668:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800066c:	2900      	cmp	r1, #0
 800066e:	d1f7      	bne.n	8000660 <__init_array_end+0x4a0>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8000670:	4883      	ldr	r0, [pc, #524]	; (8000880 <__init_array_end+0x6c0>)
 8000672:	4d84      	ldr	r5, [pc, #528]	; (8000884 <__init_array_end+0x6c4>)
 8000674:	f000 fb5c 	bl	8000d30 <test_println>
 8000678:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800067a:	6820      	ldr	r0, [r4, #0]
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000682:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000686:	2900      	cmp	r1, #0
 8000688:	d1f7      	bne.n	800067a <__init_array_end+0x4ba>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800068a:	487f      	ldr	r0, [pc, #508]	; (8000888 <__init_array_end+0x6c8>)
 800068c:	4d7f      	ldr	r5, [pc, #508]	; (800088c <__init_array_end+0x6cc>)
 800068e:	f000 fb4f 	bl	8000d30 <test_println>
 8000692:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000694:	6820      	ldr	r0, [r4, #0]
 8000696:	6803      	ldr	r3, [r0, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800069c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80006a0:	2900      	cmp	r1, #0
 80006a2:	d1f7      	bne.n	8000694 <__init_array_end+0x4d4>
 80006a4:	4b7a      	ldr	r3, [pc, #488]	; (8000890 <__init_array_end+0x6d0>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80006a6:	487b      	ldr	r0, [pc, #492]	; (8000894 <__init_array_end+0x6d4>)
 80006a8:	9102      	str	r1, [sp, #8]
 80006aa:	9303      	str	r3, [sp, #12]
 80006ac:	f000 fb40 	bl	8000d30 <test_println>
#endif
  test_println("");
 80006b0:	4865      	ldr	r0, [pc, #404]	; (8000848 <__init_array_end+0x688>)

  global_fail = FALSE;
 80006b2:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80008c8 <__init_array_end+0x708>
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");
 80006b6:	f000 fb3b 	bl	8000d30 <test_println>

  global_fail = FALSE;
 80006ba:	4b77      	ldr	r3, [pc, #476]	; (8000898 <__init_array_end+0x6d8>)
 80006bc:	9902      	ldr	r1, [sp, #8]
 80006be:	7019      	strb	r1, [r3, #0]
 80006c0:	9b02      	ldr	r3, [sp, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	9302      	str	r3, [sp, #8]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80006c6:	2700      	movs	r7, #0

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80006c8:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80006cc:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 808b 	beq.w	80007ec <__init_array_end+0x62c>
      print_line();
 80006d6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80008cc <__init_array_end+0x70c>
 80006da:	f000 fa81 	bl	8000be0 <print_line.lto_priv.119>
 80006de:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80006e0:	6820      	ldr	r0, [r4, #0]
 80006e2:	6803      	ldr	r3, [r0, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80006e8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80006ec:	2900      	cmp	r1, #0
 80006ee:	d1f7      	bne.n	80006e0 <__init_array_end+0x520>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 80006f0:	9802      	ldr	r0, [sp, #8]
      test_print(".");
      test_printn(j + 1);
 80006f2:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80008d0 <__init_array_end+0x710>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 80006f6:	f000 fb4b 	bl	8000d90 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80006fa:	f8db 0000 	ldr.w	r0, [fp]
 80006fe:	6803      	ldr	r3, [r0, #0]
 8000700:	212e      	movs	r1, #46	; 0x2e
 8000702:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000704:	3701      	adds	r7, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000706:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000708:	4638      	mov	r0, r7
 800070a:	f000 fb41 	bl	8000d90 <test_printn>
 800070e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000710:	6820      	ldr	r0, [r4, #0]
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000718:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800071c:	2900      	cmp	r1, #0
 800071e:	d1f7      	bne.n	8000710 <__init_array_end+0x550>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8000720:	682b      	ldr	r3, [r5, #0]
 8000722:	f8d3 8000 	ldr.w	r8, [r3]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000726:	f898 1000 	ldrb.w	r1, [r8]
 800072a:	b139      	cbz	r1, 800073c <__init_array_end+0x57c>
    chSequentialStreamPut(chp, *msgp++);
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	6803      	ldr	r3, [r0, #0]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000734:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8000738:	2900      	cmp	r1, #0
 800073a:	d1f7      	bne.n	800072c <__init_array_end+0x56c>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800073c:	4857      	ldr	r0, [pc, #348]	; (800089c <__init_array_end+0x6dc>)
 800073e:	f000 faf7 	bl	8000d30 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8000742:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000746:	f000 fea3 	bl	8001490 <chThdSleep>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800074a:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <__init_array_end+0x6e0>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 800074c:	682d      	ldr	r5, [r5, #0]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800074e:	6033      	str	r3, [r6, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8000750:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8000752:	f8ca 3000 	str.w	r3, [sl]
 8000756:	f8ca 3004 	str.w	r3, [sl, #4]
 800075a:	f8ca 3008 	str.w	r3, [sl, #8]
 800075e:	f8ca 300c 	str.w	r3, [sl, #12]
 8000762:	f8ca 3010 	str.w	r3, [sl, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8000766:	494f      	ldr	r1, [pc, #316]	; (80008a4 <__init_array_end+0x6e4>)
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8000768:	686a      	ldr	r2, [r5, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800076a:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 800076c:	b102      	cbz	r2, 8000770 <__init_array_end+0x5b0>
    tcp->setup();
 800076e:	4790      	blx	r2
  tcp->execute();
 8000770:	68eb      	ldr	r3, [r5, #12]
 8000772:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8000774:	68ab      	ldr	r3, [r5, #8]
 8000776:	b103      	cbz	r3, 800077a <__init_array_end+0x5ba>
    tcp->teardown();
 8000778:	4798      	blx	r3

  test_wait_threads();
 800077a:	f001 f8f9 	bl	8001970 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 800077e:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <__init_array_end+0x6e4>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d050      	beq.n	8000828 <__init_array_end+0x668>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000786:	4d48      	ldr	r5, [pc, #288]	; (80008a8 <__init_array_end+0x6e8>)
 8000788:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800078a:	6820      	ldr	r0, [r4, #0]
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000792:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000796:	2900      	cmp	r1, #0
 8000798:	d1f7      	bne.n	800078a <__init_array_end+0x5ca>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <__init_array_end+0x6ec>)
 800079c:	4d44      	ldr	r5, [pc, #272]	; (80008b0 <__init_array_end+0x6f0>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f000 faf6 	bl	8000d90 <test_printn>
 80007a4:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80007a6:	6820      	ldr	r0, [r4, #0]
 80007a8:	6803      	ldr	r3, [r0, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80007ae:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80007b2:	2900      	cmp	r1, #0
 80007b4:	d1f7      	bne.n	80007a6 <__init_array_end+0x5e6>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80007b6:	6833      	ldr	r3, [r6, #0]
 80007b8:	4a39      	ldr	r2, [pc, #228]	; (80008a0 <__init_array_end+0x6e0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d909      	bls.n	80007d2 <__init_array_end+0x612>
 80007be:	4d38      	ldr	r5, [pc, #224]	; (80008a0 <__init_array_end+0x6e0>)
    chSequentialStreamPut(chp, *cp++);
 80007c0:	6820      	ldr	r0, [r4, #0]
 80007c2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80007c6:	6803      	ldr	r3, [r0, #0]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80007cc:	6833      	ldr	r3, [r6, #0]
 80007ce:	429d      	cmp	r5, r3
 80007d0:	d3f6      	bcc.n	80007c0 <__init_array_end+0x600>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 80007d2:	4838      	ldr	r0, [pc, #224]	; (80008b4 <__init_array_end+0x6f4>)
 80007d4:	f000 faac 	bl	8000d30 <test_println>
 80007d8:	9b03      	ldr	r3, [sp, #12]
 80007da:	f8d3 9000 	ldr.w	r9, [r3]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80007de:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80007e2:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f47f af75 	bne.w	80006d6 <__init_array_end+0x516>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 80007ec:	9b03      	ldr	r3, [sp, #12]
 80007ee:	f853 9f04 	ldr.w	r9, [r3, #4]!
 80007f2:	9303      	str	r3, [sp, #12]
 80007f4:	f1b9 0f00 	cmp.w	r9, #0
 80007f8:	f47f af62 	bne.w	80006c0 <__init_array_end+0x500>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 80007fc:	f000 f9f0 	bl	8000be0 <print_line.lto_priv.119>
  test_println("");
 8000800:	4d2d      	ldr	r5, [pc, #180]	; (80008b8 <__init_array_end+0x6f8>)
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <__init_array_end+0x688>)
 8000804:	f000 fa94 	bl	8000d30 <test_println>
 8000808:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800080a:	6820      	ldr	r0, [r4, #0]
 800080c:	6803      	ldr	r3, [r0, #0]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000812:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000816:	2900      	cmp	r1, #0
 8000818:	d1f7      	bne.n	800080a <__init_array_end+0x64a>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <__init_array_end+0x6d8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b93b      	cbnz	r3, 8000830 <__init_array_end+0x670>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <__init_array_end+0x6fc>)
 8000822:	f000 fa85 	bl	8000d30 <test_println>
 8000826:	e6c5      	b.n	80005b4 <__init_array_end+0x3f4>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8000828:	4825      	ldr	r0, [pc, #148]	; (80008c0 <__init_array_end+0x700>)
 800082a:	f000 fa81 	bl	8000d30 <test_println>
 800082e:	e74b      	b.n	80006c8 <__init_array_end+0x508>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <__init_array_end+0x704>)
 8000832:	f000 fa7d 	bl	8000d30 <test_println>
 8000836:	e6bd      	b.n	80005b4 <__init_array_end+0x3f4>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8000838:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	e68c      	b.n	800055a <__init_array_end+0x39a>
 8000840:	40020800 	.word	0x40020800
 8000844:	20000a6c 	.word	0x20000a6c
 8000848:	08006518 	.word	0x08006518
 800084c:	08005ef8 	.word	0x08005ef8
 8000850:	08005e18 	.word	0x08005e18
 8000854:	08005f14 	.word	0x08005f14
 8000858:	08005f3c 	.word	0x08005f3c
 800085c:	08005e2c 	.word	0x08005e2c
 8000860:	08005f48 	.word	0x08005f48
 8000864:	08005e40 	.word	0x08005e40
 8000868:	08005f60 	.word	0x08005f60
 800086c:	08005e54 	.word	0x08005e54
 8000870:	08005fa8 	.word	0x08005fa8
 8000874:	08005e68 	.word	0x08005e68
 8000878:	08005fb4 	.word	0x08005fb4
 800087c:	08005e7c 	.word	0x08005e7c
 8000880:	08005fc0 	.word	0x08005fc0
 8000884:	08005e90 	.word	0x08005e90
 8000888:	08005fd8 	.word	0x08005fd8
 800088c:	08005ea4 	.word	0x08005ea4
 8000890:	08005bb0 	.word	0x08005bb0
 8000894:	08006008 	.word	0x08006008
 8000898:	20000a2c 	.word	0x20000a2c
 800089c:	08005f18 	.word	0x08005f18
 80008a0:	20000b0c 	.word	0x20000b0c
 80008a4:	20000a54 	.word	0x20000a54
 80008a8:	08005ecc 	.word	0x08005ecc
 80008ac:	200008b8 	.word	0x200008b8
 80008b0:	08005ee4 	.word	0x08005ee4
 80008b4:	08005f1c 	.word	0x08005f1c
 80008b8:	08005ee8 	.word	0x08005ee8
 80008bc:	08005f2c 	.word	0x08005f2c
 80008c0:	08005f20 	.word	0x08005f20
 80008c4:	08005f34 	.word	0x08005f34
 80008c8:	08005c40 	.word	0x08005c40
 80008cc:	08005eb8 	.word	0x08005eb8
 80008d0:	08005ec8 	.word	0x08005ec8
 80008d4:	f3af 8000 	nop.w
 80008d8:	f3af 8000 	nop.w
 80008dc:	f3af 8000 	nop.w

080008e0 <_port_switch>:
 80008e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80008e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f0 <_port_thread_start>:
 80008f0:	2300      	movs	r3, #0
 80008f2:	f383 8811 	msr	BASEPRI, r3
 80008f6:	4628      	mov	r0, r5
 80008f8:	47a0      	blx	r4
 80008fa:	f001 f9d1 	bl	8001ca0 <chThdExit>

080008fe <_port_switch_from_isr>:
 80008fe:	f000 fb3f 	bl	8000f80 <chSchDoReschedule>

08000902 <_port_exit_from_isr>:
 8000902:	df00      	svc	0
 8000904:	e7fe      	b.n	8000904 <_port_exit_from_isr+0x2>
	...

08000910 <tmr.lto_priv.62>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <tmr.lto_priv.62+0x8>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	4770      	bx	lr
 8000918:	20000b70 	.word	0x20000b70
 800091c:	f3af 8000 	nop.w

08000920 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000920:	b410      	push	{r4}
 8000922:	2320      	movs	r3, #32
 8000924:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size) {
 8000928:	4c09      	ldr	r4, [pc, #36]	; (8000950 <chCoreAlloc+0x30>)
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <chCoreAlloc+0x34>)
 800092c:	6822      	ldr	r2, [r4, #0]
 800092e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000930:	1dc3      	adds	r3, r0, #7
 8000932:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000936:	1a89      	subs	r1, r1, r2
 8000938:	428b      	cmp	r3, r1
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800093a:	bf9d      	ittte	ls
 800093c:	189b      	addls	r3, r3, r2
 800093e:	6023      	strls	r3, [r4, #0]

  return p;
 8000940:	4610      	movls	r0, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size) {
    return NULL;
 8000942:	2000      	movhi	r0, #0
 8000944:	2300      	movs	r3, #0
 8000946:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800094a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20000a28 	.word	0x20000a28
 8000954:	20000b1c 	.word	0x20000b1c
 8000958:	f3af 8000 	nop.w
 800095c:	f3af 8000 	nop.w

08000960 <wakeup.lto_priv.133>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000960:	b410      	push	{r4}
 8000962:	2320      	movs	r3, #32
 8000964:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000968:	7f03      	ldrb	r3, [r0, #28]
 800096a:	2b07      	cmp	r3, #7
 800096c:	d80e      	bhi.n	800098c <wakeup.lto_priv.133+0x2c>
 800096e:	e8df f003 	tbb	[pc, r3]
 8000972:	0d27      	.short	0x0d27
 8000974:	0408230d 	.word	0x0408230d
 8000978:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 800097a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800097c:	6893      	ldr	r3, [r2, #8]
 800097e:	3301      	adds	r3, #1
 8000980:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000982:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000986:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000988:	6802      	ldr	r2, [r0, #0]
 800098a:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800098c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000990:	2200      	movs	r2, #0
 8000992:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <wakeup.lto_priv.133+0x6c>)
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000996:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000998:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800099a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	428a      	cmp	r2, r1
 80009a0:	d2fb      	bcs.n	800099a <wakeup.lto_priv.133+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80009a6:	6003      	str	r3, [r0, #0]
 80009a8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 80009aa:	6058      	str	r0, [r3, #4]
 80009ac:	6010      	str	r0, [r2, #0]
 80009ae:	f381 8811 	msr	BASEPRI, r1
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80009b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009b6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 80009b8:	6a03      	ldr	r3, [r0, #32]
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e7e5      	b.n	800098c <wakeup.lto_priv.133+0x2c>
 80009c0:	2300      	movs	r3, #0
 80009c2:	f383 8811 	msr	BASEPRI, r3
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80009c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	20000b78 	.word	0x20000b78

080009d0 <_idle_thread.lto_priv.63>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <_idle_thread.lto_priv.63+0xc>)
 80009d2:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <_idle_thread.lto_priv.63+0x10>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	e7fe      	b.n	80009d8 <_idle_thread.lto_priv.63+0x8>
 80009da:	bf00      	nop
 80009dc:	20000b78 	.word	0x20000b78
 80009e0:	08005920 	.word	0x08005920
 80009e4:	f3af 8000 	nop.w
 80009e8:	f3af 8000 	nop.w
 80009ec:	f3af 8000 	nop.w

080009f0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80009f0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80009f4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80009f6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80009fa:	2300      	movs	r3, #0
 80009fc:	f383 8811 	msr	BASEPRI, r3
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	f3af 8000 	nop.w
 8000a08:	f3af 8000 	nop.w
 8000a0c:	f3af 8000 	nop.w

08000a10 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000a12:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000a14:	b470      	push	{r4, r5, r6}

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8000a16:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000a18:	6994      	ldr	r4, [r2, #24]
 8000a1a:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000a1c:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8000a1e:	2500      	movs	r5, #0
 8000a20:	68a1      	ldr	r1, [r4, #8]
 8000a22:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000a24:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000a26:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000a28:	7725      	strb	r5, [r4, #28]
 8000a2a:	e000      	b.n	8000a2e <chSchDoRescheduleAhead+0x1e>
 8000a2c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	428a      	cmp	r2, r1
 8000a32:	d8fb      	bhi.n	8000a2c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000a38:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000a3a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;
 8000a3c:	605c      	str	r4, [r3, #4]
 8000a3e:	6014      	str	r4, [r2, #0]

  chSysSwitch(currp, otp);
}
 8000a40:	bc70      	pop	{r4, r5, r6}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000a42:	f7ff bf4d 	b.w	80008e0 <_port_switch>
 8000a46:	bf00      	nop
 8000a48:	20000b78 	.word	0x20000b78
 8000a4c:	f3af 8000 	nop.w

08000a50 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 8000a50:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 8000a52:	4852      	ldr	r0, [pc, #328]	; (8000b9c <Reset_Handler+0x14c>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 8000a54:	f380 8809 	msr	PSP, r0
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 8000a5e:	f3bf 8f6f 	isb	sy
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000a62:	494f      	ldr	r1, [pc, #316]	; (8000ba0 <Reset_Handler+0x150>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000a64:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <Reset_Handler+0x154>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000a66:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000a6a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000a6e:	640c      	str	r4, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000a70:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000a72:	680b      	ldr	r3, [r1, #0]
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000a7a:	680a      	ldr	r2, [r1, #0]
 8000a7c:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <Reset_Handler+0x150>)
 8000a7e:	0795      	lsls	r5, r2, #30
 8000a80:	d5fb      	bpl.n	8000a7a <Reset_Handler+0x2a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	f022 0203 	bic.w	r2, r2, #3
 8000a88:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000a8e:	4619      	mov	r1, r3
 8000a90:	688b      	ldr	r3, [r1, #8]
 8000a92:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <Reset_Handler+0x150>)
 8000a94:	f013 030c 	ands.w	r3, r3, #12
 8000a98:	d1fa      	bne.n	8000a90 <Reset_Handler+0x40>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8000aa0:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000aa2:	6093      	str	r3, [r2, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000aa4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000aac:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000aae:	493c      	ldr	r1, [pc, #240]	; (8000ba0 <Reset_Handler+0x150>)
 8000ab0:	079c      	lsls	r4, r3, #30
 8000ab2:	d5fb      	bpl.n	8000aac <Reset_Handler+0x5c>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <Reset_Handler+0x158>)
 8000ab6:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000ab8:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000aba:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <Reset_Handler+0x154>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac0:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000ac2:	6853      	ldr	r3, [r2, #4]
 8000ac4:	0459      	lsls	r1, r3, #17
 8000ac6:	d5fc      	bpl.n	8000ac2 <Reset_Handler+0x72>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000ac8:	4935      	ldr	r1, [pc, #212]	; (8000ba0 <Reset_Handler+0x150>)
 8000aca:	680a      	ldr	r2, [r1, #0]
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <Reset_Handler+0x150>)
 8000ace:	0192      	lsls	r2, r2, #6
 8000ad0:	d5fb      	bpl.n	8000aca <Reset_Handler+0x7a>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000ad2:	4a36      	ldr	r2, [pc, #216]	; (8000bac <Reset_Handler+0x15c>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000ad4:	4936      	ldr	r1, [pc, #216]	; (8000bb0 <Reset_Handler+0x160>)
 8000ad6:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000ad8:	f240 7103 	movw	r1, #1795	; 0x703
 8000adc:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	f042 0202 	orr.w	r2, r2, #2
 8000ae4:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	6893      	ldr	r3, [r2, #8]
 8000aea:	492d      	ldr	r1, [pc, #180]	; (8000ba0 <Reset_Handler+0x150>)
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d1f9      	bne.n	8000ae8 <Reset_Handler+0x98>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000af4:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <Reset_Handler+0x164>)
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <Reset_Handler+0x168>)
 8000afa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000afe:	644c      	str	r4, [r1, #68]	; 0x44
 8000b00:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b08:	664c      	str	r4, [r1, #100]	; 0x64
 8000b0a:	d20b      	bcs.n	8000b24 <Reset_Handler+0xd4>
 8000b0c:	43d9      	mvns	r1, r3
 8000b0e:	440a      	add	r2, r1
 8000b10:	f022 0203 	bic.w	r2, r2, #3
 8000b14:	3204      	adds	r2, #4
 8000b16:	441a      	add	r2, r3
 8000b18:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8000b1c:	f843 1b04 	str.w	r1, [r3], #4
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d1fb      	bne.n	8000b1c <Reset_Handler+0xcc>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <Reset_Handler+0x16c>)
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d20c      	bcs.n	8000b44 <Reset_Handler+0xf4>
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <Reset_Handler+0x170>)
 8000b2c:	1d19      	adds	r1, r3, #4
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	f022 0203 	bic.w	r2, r2, #3
 8000b34:	3204      	adds	r2, #4
 8000b36:	441a      	add	r2, r3
 8000b38:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8000b3c:	f843 1b04 	str.w	r1, [r3], #4
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d1fb      	bne.n	8000b3c <Reset_Handler+0xec>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <Reset_Handler+0x174>)
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <Reset_Handler+0x178>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d20c      	bcs.n	8000b66 <Reset_Handler+0x116>
 8000b4c:	43d0      	mvns	r0, r2
 8000b4e:	4418      	add	r0, r3
 8000b50:	f020 0003 	bic.w	r0, r0, #3
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <Reset_Handler+0x17c>)
 8000b56:	3004      	adds	r0, #4
 8000b58:	4418      	add	r0, r3
      *dp++ = *tp++;
 8000b5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8000b5e:	f842 1b04 	str.w	r1, [r2], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8000b62:	4283      	cmp	r3, r0
 8000b64:	d1f9      	bne.n	8000b5a <Reset_Handler+0x10a>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <Reset_Handler+0x180>)
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <Reset_Handler+0x184>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d20a      	bcs.n	8000b84 <Reset_Handler+0x134>
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	440a      	add	r2, r1
 8000b72:	f022 0203 	bic.w	r2, r2, #3
 8000b76:	3204      	adds	r2, #4
 8000b78:	441a      	add	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f843 1b04 	str.w	r1, [r3], #4
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d1fb      	bne.n	8000b7c <Reset_Handler+0x12c>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8000b84:	4c14      	ldr	r4, [pc, #80]	; (8000bd8 <Reset_Handler+0x188>)
 8000b86:	4d15      	ldr	r5, [pc, #84]	; (8000bdc <Reset_Handler+0x18c>)
 8000b88:	42ac      	cmp	r4, r5
 8000b8a:	d204      	bcs.n	8000b96 <Reset_Handler+0x146>
      (*fpp)();
 8000b8c:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b90:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8000b92:	42ac      	cmp	r4, r5
 8000b94:	d3fa      	bcc.n	8000b8c <Reset_Handler+0x13c>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 8000b96:	f7ff fb13 	bl	80001c0 <main>
 8000b9a:	bf00      	nop
 8000b9c:	20000800 	.word	0x20000800
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	08016010 	.word	0x08016010
 8000bac:	40023c00 	.word	0x40023c00
 8000bb0:	38081000 	.word	0x38081000
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000400 	.word	0x20000400
 8000bbc:	20000400 	.word	0x20000400
 8000bc0:	20000803 	.word	0x20000803
 8000bc4:	20000800 	.word	0x20000800
 8000bc8:	200008b8 	.word	0x200008b8
 8000bcc:	08006560 	.word	0x08006560
 8000bd0:	200008b8 	.word	0x200008b8
 8000bd4:	20001378 	.word	0x20001378
 8000bd8:	080001c0 	.word	0x080001c0
 8000bdc:	080001c0 	.word	0x080001c0

08000be0 <print_line.lto_priv.119>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4e09      	ldr	r6, [pc, #36]	; (8000c08 <print_line.lto_priv.119+0x28>)
 8000be4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8000be6:	6830      	ldr	r0, [r6, #0]
 8000be8:	4d07      	ldr	r5, [pc, #28]	; (8000c08 <print_line.lto_priv.119+0x28>)
 8000bea:	6803      	ldr	r3, [r0, #0]
 8000bec:	212d      	movs	r1, #45	; 0x2d
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8000bf2:	3c01      	subs	r4, #1
 8000bf4:	d1f7      	bne.n	8000be6 <print_line.lto_priv.119+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8000bf6:	6828      	ldr	r0, [r5, #0]
 8000bf8:	4904      	ldr	r1, [pc, #16]	; (8000c0c <print_line.lto_priv.119+0x2c>)
 8000bfa:	6803      	ldr	r3, [r0, #0]
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8000c04:	4718      	bx	r3
 8000c06:	bf00      	nop
 8000c08:	20000ae4 	.word	0x20000ae4
 8000c0c:	08005928 	.word	0x08005928

08000c10 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <test_terminate_threads+0x2c>)
 8000c12:	b430      	push	{r4, r5}
 8000c14:	f103 0014 	add.w	r0, r3, #20
 8000c18:	2520      	movs	r5, #32
 8000c1a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8000c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c20:	b13a      	cbz	r2, 8000c32 <test_terminate_threads+0x22>
 8000c22:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8000c26:	7f51      	ldrb	r1, [r2, #29]
 8000c28:	f041 0104 	orr.w	r1, r1, #4
 8000c2c:	7751      	strb	r1, [r2, #29]
 8000c2e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8000c32:	4283      	cmp	r3, r0
 8000c34:	d1f2      	bne.n	8000c1c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8000c36:	bc30      	pop	{r4, r5}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000a40 	.word	0x20000a40

08000c40 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8000c40:	b410      	push	{r4}
 8000c42:	2320      	movs	r3, #32
 8000c44:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c48:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8000c50:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 8000c54:	1a64      	subs	r4, r4, r1
 8000c56:	1a52      	subs	r2, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8000c58:	4294      	cmp	r4, r2
 8000c5a:	d306      	bcc.n	8000c6a <_test_assert_time_window+0x2a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000c5c:	4c05      	ldr	r4, [pc, #20]	; (8000c74 <_test_assert_time_window+0x34>)
  global_fail = TRUE;
 8000c5e:	4906      	ldr	r1, [pc, #24]	; (8000c78 <_test_assert_time_window+0x38>)
  failpoint = point;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
 8000c66:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8000c68:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000a54 	.word	0x20000a54
 8000c78:	20000a2c 	.word	0x20000a2c
 8000c7c:	200008b8 	.word	0x200008b8

08000c80 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8000c80:	b4f0      	push	{r4, r5, r6, r7}
 8000c82:	4e0e      	ldr	r6, [pc, #56]	; (8000cbc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8000c84:	4f0e      	ldr	r7, [pc, #56]	; (8000cc0 <_test_assert_sequence+0x40>)
 8000c86:	6835      	ldr	r5, [r6, #0]
 8000c88:	463b      	mov	r3, r7
 8000c8a:	e005      	b.n	8000c98 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 8000c8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000c90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000c94:	4294      	cmp	r4, r2
 8000c96:	d107      	bne.n	8000ca8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d3f7      	bcc.n	8000c8c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8000c9c:	780b      	ldrb	r3, [r1, #0]
 8000c9e:	b91b      	cbnz	r3, 8000ca8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8000ca0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000ca8:	4c06      	ldr	r4, [pc, #24]	; (8000cc4 <_test_assert_sequence+0x44>)
  global_fail = TRUE;
 8000caa:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <_test_assert_sequence+0x48>)
  failpoint = point;
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8000cb2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8000cb4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000b08 	.word	0x20000b08
 8000cc0:	20000b0c 	.word	0x20000b0c
 8000cc4:	20000a54 	.word	0x20000a54
 8000cc8:	20000a2c 	.word	0x20000a2c
 8000ccc:	200008b8 	.word	0x200008b8

08000cd0 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8000cd0:	b959      	cbnz	r1, 8000cea <_test_assert+0x1a>
  global_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8000cd2:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000cd6:	4c07      	ldr	r4, [pc, #28]	; (8000cf4 <_test_assert+0x24>)
  global_fail = TRUE;
  failpoint = point;
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8000cde:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8000ce0:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ce8:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	4770      	bx	lr
 8000cf0:	20000a2c 	.word	0x20000a2c
 8000cf4:	20000a54 	.word	0x20000a54
 8000cf8:	200008b8 	.word	0x200008b8
 8000cfc:	f3af 8000 	nop.w

08000d00 <test_emit_token>:
 8000d00:	2320      	movs	r3, #32
 8000d02:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <test_emit_token+0x18>)
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	1c59      	adds	r1, r3, #1
 8000d0c:	6011      	str	r1, [r2, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	7018      	strb	r0, [r3, #0]
 8000d12:	f382 8811 	msr	BASEPRI, r2
 8000d16:	4770      	bx	lr
 8000d18:	20000b08 	.word	0x20000b08
 8000d1c:	f3af 8000 	nop.w

08000d20 <thread>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8000d20:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8000d22:	7800      	ldrb	r0, [r0, #0]
 8000d24:	f7ff ffec 	bl	8000d00 <test_emit_token>
  return 0;
}
 8000d28:	2000      	movs	r0, #0
 8000d2a:	bd08      	pop	{r3, pc}
 8000d2c:	f3af 8000 	nop.w

08000d30 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8000d30:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d32:	7801      	ldrb	r1, [r0, #0]
 8000d34:	4d09      	ldr	r5, [pc, #36]	; (8000d5c <test_println+0x2c>)
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8000d36:	4604      	mov	r4, r0
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d38:	b139      	cbz	r1, 8000d4a <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 8000d3a:	6828      	ldr	r0, [r5, #0]
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d42:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d1f7      	bne.n	8000d3a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8000d4a:	6828      	ldr	r0, [r5, #0]
 8000d4c:	4904      	ldr	r1, [pc, #16]	; (8000d60 <test_println+0x30>)
 8000d4e:	6803      	ldr	r3, [r0, #0]
 8000d50:	2202      	movs	r2, #2
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8000d58:	4718      	bx	r3
 8000d5a:	bf00      	nop
 8000d5c:	20000ae4 	.word	0x20000ae4
 8000d60:	08005928 	.word	0x08005928
 8000d64:	f3af 8000 	nop.w
 8000d68:	f3af 8000 	nop.w
 8000d6c:	f3af 8000 	nop.w

08000d70 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8000d70:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8000d72:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8000d74:	4604      	mov	r4, r0

  while (*msgp)
 8000d76:	b141      	cbz	r1, 8000d8a <test_print+0x1a>
 8000d78:	4d04      	ldr	r5, [pc, #16]	; (8000d8c <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 8000d7a:	6828      	ldr	r0, [r5, #0]
 8000d7c:	6803      	ldr	r3, [r0, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d82:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d1f7      	bne.n	8000d7a <test_print+0xa>
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	20000ae4 	.word	0x20000ae4

08000d90 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8000d90:	b310      	cbz	r0, 8000dd8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8000d92:	b570      	push	{r4, r5, r6, lr}
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <test_printn+0x54>)
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8000d96:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8000d98:	466d      	mov	r5, sp
 8000d9a:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8000d9c:	fba2 1300 	umull	r1, r3, r2, r0
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000da6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8000daa:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000dae:	b2c9      	uxtb	r1, r1
 8000db0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8000db4:	4618      	mov	r0, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	d90a      	bls.n	8000dd4 <test_printn+0x44>
 8000dbe:	4e0a      	ldr	r6, [pc, #40]	; (8000de8 <test_printn+0x58>)
 8000dc0:	3c01      	subs	r4, #1
 8000dc2:	e001      	b.n	8000dc8 <test_printn+0x38>
 8000dc4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8000dc8:	6830      	ldr	r0, [r6, #0]
 8000dca:	6803      	ldr	r3, [r0, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8000dd0:	42ac      	cmp	r4, r5
 8000dd2:	d1f7      	bne.n	8000dc4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <test_printn+0x58>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	6803      	ldr	r3, [r0, #0]
 8000dde:	2130      	movs	r1, #48	; 0x30
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4718      	bx	r3
 8000de4:	cccccccd 	.word	0xcccccccd
 8000de8:	20000ae4 	.word	0x20000ae4
 8000dec:	f3af 8000 	nop.w

08000df0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000df0:	b508      	push	{r3, lr}
 8000df2:	2220      	movs	r2, #32
 8000df4:	4603      	mov	r3, r0
 8000df6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL) {
 8000dfa:	6800      	ldr	r0, [r0, #0]
 8000dfc:	b128      	cbz	r0, 8000e0a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8000dfe:	6802      	ldr	r2, [r0, #0]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000e08:	bd08      	pop	{r3, pc}
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d0f8      	beq.n	8000e02 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8000e10:	6858      	ldr	r0, [r3, #4]
 8000e12:	4790      	blx	r2
 8000e14:	2300      	movs	r3, #0
 8000e16:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000e1a:	bd08      	pop	{r3, pc}
 8000e1c:	f3af 8000 	nop.w

08000e20 <chEvtUnregister>:
 8000e20:	2320      	movs	r3, #32
 8000e22:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8000e26:	4602      	mov	r2, r0
 8000e28:	e002      	b.n	8000e30 <chEvtUnregister+0x10>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d007      	beq.n	8000e3e <chEvtUnregister+0x1e>
 8000e2e:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	4283      	cmp	r3, r0
 8000e34:	d1f9      	bne.n	8000e2a <chEvtUnregister+0xa>
 8000e36:	2300      	movs	r3, #0
 8000e38:	f383 8811 	msr	BASEPRI, r3
 8000e3c:	4770      	bx	lr
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8000e3e:	680b      	ldr	r3, [r1, #0]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w

08000e50 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2320      	movs	r3, #32
 8000e54:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <chThdYield+0x50>)
 8000e5a:	6810      	ldr	r0, [r2, #0]
 8000e5c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000e5e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000e60:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d203      	bcs.n	8000e6e <chThdYield+0x1e>
 8000e66:	2300      	movs	r3, #0
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000e72:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e74:	2500      	movs	r5, #0
 8000e76:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000e78:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000e7a:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e7c:	7725      	strb	r5, [r4, #28]
 8000e7e:	e000      	b.n	8000e82 <chThdYield+0x32>
 8000e80:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d9fb      	bls.n	8000e80 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000e8c:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000e8e:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8000e90:	605c      	str	r4, [r3, #4]
 8000e92:	6014      	str	r4, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000e94:	f7ff fd24 	bl	80008e0 <_port_switch>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	20000b78 	.word	0x20000b78
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	f3af 8000 	nop.w
 8000eac:	f3af 8000 	nop.w

08000eb0 <chVTDoResetI>:
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000eb0:	6802      	ldr	r2, [r0, #0]
 8000eb2:	6883      	ldr	r3, [r0, #8]
 8000eb4:	6891      	ldr	r1, [r2, #8]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000eb6:	b430      	push	{r4, r5}
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000eb8:	4c13      	ldr	r4, [pc, #76]	; (8000f08 <chVTDoResetI+0x58>)
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8000eba:	6845      	ldr	r5, [r0, #4]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000ebc:	4419      	add	r1, r3
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ebe:	4623      	mov	r3, r4
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000ec0:	6091      	str	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8000ec2:	602a      	str	r2, [r5, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8000ec4:	6801      	ldr	r1, [r0, #0]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ec6:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8000eca:	604d      	str	r5, [r1, #4]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ecc:	429a      	cmp	r2, r3

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 8000ece:	f04f 0100 	mov.w	r1, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000ed2:	f04f 35ff 	mov.w	r5, #4294967295

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 8000ed6:	60c1      	str	r1, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000ed8:	6265      	str	r5, [r4, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000eda:	d010      	beq.n	8000efe <chVTDoResetI+0x4e>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA) {
 8000edc:	6893      	ldr	r3, [r2, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d906      	bls.n	8000ef0 <chVTDoResetI+0x40>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8000ee2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000ee4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ee8:	4413      	add	r3, r2
 8000eea:	634b      	str	r3, [r1, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
      }
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000eec:	bc30      	pop	{r4, r5}
 8000eee:	4770      	bx	lr
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA) {
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      }
      else {
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8000ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	6353      	str	r3, [r2, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
      }
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000efa:	bc30      	pop	{r4, r5}
 8000efc:	4770      	bx	lr
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f02:	60d9      	str	r1, [r3, #12]
 8000f04:	e7f2      	b.n	8000eec <chVTDoResetI+0x3c>
 8000f06:	bf00      	nop
 8000f08:	20000b78 	.word	0x20000b78
 8000f0c:	f3af 8000 	nop.w

08000f10 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8000f12:	4d1a      	ldr	r5, [pc, #104]	; (8000f7c <chVTDoSetI+0x6c>)
 8000f14:	462e      	mov	r6, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000f16:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000f1a:	f856 4f1c 	ldr.w	r4, [r6, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000f1e:	60c2      	str	r2, [r0, #12]
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA) {
      delay = CH_CFG_ST_TIMEDELTA;
 8000f20:	2901      	cmp	r1, #1
 8000f22:	bf98      	it	ls
 8000f24:	2102      	movls	r1, #2
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8000f26:	42b4      	cmp	r4, r6
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000f28:	6103      	str	r3, [r0, #16]
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA) {
      delay = CH_CFG_ST_TIMEDELTA;
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8000f2c:	d01b      	beq.n	8000f66 <chVTDoSetI+0x56>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8000f2e:	6aae      	ldr	r6, [r5, #40]	; 0x28

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
 8000f30:	68a3      	ldr	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8000f32:	1b92      	subs	r2, r2, r6
 8000f34:	4411      	add	r1, r2

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
 8000f36:	4299      	cmp	r1, r3
 8000f38:	d203      	bcs.n	8000f42 <chVTDoSetI+0x32>
 8000f3a:	e011      	b.n	8000f60 <chVTDoSetI+0x50>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
    p = p->vt_next;
 8000f3c:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8000f3e:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8000f40:	68a3      	ldr	r3, [r4, #8]
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d3fa      	bcc.n	8000f3c <chVTDoSetI+0x2c>
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	6043      	str	r3, [r0, #4]
 8000f4a:	6004      	str	r4, [r0, #0]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8000f4c:	6060      	str	r0, [r4, #4]
 8000f4e:	6018      	str	r0, [r3, #0]
  vtp->vt_delta = delay
 8000f50:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8000f52:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8000f58:	1a59      	subs	r1, r3, r1
 8000f5a:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f5c:	626a      	str	r2, [r5, #36]	; 0x24
 8000f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta) {
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8000f60:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f62:	637e      	str	r6, [r7, #52]	; 0x34
 8000f64:	e7ed      	b.n	8000f42 <chVTDoSetI+0x32>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000f66:	188b      	adds	r3, r1, r2
    }

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8000f68:	62aa      	str	r2, [r5, #40]	; 0x28
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8000f6a:	f04f 0e00 	mov.w	lr, #0
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f70:	2602      	movs	r6, #2
 8000f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8000f74:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f78:	60fe      	str	r6, [r7, #12]
 8000f7a:	e7e2      	b.n	8000f42 <chVTDoSetI+0x32>
 8000f7c:	20000b78 	.word	0x20000b78

08000f80 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000f80:	f7ff bd46 	b.w	8000a10 <chSchDoRescheduleAhead>
 8000f84:	f3af 8000 	nop.w
 8000f88:	f3af 8000 	nop.w
 8000f8c:	f3af 8000 	nop.w

08000f90 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <chSchRescheduleS+0x14>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000f96:	6892      	ldr	r2, [r2, #8]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d800      	bhi.n	8000fa0 <chSchRescheduleS+0x10>
 8000f9e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8000fa0:	f7ff bd36 	b.w	8000a10 <chSchDoRescheduleAhead>
 8000fa4:	20000b78 	.word	0x20000b78
 8000fa8:	f3af 8000 	nop.w
 8000fac:	f3af 8000 	nop.w

08000fb0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <chThdSetPriority+0x2c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 8000fbe:	6899      	ldr	r1, [r3, #8]
 8000fc0:	428c      	cmp	r4, r1
 8000fc2:	d001      	beq.n	8000fc8 <chThdSetPriority+0x18>
 8000fc4:	4281      	cmp	r1, r0
 8000fc6:	d200      	bcs.n	8000fca <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8000fc8:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 8000fca:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8000fcc:	f7ff ffe0 	bl	8000f90 <chSchRescheduleS>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000b78 	.word	0x20000b78

08000fe0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000fe2:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000fe4:	699e      	ldr	r6, [r3, #24]
 8000fe6:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000fe8:	4605      	mov	r5, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000fea:	68b0      	ldr	r0, [r6, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000fec:	6229      	str	r1, [r5, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000fee:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000ff0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000ff4:	d80b      	bhi.n	800100e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000ff6:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000ff8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	4294      	cmp	r4, r2
 8000ffe:	d9fb      	bls.n	8000ff8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001004:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8001006:	605d      	str	r5, [r3, #4]
 8001008:	6015      	str	r5, [r2, #0]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800100a:	bcf0      	pop	{r4, r5, r6, r7}
 800100c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800100e:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001010:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8001012:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001014:	6891      	ldr	r1, [r2, #8]
 8001016:	4288      	cmp	r0, r1
 8001018:	d9fb      	bls.n	8001012 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800101a:	6854      	ldr	r4, [r2, #4]
 800101c:	6074      	str	r4, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800101e:	2701      	movs	r7, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001020:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8001022:	6056      	str	r6, [r2, #4]
 8001024:	6026      	str	r6, [r4, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001026:	772f      	strb	r7, [r5, #28]
    chSysSwitch(ntp, otp);
 8001028:	4631      	mov	r1, r6
 800102a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800102c:	619d      	str	r5, [r3, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800102e:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001030:	f7ff bc56 	b.w	80008e0 <_port_switch>
 8001034:	20000b78 	.word	0x20000b78
 8001038:	f3af 8000 	nop.w
 800103c:	f3af 8000 	nop.w

08001040 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001042:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001044:	699d      	ldr	r5, [r3, #24]
 8001046:	2320      	movs	r3, #32
 8001048:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800104c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800104e:	68c3      	ldr	r3, [r0, #12]
 8001050:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001052:	42a0      	cmp	r0, r4
 8001054:	d01c      	beq.n	8001090 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001056:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001058:	b14b      	cbz	r3, 800106e <chMtxUnlock+0x2e>
 800105a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800105c:	4293      	cmp	r3, r2
 800105e:	d003      	beq.n	8001068 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001060:	6892      	ldr	r2, [r2, #8]
 8001062:	4291      	cmp	r1, r2
 8001064:	bf38      	it	cc
 8001066:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001068:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f5      	bne.n	800105a <chMtxUnlock+0x1a>
 800106e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001070:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001072:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001074:	60a9      	str	r1, [r5, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001076:	4620      	mov	r0, r4
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	2100      	movs	r1, #0
 800107c:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800107e:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8001080:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001082:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001084:	f7ff ffac 	bl	8000fe0 <chSchWakeupS>
 8001088:	2300      	movs	r3, #0
 800108a:	f383 8811 	msr	BASEPRI, r3
 800108e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001090:	2300      	movs	r3, #0
 8001092:	6083      	str	r3, [r0, #8]
 8001094:	2300      	movs	r3, #0
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	20000b78 	.word	0x20000b78

080010a0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80010a0:	b508      	push	{r3, lr}
 80010a2:	2320      	movs	r3, #32
 80010a4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0) {
 80010a8:	6883      	ldr	r3, [r0, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	6083      	str	r3, [r0, #8]
 80010b0:	dd03      	ble.n	80010ba <chSemSignal+0x1a>
 80010b2:	2300      	movs	r3, #0
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	bd08      	pop	{r3, pc}
 80010ba:	4603      	mov	r3, r0
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80010bc:	6800      	ldr	r0, [r0, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80010be:	6802      	ldr	r2, [r0, #0]
 80010c0:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 80010c2:	2100      	movs	r1, #0
 80010c4:	6053      	str	r3, [r2, #4]
 80010c6:	f7ff ff8b 	bl	8000fe0 <chSchWakeupS>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	bd08      	pop	{r3, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	f3af 8000 	nop.w
 80010dc:	f3af 8000 	nop.w

080010e0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80010e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e4:	4699      	mov	r9, r3
 80010e6:	4604      	mov	r4, r0
 80010e8:	2320      	movs	r3, #32
 80010ea:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010ee:	4e1a      	ldr	r6, [pc, #104]	; (8001158 <chThdCreateStatic+0x78>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <chThdCreateStatic+0x7c>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010f2:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80010f4:	3924      	subs	r1, #36	; 0x24
 80010f6:	eb00 0a01 	add.w	sl, r0, r1
 80010fa:	f8c0 a00c 	str.w	sl, [r0, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80010fe:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001100:	f840 9001 	str.w	r9, [r0, r1]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001104:	f04f 0c01 	mov.w	ip, #1
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001108:	f100 0928 	add.w	r9, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800110c:	9908      	ldr	r1, [sp, #32]
 800110e:	f8ca 1004 	str.w	r1, [sl, #4]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001112:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001116:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800111a:	f8ca 3020 	str.w	r3, [sl, #32]
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 800111e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001120:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001122:	6106      	str	r6, [r0, #16]
 8001124:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001126:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001128:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 800112c:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001130:	7745      	strb	r5, [r0, #29]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001132:	6170      	str	r0, [r6, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001134:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001136:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001138:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 800113a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800113c:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001140:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8001144:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001148:	f7ff ff4a 	bl	8000fe0 <chSchWakeupS>
 800114c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8001150:	4620      	mov	r0, r4
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	bf00      	nop
 8001158:	20000b78 	.word	0x20000b78
 800115c:	080008f1 	.word	0x080008f1

08001160 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001162:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001164:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001166:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001168:	6814      	ldr	r4, [r2, #0]
 800116a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800116c:	2501      	movs	r5, #1
 800116e:	6063      	str	r3, [r4, #4]
 8001170:	7715      	strb	r5, [r2, #28]
 8001172:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001174:	4610      	mov	r0, r2
}
 8001176:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001178:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800117a:	f7ff bbb1 	b.w	80008e0 <_port_switch>
 800117e:	bf00      	nop
 8001180:	20000b78 	.word	0x20000b78
 8001184:	f3af 8000 	nop.w
 8001188:	f3af 8000 	nop.w
 800118c:	f3af 8000 	nop.w

08001190 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001190:	b510      	push	{r4, lr}
 8001192:	2320      	movs	r3, #32
 8001194:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8001198:	4c0b      	ldr	r4, [pc, #44]	; (80011c8 <chMsgWait+0x38>)
 800119a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800119c:	4613      	mov	r3, r2
 800119e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80011a2:	4298      	cmp	r0, r3
 80011a4:	d008      	beq.n	80011b8 <chMsgWait+0x28>
 80011a6:	6801      	ldr	r1, [r0, #0]
 80011a8:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80011aa:	220d      	movs	r2, #13
 80011ac:	604b      	str	r3, [r1, #4]
 80011ae:	2300      	movs	r3, #0
 80011b0:	7702      	strb	r2, [r0, #28]
 80011b2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80011b6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 80011b8:	200e      	movs	r0, #14
 80011ba:	f7ff ffd1 	bl	8001160 <chSchGoSleepS>
 80011be:	69a2      	ldr	r2, [r4, #24]
 80011c0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80011c2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80011c6:	e7ee      	b.n	80011a6 <chMsgWait+0x16>
 80011c8:	20000b78 	.word	0x20000b78
 80011cc:	f3af 8000 	nop.w

080011d0 <chSemWait>:
 80011d0:	2320      	movs	r3, #32
 80011d2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 80011d6:	6883      	ldr	r3, [r0, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	6083      	str	r3, [r0, #8]
 80011de:	db04      	blt.n	80011ea <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	2300      	movs	r3, #0
 80011e4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80011e8:	4770      	bx	lr
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80011ea:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 80011ec:	4c08      	ldr	r4, [pc, #32]	; (8001210 <chSemWait+0x40>)
 80011ee:	69a2      	ldr	r2, [r4, #24]
 80011f0:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80011f2:	6841      	ldr	r1, [r0, #4]
 80011f4:	6051      	str	r1, [r2, #4]
 80011f6:	4603      	mov	r3, r0
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80011f8:	6010      	str	r0, [r2, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
 80011fa:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80011fc:	2005      	movs	r0, #5
 80011fe:	600a      	str	r2, [r1, #0]
 8001200:	f7ff ffae 	bl	8001160 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8001204:	69a3      	ldr	r3, [r4, #24]
 8001206:	6a18      	ldr	r0, [r3, #32]
 8001208:	2300      	movs	r3, #0
 800120a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 800120e:	bd10      	pop	{r4, pc}
 8001210:	20000b78 	.word	0x20000b78
 8001214:	f3af 8000 	nop.w
 8001218:	f3af 8000 	nop.w
 800121c:	f3af 8000 	nop.w

08001220 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001220:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001222:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001224:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001226:	d012      	beq.n	800124e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001228:	4c0c      	ldr	r4, [pc, #48]	; (800125c <chSchGoSleepTimeoutS+0x3c>)
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <chSchGoSleepTimeoutS+0x40>)
 800122c:	69a3      	ldr	r3, [r4, #24]
 800122e:	4605      	mov	r5, r0
 8001230:	a801      	add	r0, sp, #4
 8001232:	f7ff fe6d 	bl	8000f10 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001236:	4628      	mov	r0, r5
 8001238:	f7ff ff92 	bl	8001160 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 800123c:	9b04      	ldr	r3, [sp, #16]
 800123e:	b113      	cbz	r3, 8001246 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001240:	a801      	add	r0, sp, #4
 8001242:	f7ff fe35 	bl	8000eb0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001246:	69a3      	ldr	r3, [r4, #24]
}
 8001248:	6a18      	ldr	r0, [r3, #32]
 800124a:	b007      	add	sp, #28
 800124c:	bd30      	pop	{r4, r5, pc}
 800124e:	4c03      	ldr	r4, [pc, #12]	; (800125c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else {
    chSchGoSleepS(newstate);
 8001250:	f7ff ff86 	bl	8001160 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8001254:	69a3      	ldr	r3, [r4, #24]
}
 8001256:	6a18      	ldr	r0, [r3, #32]
 8001258:	b007      	add	sp, #28
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	20000b78 	.word	0x20000b78
 8001260:	08000961 	.word	0x08000961
 8001264:	f3af 8000 	nop.w
 8001268:	f3af 8000 	nop.w
 800126c:	f3af 8000 	nop.w

08001270 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001270:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001272:	6880      	ldr	r0, [r0, #8]
 8001274:	1e42      	subs	r2, r0, #1
 8001276:	2a00      	cmp	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	db01      	blt.n	8001280 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 800127c:	2000      	movs	r0, #0
 800127e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001280:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8001282:	b161      	cbz	r1, 800129e <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <chSemWaitTimeoutS+0x3c>)
 8001286:	6992      	ldr	r2, [r2, #24]
 8001288:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800128a:	685c      	ldr	r4, [r3, #4]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800128c:	2005      	movs	r0, #5
 800128e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	6022      	str	r2, [r4, #0]
  }

  return MSG_OK;
}
 8001296:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800129a:	f7ff bfc1 	b.w	8001220 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 800129e:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80012a0:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000b78 	.word	0x20000b78

080012b0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80012b0:	b169      	cbz	r1, 80012ce <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80012b4:	b410      	push	{r4}
 80012b6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80012b8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80012ba:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012bc:	2004      	movs	r0, #4
 80012be:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 80012c2:	6053      	str	r3, [r2, #4]
 80012c4:	6023      	str	r3, [r4, #0]
}
 80012c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012ca:	f7ff bfa9 	b.w	8001220 <chSchGoSleepTimeoutS>
}
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295
 80012d2:	4770      	bx	lr
 80012d4:	20000b78 	.word	0x20000b78
 80012d8:	f3af 8000 	nop.w
 80012dc:	f3af 8000 	nop.w

080012e0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 80012e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e4:	b083      	sub	sp, #12
 80012e6:	4604      	mov	r4, r0
 80012e8:	468b      	mov	fp, r1
 80012ea:	4616      	mov	r6, r2
 80012ec:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80012ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80012f2:	f04f 0920 	mov.w	r9, #32
 80012f6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 80012fa:	2700      	movs	r7, #0
 80012fc:	f8cd 9000 	str.w	r9, [sp]
 8001300:	46ba      	mov	sl, r7
 8001302:	68a5      	ldr	r5, [r4, #8]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001304:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8001308:	1e6a      	subs	r2, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy) {
      nfy(oqp);
 800130a:	4620      	mov	r0, r4

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800130c:	b30d      	cbz	r5, 8001352 <chOQWriteTimeout+0x72>
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800130e:	6963      	ldr	r3, [r4, #20]
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8001310:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	6162      	str	r2, [r4, #20]
 8001316:	f89b 2000 	ldrb.w	r2, [fp]
 800131a:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800131c:	6923      	ldr	r3, [r4, #16]
 800131e:	6962      	ldr	r2, [r4, #20]
 8001320:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001322:	bf24      	itt	cs
 8001324:	68e3      	ldrcs	r3, [r4, #12]
 8001326:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy) {
 8001328:	f1b8 0f00 	cmp.w	r8, #0
 800132c:	d000      	beq.n	8001330 <chOQWriteTimeout+0x50>
      nfy(oqp);
 800132e:	47c0      	blx	r8
 8001330:	f38a 8811 	msr	BASEPRI, sl
    }

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
    if (--n == 0) {
 8001334:	3e01      	subs	r6, #1
    if (nfy) {
      nfy(oqp);
    }

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 8001336:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0) {
 800133a:	d012      	beq.n	8001362 <chOQWriteTimeout+0x82>
 800133c:	9b00      	ldr	r3, [sp, #0]
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	68a5      	ldr	r5, [r4, #8]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001344:	46cb      	mov	fp, r9
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8001346:	1e6a      	subs	r2, r5, #1
    *oqp->q_wrptr++ = *bp++;
 8001348:	f10b 0901 	add.w	r9, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy) {
      nfy(oqp);
 800134c:	4620      	mov	r0, r4

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800134e:	2d00      	cmp	r5, #0
 8001350:	d1dd      	bne.n	800130e <chOQWriteTimeout+0x2e>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 8001352:	4620      	mov	r0, r4
 8001354:	9901      	ldr	r1, [sp, #4]
 8001356:	f7ff ffab 	bl	80012b0 <chThdEnqueueTimeoutS>
 800135a:	2800      	cmp	r0, #0
 800135c:	d0d1      	beq.n	8001302 <chOQWriteTimeout+0x22>
 800135e:	f385 8811 	msr	BASEPRI, r5
    if (--n == 0) {
      return w;
    }
    chSysLock();
  }
}
 8001362:	4638      	mov	r0, r7
 8001364:	b003      	add	sp, #12
 8001366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w

08001370 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	4604      	mov	r4, r0
 8001374:	460f      	mov	r7, r1
 8001376:	4616      	mov	r6, r2
 8001378:	2320      	movs	r3, #32
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	e003      	b.n	8001388 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8001380:	f7ff ff96 	bl	80012b0 <chThdEnqueueTimeoutS>
 8001384:	2800      	cmp	r0, #0
 8001386:	db18      	blt.n	80013ba <chOQPutTimeout+0x4a>
 8001388:	68a5      	ldr	r5, [r4, #8]
 800138a:	4620      	mov	r0, r4
 800138c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800138e:	2d00      	cmp	r5, #0
 8001390:	d0f6      	beq.n	8001380 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001392:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001394:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800139a:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 800139c:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800139e:	6923      	ldr	r3, [r4, #16]
 80013a0:	6962      	ldr	r2, [r4, #20]
 80013a2:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80013a4:	bf24      	itt	cs
 80013a6:	68e3      	ldrcs	r3, [r4, #12]
 80013a8:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify) {
 80013aa:	69e3      	ldr	r3, [r4, #28]
 80013ac:	b10b      	cbz	r3, 80013b2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 80013ae:	4620      	mov	r0, r4
 80013b0:	4798      	blx	r3
 80013b2:	2000      	movs	r0, #0
 80013b4:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80013b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ba:	f385 8811 	msr	BASEPRI, r5
 80013be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013c0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 80013c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	b083      	sub	sp, #12
 80013c8:	4689      	mov	r9, r1
 80013ca:	4693      	mov	fp, r2
 80013cc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80013ce:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80013d2:	2720      	movs	r7, #32
 80013d4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80013d8:	2600      	movs	r6, #0
 80013da:	9701      	str	r7, [sp, #4]
 80013dc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy) {
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d005      	beq.n	80013f0 <chIQReadTimeout+0x30>
      nfy(iqp);
 80013e4:	4620      	mov	r0, r4
 80013e6:	47c0      	blx	r8
 80013e8:	e002      	b.n	80013f0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 80013ea:	f7ff ff61 	bl	80012b0 <chThdEnqueueTimeoutS>
 80013ee:	b9d8      	cbnz	r0, 8001428 <chIQReadTimeout+0x68>
 80013f0:	68a7      	ldr	r7, [r4, #8]
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
  while (true) {
    if (nfy) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80013f6:	2f00      	cmp	r7, #0
 80013f8:	d0f7      	beq.n	80013ea <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80013fa:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80013fc:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 80013fe:	1c51      	adds	r1, r2, #1
 8001400:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001402:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001404:	7813      	ldrb	r3, [r2, #0]
 8001406:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top)
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	69a2      	ldr	r2, [r4, #24]
 800140e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001410:	bf24      	itt	cs
 8001412:	68e3      	ldrcs	r3, [r4, #12]
 8001414:	61a3      	strcs	r3, [r4, #24]
 8001416:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 800141a:	3601      	adds	r6, #1
    if (--n == 0) {
 800141c:	45b3      	cmp	fp, r6
 800141e:	d005      	beq.n	800142c <chIQReadTimeout+0x6c>
 8001420:	9b01      	ldr	r3, [sp, #4]
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	e7da      	b.n	80013de <chIQReadTimeout+0x1e>
 8001428:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800142c:	4630      	mov	r0, r6
 800142e:	b003      	add	sp, #12
 8001430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	f3af 8000 	nop.w
 800143c:	f3af 8000 	nop.w

08001440 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	2320      	movs	r3, #32
 8001444:	460e      	mov	r6, r1
 8001446:	4604      	mov	r4, r0
 8001448:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify) {
 800144c:	69c3      	ldr	r3, [r0, #28]
 800144e:	b12b      	cbz	r3, 800145c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001450:	4798      	blx	r3
 8001452:	e003      	b.n	800145c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8001454:	f7ff ff2c 	bl	80012b0 <chThdEnqueueTimeoutS>
 8001458:	2800      	cmp	r0, #0
 800145a:	db15      	blt.n	8001488 <chIQGetTimeout+0x48>
 800145c:	68a5      	ldr	r5, [r4, #8]
 800145e:	4620      	mov	r0, r4
 8001460:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001462:	2d00      	cmp	r5, #0
 8001464:	d0f6      	beq.n	8001454 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001466:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001468:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800146a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800146c:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800146e:	f105 35ff 	add.w	r5, r5, #4294967295
  b = *iqp->q_rdptr++;
 8001472:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001474:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001476:	bf28      	it	cs
 8001478:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800147a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800147c:	bf28      	it	cs
 800147e:	61a3      	strcs	r3, [r4, #24]
 8001480:	2300      	movs	r3, #0
 8001482:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return b;
}
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	f385 8811 	msr	BASEPRI, r5
 800148c:	bd70      	pop	{r4, r5, r6, pc}
 800148e:	bf00      	nop

08001490 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001490:	b508      	push	{r3, lr}
 8001492:	4601      	mov	r1, r0
 8001494:	2320      	movs	r3, #32
 8001496:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800149a:	2008      	movs	r0, #8
 800149c:	f7ff fec0 	bl	8001220 <chSchGoSleepTimeoutS>
 80014a0:	2300      	movs	r3, #0
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	f3af 8000 	nop.w
 80014ac:	f3af 8000 	nop.w

080014b0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 80014b0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff ffec 	bl	8001490 <chThdSleep>
 80014b8:	2320      	movs	r3, #32
 80014ba:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	2300      	movs	r3, #0
 80014c4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80014c6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80014ca:	bd08      	pop	{r3, pc}
 80014cc:	f3af 8000 	nop.w

080014d0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80014d0:	2200      	movs	r2, #0
 80014d2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80014d6:	b410      	push	{r4}
 80014d8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80014da:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80014dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d2fb      	bcs.n	80014dc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80014e8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;

  return tp;
}
 80014ea:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 80014ec:	605c      	str	r4, [r3, #4]
 80014ee:	6014      	str	r4, [r2, #0]

  return tp;
}
 80014f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000b78 	.word	0x20000b78
 80014fc:	f3af 8000 	nop.w

08001500 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8001500:	6983      	ldr	r3, [r0, #24]
 8001502:	6942      	ldr	r2, [r0, #20]
 8001504:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001506:	b510      	push	{r4, lr}
 8001508:	6883      	ldr	r3, [r0, #8]
 800150a:	d01c      	beq.n	8001546 <chIQPutI+0x46>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800150c:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 800150e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001510:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 8001512:	6144      	str	r4, [r0, #20]
 8001514:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001516:	6942      	ldr	r2, [r0, #20]
 8001518:	6903      	ldr	r3, [r0, #16]
 800151a:	429a      	cmp	r2, r3
 800151c:	d20c      	bcs.n	8001538 <chIQPutI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800151e:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001520:	4298      	cmp	r0, r3
 8001522:	d00e      	beq.n	8001542 <chIQPutI+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001528:	2400      	movs	r4, #0
 800152a:	6050      	str	r0, [r2, #4]
  chSchReadyI(tp);
 800152c:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800152e:	621c      	str	r4, [r3, #32]
  chSchReadyI(tp);
 8001530:	f7ff ffce 	bl	80014d0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8001534:	4620      	mov	r0, r4
 8001536:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 8001538:	68c3      	ldr	r3, [r0, #12]
 800153a:	6143      	str	r3, [r0, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800153c:	6803      	ldr	r3, [r0, #0]
 800153e:	4298      	cmp	r0, r3
 8001540:	d1f0      	bne.n	8001524 <chIQPutI+0x24>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8001542:	2000      	movs	r0, #0
 8001544:	bd10      	pop	{r4, pc}
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0e0      	beq.n	800150c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800154a:	f06f 0003 	mvn.w	r0, #3
 800154e:	bd10      	pop	{r4, pc}

08001550 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8001550:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8001552:	6982      	ldr	r2, [r0, #24]
 8001554:	6943      	ldr	r3, [r0, #20]
 8001556:	4293      	cmp	r3, r2
 8001558:	6883      	ldr	r3, [r0, #8]
 800155a:	d017      	beq.n	800158c <chOQGetI+0x3c>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800155c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800155e:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001560:	3301      	adds	r3, #1
 8001562:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 8001564:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001566:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001568:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800156a:	d20c      	bcs.n	8001586 <chOQGetI+0x36>
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	4298      	cmp	r0, r3
 8001570:	d007      	beq.n	8001582 <chOQGetI+0x32>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001576:	2100      	movs	r1, #0
 8001578:	6050      	str	r0, [r2, #4]
  chSchReadyI(tp);
 800157a:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800157c:	6219      	str	r1, [r3, #32]
  chSchReadyI(tp);
 800157e:	f7ff ffa7 	bl	80014d0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8001582:	4620      	mov	r0, r4
 8001584:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 8001586:	68c3      	ldr	r3, [r0, #12]
 8001588:	6183      	str	r3, [r0, #24]
 800158a:	e7ef      	b.n	800156c <chOQGetI+0x1c>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0e5      	beq.n	800155c <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8001590:	f06f 0002 	mvn.w	r0, #2
 8001594:	bd38      	pop	{r3, r4, r5, pc}
 8001596:	bf00      	nop
 8001598:	f3af 8000 	nop.w
 800159c:	f3af 8000 	nop.w

080015a0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80015a2:	b570      	push	{r4, r5, r6, lr}
 80015a4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80015a6:	699c      	ldr	r4, [r3, #24]
 80015a8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80015ac:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80015b0:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80015b2:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80015b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80015b6:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80015b8:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 80015ba:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80015bc:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
 80015be:	62c4      	str	r4, [r0, #44]	; 0x2c
 80015c0:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80015c2:	d007      	beq.n	80015d4 <chMsgSend+0x34>
    chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80015c4:	200c      	movs	r0, #12
 80015c6:	f7ff fdcb 	bl	8001160 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80015ca:	6a20      	ldr	r0, [r4, #32]
 80015cc:	2300      	movs	r3, #0
 80015ce:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    chSchReadyI(tp);
 80015d4:	f7ff ff7c 	bl	80014d0 <chSchReadyI>
 80015d8:	e7f4      	b.n	80015c4 <chMsgSend+0x24>
 80015da:	bf00      	nop
 80015dc:	20000b78 	.word	0x20000b78

080015e0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80015e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80015e2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80015e4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80015e6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80015e8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80015ea:	d00a      	beq.n	8001602 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 80015ec:	2a0b      	cmp	r2, #11
 80015ee:	d000      	beq.n	80015f2 <chEvtSignalI+0x12>
 80015f0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80015f2:	6a03      	ldr	r3, [r0, #32]
 80015f4:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80015f6:	428b      	cmp	r3, r1
 80015f8:	d1fa      	bne.n	80015f0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	6203      	str	r3, [r0, #32]
    chSchReadyI(tp);
 80015fe:	f7ff bf67 	b.w	80014d0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8001602:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001604:	4219      	tst	r1, r3
 8001606:	d1f8      	bne.n	80015fa <chEvtSignalI+0x1a>
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w

08001610 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001610:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001612:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001614:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001616:	4606      	mov	r6, r0
 8001618:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 800161a:	d00d      	beq.n	8001638 <chEvtBroadcastFlagsI+0x28>
    elp->el_flags |= flags;
 800161c:	68e3      	ldr	r3, [r4, #12]
 800161e:	432b      	orrs	r3, r5
 8001620:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0)) {
 8001622:	b115      	cbz	r5, 800162a <chEvtBroadcastFlagsI+0x1a>
 8001624:	6922      	ldr	r2, [r4, #16]
 8001626:	4213      	tst	r3, r2
 8001628:	d003      	beq.n	8001632 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 800162a:	6860      	ldr	r0, [r4, #4]
 800162c:	68a1      	ldr	r1, [r4, #8]
 800162e:	f7ff ffd7 	bl	80015e0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001632:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8001634:	42a6      	cmp	r6, r4
 8001636:	d1f1      	bne.n	800161c <chEvtBroadcastFlagsI+0xc>
 8001638:	bd70      	pop	{r4, r5, r6, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w

08001640 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001646:	6994      	ldr	r4, [r2, #24]
 8001648:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800164c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800164e:	b1d3      	cbz	r3, 8001686 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8001650:	2600      	movs	r6, #0
 8001652:	e00a      	b.n	800166a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001654:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001656:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8001658:	6019      	str	r1, [r3, #0]
 800165a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800165c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800165e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001660:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 8001662:	f7ff ff35 	bl	80014d0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001668:	b14b      	cbz	r3, 800167e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800166a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001670:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 8001672:	4610      	mov	r0, r2
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 8001674:	d1ee      	bne.n	8001654 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8001676:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f5      	bne.n	800166a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 800167e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001680:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8001682:	f7ff fc85 	bl	8000f90 <chSchRescheduleS>
 8001686:	2300      	movs	r3, #0
 8001688:	f383 8811 	msr	BASEPRI, r3
 800168c:	bd70      	pop	{r4, r5, r6, pc}
 800168e:	bf00      	nop
 8001690:	20000b78 	.word	0x20000b78
 8001694:	f3af 8000 	nop.w
 8001698:	f3af 8000 	nop.w
 800169c:	f3af 8000 	nop.w

080016a0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80016a2:	b430      	push	{r4, r5}
 80016a4:	4604      	mov	r4, r0
 80016a6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 80016a8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80016aa:	68e3      	ldr	r3, [r4, #12]
 80016ac:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80016ae:	42ac      	cmp	r4, r5
 80016b0:	d017      	beq.n	80016e2 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80016b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80016b4:	b14b      	cbz	r3, 80016ca <chMtxUnlockS+0x2a>
 80016b6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80016bc:	6892      	ldr	r2, [r2, #8]
 80016be:	4291      	cmp	r1, r2
 80016c0:	bf38      	it	cc
 80016c2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80016c4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f5      	bne.n	80016b6 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80016ca:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80016cc:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80016ce:	6081      	str	r1, [r0, #8]
 80016d0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 80016d2:	4628      	mov	r0, r5
 80016d4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80016d6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 80016d8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 80016da:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 80016dc:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 80016de:	f7ff bef7 	b.w	80014d0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 80016e6:	bc30      	pop	{r4, r5}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000b78 	.word	0x20000b78

080016f0 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80016f2:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80016f4:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80016f6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d055      	beq.n	80017a8 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80016fc:	68a1      	ldr	r1, [r4, #8]
 80016fe:	6893      	ldr	r3, [r2, #8]
 8001700:	4299      	cmp	r1, r3
 8001702:	4605      	mov	r5, r0
 8001704:	d906      	bls.n	8001714 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001706:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001708:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800170a:	2b06      	cmp	r3, #6
 800170c:	d033      	beq.n	8001776 <chMtxLockS+0x86>
 800170e:	2b07      	cmp	r3, #7
 8001710:	d01d      	beq.n	800174e <chMtxLockS+0x5e>
 8001712:	b19b      	cbz	r3, 800173c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001714:	462b      	mov	r3, r5
 8001716:	e003      	b.n	8001720 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	68a2      	ldr	r2, [r4, #8]
 800171c:	4291      	cmp	r1, r2
 800171e:	d302      	bcc.n	8001726 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001720:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001722:	429d      	cmp	r5, r3
 8001724:	d1f8      	bne.n	8001718 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800172a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 800172c:	605c      	str	r4, [r3, #4]
 800172e:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 8001730:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8001732:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8001734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001738:	f7ff bd12 	b.w	8001160 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800173c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8001740:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001742:	6811      	ldr	r1, [r2, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 8001744:	4610      	mov	r0, r2
 8001746:	604b      	str	r3, [r1, #4]
 8001748:	f7ff fec2 	bl	80014d0 <chSchReadyI>
 800174c:	e7e2      	b.n	8001714 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800174e:	e892 0009 	ldmia.w	r2, {r0, r3}
 8001752:	6018      	str	r0, [r3, #0]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 8001754:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 8001756:	6810      	ldr	r0, [r2, #0]
 8001758:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800175a:	4633      	mov	r3, r6
 800175c:	e002      	b.n	8001764 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	4288      	cmp	r0, r1
 8001762:	d302      	bcc.n	800176a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001764:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001766:	429e      	cmp	r6, r3
 8001768:	d1f9      	bne.n	800175e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800176e:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	600a      	str	r2, [r1, #0]
 8001774:	e7ce      	b.n	8001714 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001776:	e892 0009 	ldmia.w	r2, {r0, r3}
 800177a:	6018      	str	r0, [r3, #0]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 800177c:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 800177e:	6810      	ldr	r0, [r2, #0]
 8001780:	6043      	str	r3, [r0, #4]
 8001782:	4633      	mov	r3, r6
 8001784:	e002      	b.n	800178c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	4288      	cmp	r0, r1
 800178a:	d302      	bcc.n	8001792 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800178c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800178e:	429e      	cmp	r6, r3
 8001790:	d1f9      	bne.n	8001786 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001796:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	600a      	str	r2, [r1, #0]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 800179c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800179e:	68a1      	ldr	r1, [r4, #8]
 80017a0:	6893      	ldr	r3, [r2, #8]
 80017a2:	428b      	cmp	r3, r1
 80017a4:	d3af      	bcc.n	8001706 <chMtxLockS+0x16>
 80017a6:	e7b5      	b.n	8001714 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80017a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017aa:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80017ac:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 80017ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80017b0:	bd70      	pop	{r4, r5, r6, pc}
 80017b2:	bf00      	nop
 80017b4:	20000b78 	.word	0x20000b78
 80017b8:	f3af 8000 	nop.w
 80017bc:	f3af 8000 	nop.w

080017c0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80017c0:	b508      	push	{r3, lr}
 80017c2:	2320      	movs	r3, #32
 80017c4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 80017c8:	f7ff ff92 	bl	80016f0 <chMtxLockS>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	bd08      	pop	{r3, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	f3af 8000 	nop.w
 80017dc:	f3af 8000 	nop.w

080017e0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80017e0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 80017e2:	4c0f      	ldr	r4, [pc, #60]	; (8001820 <chHeapStatus+0x40>)
 80017e4:	2800      	cmp	r0, #0
 80017e6:	bf18      	it	ne
 80017e8:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 80017ea:	f104 0510 	add.w	r5, r4, #16
 80017ee:	4628      	mov	r0, r5
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80017f0:	460e      	mov	r6, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 80017f2:	f7ff ffe5 	bl	80017c0 <chMtxLock>
  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next) {
 80017f6:	68a3      	ldr	r3, [r4, #8]
 80017f8:	b173      	cbz	r3, 8001818 <chHeapStatus+0x38>
 80017fa:	2200      	movs	r2, #0
 80017fc:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 80017fe:	6858      	ldr	r0, [r3, #4]
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next) {
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 8001804:	4402      	add	r2, r0
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next) {
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  }
  if (sizep) {
 800180a:	b106      	cbz	r6, 800180e <chHeapStatus+0x2e>
    *sizep = sz;
 800180c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800180e:	4628      	mov	r0, r5
 8001810:	f7ff fc16 	bl	8001040 <chMtxUnlock>

  return n;
}
 8001814:	4620      	mov	r0, r4
 8001816:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8001818:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next) {
 800181a:	461c      	mov	r4, r3
 800181c:	e7f5      	b.n	800180a <chHeapStatus+0x2a>
 800181e:	bf00      	nop
 8001820:	20000ae8 	.word	0x20000ae8
 8001824:	f3af 8000 	nop.w
 8001828:	f3af 8000 	nop.w
 800182c:	f3af 8000 	nop.w

08001830 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 8001832:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001836:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 800183a:	4606      	mov	r6, r0
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 800183c:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001840:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8001842:	4638      	mov	r0, r7
 8001844:	f7ff ffbc 	bl	80017c0 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001848:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800184a:	42ab      	cmp	r3, r5
 800184c:	d004      	beq.n	8001858 <chHeapFree+0x28>
 800184e:	42a3      	cmp	r3, r4
 8001850:	d302      	bcc.n	8001858 <chHeapFree+0x28>
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	42ab      	cmp	r3, r5
 8001856:	d1fa      	bne.n	800184e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001858:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800185a:	b11a      	cbz	r2, 8001864 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800185c:	4294      	cmp	r4, r2
 800185e:	d301      	bcc.n	8001864 <chHeapFree+0x34>
 8001860:	4613      	mov	r3, r2
 8001862:	e7f2      	b.n	800184a <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001864:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8001868:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800186c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800186e:	f101 0208 	add.w	r2, r1, #8
 8001872:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8001876:	18a0      	adds	r0, r4, r2
 8001878:	42a8      	cmp	r0, r5
 800187a:	d00a      	beq.n	8001892 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	f101 0208 	add.w	r2, r1, #8
 8001882:	441a      	add	r2, r3
 8001884:	4294      	cmp	r4, r2
 8001886:	d012      	beq.n	80018ae <chHeapFree+0x7e>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001888:	4638      	mov	r0, r7

  return;
}
 800188a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800188e:	f7ff bbd7 	b.w	8001040 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001892:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001894:	58a2      	ldr	r2, [r4, r2]
 8001896:	f846 2c08 	str.w	r2, [r6, #-8]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 800189a:	180a      	adds	r2, r1, r0
 800189c:	3208      	adds	r2, #8
 800189e:	f846 2c04 	str.w	r2, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	f101 0208 	add.w	r2, r1, #8
 80018a8:	441a      	add	r2, r3
 80018aa:	4294      	cmp	r4, r2
 80018ac:	d1ec      	bne.n	8001888 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 80018ae:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80018b2:	440a      	add	r2, r1
 80018b4:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80018b6:	6018      	str	r0, [r3, #0]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80018b8:	605a      	str	r2, [r3, #4]
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80018ba:	4638      	mov	r0, r7

  return;
}
 80018bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80018c0:	f7ff bbbe 	b.w	8001040 <chMtxUnlock>
 80018c4:	f3af 8000 	nop.w
 80018c8:	f3af 8000 	nop.w
 80018cc:	f3af 8000 	nop.w

080018d0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80018d0:	b430      	push	{r4, r5}
 80018d2:	4602      	mov	r2, r0
 80018d4:	2120      	movs	r1, #32
 80018d6:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 80018da:	7f83      	ldrb	r3, [r0, #30]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	7783      	strb	r3, [r0, #30]
 80018e2:	2400      	movs	r4, #0
 80018e4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 80018e8:	b913      	cbnz	r3, 80018f0 <chThdRelease+0x20>
 80018ea:	7f04      	ldrb	r4, [r0, #28]
 80018ec:	2c0f      	cmp	r4, #15
 80018ee:	d001      	beq.n	80018f4 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 80018f0:	bc30      	pop	{r4, r5}
 80018f2:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80018f4:	7f44      	ldrb	r4, [r0, #29]
 80018f6:	f004 0403 	and.w	r4, r4, #3
 80018fa:	2c01      	cmp	r4, #1
 80018fc:	d00f      	beq.n	800191e <chThdRelease+0x4e>
 80018fe:	2c02      	cmp	r4, #2
 8001900:	d1f6      	bne.n	80018f0 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8001902:	6944      	ldr	r4, [r0, #20]
 8001904:	6900      	ldr	r0, [r0, #16]
 8001906:	6120      	str	r0, [r4, #16]
 8001908:	6915      	ldr	r5, [r2, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 800190a:	6c10      	ldr	r0, [r2, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 800190c:	616c      	str	r4, [r5, #20]
 800190e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001912:	6801      	ldr	r1, [r0, #0]
 8001914:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8001916:	6002      	str	r2, [r0, #0]
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	e7e8      	b.n	80018f0 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 800191e:	6943      	ldr	r3, [r0, #20]
 8001920:	6901      	ldr	r1, [r0, #16]
 8001922:	6119      	str	r1, [r3, #16]
 8001924:	6902      	ldr	r2, [r0, #16]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8001926:	bc30      	pop	{r4, r5}
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8001928:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 800192a:	f7ff bf81 	b.w	8001830 <chHeapFree>
 800192e:	bf00      	nop

08001930 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4604      	mov	r4, r0
 8001934:	2320      	movs	r3, #32
 8001936:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800193a:	7f03      	ldrb	r3, [r0, #28]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d007      	beq.n	8001950 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8001942:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001944:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001946:	2009      	movs	r0, #9
 8001948:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 800194a:	6263      	str	r3, [r4, #36]	; 0x24
 800194c:	f7ff fc08 	bl	8001160 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8001950:	6a25      	ldr	r5, [r4, #32]
 8001952:	2300      	movs	r3, #0
 8001954:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb9 	bl	80018d0 <chThdRelease>
#endif

  return msg;
}
 800195e:	4628      	mov	r0, r5
 8001960:	bd38      	pop	{r3, r4, r5, pc}
 8001962:	bf00      	nop
 8001964:	20000b78 	.word	0x20000b78
 8001968:	f3af 8000 	nop.w
 800196c:	f3af 8000 	nop.w

08001970 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	4c07      	ldr	r4, [pc, #28]	; (8001990 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8001974:	2600      	movs	r6, #0
 8001976:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800197a:	f854 0b04 	ldr.w	r0, [r4], #4
 800197e:	b118      	cbz	r0, 8001988 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8001980:	f7ff ffd6 	bl	8001930 <chThdWait>
      threads[i] = NULL;
 8001984:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8001988:	42ac      	cmp	r4, r5
 800198a:	d1f6      	bne.n	800197a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800198c:	bd70      	pop	{r4, r5, r6, pc}
 800198e:	bf00      	nop
 8001990:	20000a40 	.word	0x20000a40
 8001994:	f3af 8000 	nop.w
 8001998:	f3af 8000 	nop.w
 800199c:	f3af 8000 	nop.w

080019a0 <thd2_execute.lto_priv.65>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 80019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80019a4:	4e47      	ldr	r6, [pc, #284]	; (8001ac4 <thd2_execute.lto_priv.65+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019a6:	4d48      	ldr	r5, [pc, #288]	; (8001ac8 <thd2_execute.lto_priv.65+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80019a8:	69b3      	ldr	r3, [r6, #24]
 80019aa:	4f48      	ldr	r7, [pc, #288]	; (8001acc <thd2_execute.lto_priv.65+0x12c>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <thd2_execute.lto_priv.65+0x130>)
 80019b0:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001ae4 <thd2_execute.lto_priv.65+0x144>
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 80019b4:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019b6:	3a04      	subs	r2, #4
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4628      	mov	r0, r5
 80019bc:	463b      	mov	r3, r7
 80019be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019c2:	f7ff fb8d 	bl	80010e0 <chThdCreateStatic>
 80019c6:	69b3      	ldr	r3, [r6, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80019c8:	4942      	ldr	r1, [pc, #264]	; (8001ad4 <thd2_execute.lto_priv.65+0x134>)
 80019ca:	689a      	ldr	r2, [r3, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80019cc:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80019d0:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 80019d4:	463b      	mov	r3, r7
 80019d6:	9100      	str	r1, [sp, #0]
 80019d8:	3a05      	subs	r2, #5
 80019da:	4620      	mov	r0, r4
 80019dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019e0:	f7ff fb7e 	bl	80010e0 <chThdCreateStatic>
 80019e4:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80019e6:	493c      	ldr	r1, [pc, #240]	; (8001ad8 <thd2_execute.lto_priv.65+0x138>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80019ea:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80019ee:	463b      	mov	r3, r7
 80019f0:	9100      	str	r1, [sp, #0]
 80019f2:	3a01      	subs	r2, #1
 80019f4:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80019f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019fc:	f7ff fb70 	bl	80010e0 <chThdCreateStatic>
 8001a00:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <thd2_execute.lto_priv.65+0x13c>)
 8001a04:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001a06:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001a0a:	9100      	str	r1, [sp, #0]
 8001a0c:	3a02      	subs	r2, #2
 8001a0e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8001a12:	463b      	mov	r3, r7
 8001a14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a18:	f7ff fb62 	bl	80010e0 <chThdCreateStatic>
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f8c8 000c 	str.w	r0, [r8, #12]
 8001a22:	f382 8811 	msr	BASEPRI, r2
 8001a26:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a28:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001a2a:	6898      	ldr	r0, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001ae8 <thd2_execute.lto_priv.65+0x148>
 8001a30:	f8c4 73b4 	str.w	r7, [r4, #948]	; 0x3b4
 8001a34:	3803      	subs	r0, #3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a36:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001a3a:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a3c:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001a40:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001a44:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a48:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8001aec <thd2_execute.lto_priv.65+0x14c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a4c:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001a50:	f505 70b6 	add.w	r0, r5, #364	; 0x16c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001a54:	f04f 0e02 	mov.w	lr, #2
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001a58:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001a5c:	f04f 0901 	mov.w	r9, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a60:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8001a64:	f8c4 a3b8 	str.w	sl, [r4, #952]	; 0x3b8
 8001a68:	f8c4 c3d4 	str.w	ip, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001a6c:	f884 e2ac 	strb.w	lr, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a70:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 8001a74:	6173      	str	r3, [r6, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001a76:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001a7a:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001a7e:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001a82:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001a86:	f884 92ae 	strb.w	r9, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a8a:	610b      	str	r3, [r1, #16]
 8001a8c:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001a90:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001a94:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8001a98:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 8001a9c:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8001aa0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001aa4:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8001aa8:	f7ff fd12 	bl	80014d0 <chSchReadyI>
 8001aac:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8001ab0:	f7ff ff5e 	bl	8001970 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8001ab4:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <thd2_execute.lto_priv.65+0x140>)
 8001ab6:	4648      	mov	r0, r9
}
 8001ab8:	b003      	add	sp, #12
 8001aba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8001abe:	f7ff b8df 	b.w	8000c80 <_test_assert_sequence>
 8001ac2:	bf00      	nop
 8001ac4:	20000b78 	.word	0x20000b78
 8001ac8:	20000e58 	.word	0x20000e58
 8001acc:	08000d21 	.word	0x08000d21
 8001ad0:	0800592c 	.word	0x0800592c
 8001ad4:	08005940 	.word	0x08005940
 8001ad8:	08005930 	.word	0x08005930
 8001adc:	08005934 	.word	0x08005934
 8001ae0:	0800593c 	.word	0x0800593c
 8001ae4:	20000a40 	.word	0x20000a40
 8001ae8:	08005938 	.word	0x08005938
 8001aec:	080008f1 	.word	0x080008f1

08001af0 <thd1_execute.lto_priv.64>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001af2:	4f27      	ldr	r7, [pc, #156]	; (8001b90 <thd1_execute.lto_priv.64+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001af4:	4e27      	ldr	r6, [pc, #156]	; (8001b94 <thd1_execute.lto_priv.64+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4d27      	ldr	r5, [pc, #156]	; (8001b98 <thd1_execute.lto_priv.64+0xa8>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <thd1_execute.lto_priv.64+0xac>)
 8001afe:	4c28      	ldr	r4, [pc, #160]	; (8001ba0 <thd1_execute.lto_priv.64+0xb0>)

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8001b00:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001b02:	3a05      	subs	r2, #5
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4630      	mov	r0, r6
 8001b08:	462b      	mov	r3, r5
 8001b0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b0e:	f7ff fae7 	bl	80010e0 <chThdCreateStatic>
 8001b12:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001b14:	4923      	ldr	r1, [pc, #140]	; (8001ba4 <thd1_execute.lto_priv.64+0xb4>)
 8001b16:	689a      	ldr	r2, [r3, #8]
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001b18:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	9100      	str	r1, [sp, #0]
 8001b1e:	3a04      	subs	r2, #4
 8001b20:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8001b24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b28:	f7ff fada 	bl	80010e0 <chThdCreateStatic>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001b2e:	491e      	ldr	r1, [pc, #120]	; (8001ba8 <thd1_execute.lto_priv.64+0xb8>)
 8001b30:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001b32:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001b34:	462b      	mov	r3, r5
 8001b36:	9100      	str	r1, [sp, #0]
 8001b38:	3a03      	subs	r2, #3
 8001b3a:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8001b3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b42:	f7ff facd 	bl	80010e0 <chThdCreateStatic>
 8001b46:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001b48:	4918      	ldr	r1, [pc, #96]	; (8001bac <thd1_execute.lto_priv.64+0xbc>)
 8001b4a:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001b4c:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001b4e:	462b      	mov	r3, r5
 8001b50:	9100      	str	r1, [sp, #0]
 8001b52:	3a02      	subs	r2, #2
 8001b54:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8001b58:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b5c:	f7ff fac0 	bl	80010e0 <chThdCreateStatic>
 8001b60:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b62:	4913      	ldr	r1, [pc, #76]	; (8001bb0 <thd1_execute.lto_priv.64+0xc0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001b66:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	9100      	str	r1, [sp, #0]
 8001b6e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8001b72:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b76:	f7ff fab3 	bl	80010e0 <chThdCreateStatic>
 8001b7a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8001b7c:	f7ff fef8 	bl	8001970 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <thd1_execute.lto_priv.64+0xc4>)
 8001b82:	2001      	movs	r0, #1
}
 8001b84:	b003      	add	sp, #12
 8001b86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8001b8a:	f7ff b879 	b.w	8000c80 <_test_assert_sequence>
 8001b8e:	bf00      	nop
 8001b90:	20000b78 	.word	0x20000b78
 8001b94:	20000d10 	.word	0x20000d10
 8001b98:	08000d21 	.word	0x08000d21
 8001b9c:	08005940 	.word	0x08005940
 8001ba0:	20000a40 	.word	0x20000a40
 8001ba4:	0800592c 	.word	0x0800592c
 8001ba8:	08005938 	.word	0x08005938
 8001bac:	08005934 	.word	0x08005934
 8001bb0:	08005930 	.word	0x08005930
 8001bb4:	0800593c 	.word	0x0800593c
 8001bb8:	f3af 8000 	nop.w
 8001bbc:	f3af 8000 	nop.w

08001bc0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8001bc2:	4e21      	ldr	r6, [pc, #132]	; (8001c48 <chHeapAlloc+0x88>)
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	bf18      	it	ne
 8001bc8:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001bca:	f106 0710 	add.w	r7, r6, #16
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8001bce:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001bd0:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8001bd2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8001bd6:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 8001bda:	f7ff fdf1 	bl	80017c0 <chMtxLock>
 8001bde:	e003      	b.n	8001be8 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8001be0:	6843      	ldr	r3, [r0, #4]
 8001be2:	429d      	cmp	r5, r3
 8001be4:	d912      	bls.n	8001c0c <chHeapAlloc+0x4c>
 8001be6:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d1f8      	bne.n	8001be0 <chHeapAlloc+0x20>

      return (void *)(hp + 1);
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8001bee:	4638      	mov	r0, r7
 8001bf0:	f7ff fa26 	bl	8001040 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 8001bf4:	6833      	ldr	r3, [r6, #0]
 8001bf6:	b32b      	cbz	r3, 8001c44 <chHeapAlloc+0x84>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8001bf8:	f105 0008 	add.w	r0, r5, #8
 8001bfc:	4798      	blx	r3
    if (hp != NULL) {
 8001bfe:	b308      	cbz	r0, 8001c44 <chHeapAlloc+0x84>
      hp->h.u.heap = heapp;
 8001c00:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8001c02:	6045      	str	r5, [r0, #4]
      hp++;
 8001c04:	f100 0408 	add.w	r4, r0, #8
      return (void *)hp;
    }
  }

  return NULL;
}
 8001c08:	4620      	mov	r0, r4
 8001c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
 8001c0c:	f105 0208 	add.w	r2, r5, #8
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d909      	bls.n	8001c28 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001c18:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8001c1a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001c1c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8001c20:	f7ff fa0e 	bl	8001040 <chMtxUnlock>
      return (void *)hp;
    }
  }

  return NULL;
}
 8001c24:	4620      	mov	r0, r4
 8001c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c28:	f06f 0107 	mvn.w	r1, #7
 8001c2c:	1b49      	subs	r1, r1, r5
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8001c2e:	eb00 0e02 	add.w	lr, r0, r2
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8001c32:	440b      	add	r3, r1
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 8001c34:	6801      	ldr	r1, [r0, #0]
 8001c36:	5081      	str	r1, [r0, r2]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8001c38:	f8ce 3004 	str.w	r3, [lr, #4]
        qp->h.u.next = fp;
 8001c3c:	f8c4 e000 	str.w	lr, [r4]
        hp->h.size = size;
 8001c40:	6045      	str	r5, [r0, #4]
 8001c42:	e7e9      	b.n	8001c18 <chHeapAlloc+0x58>

      return (void *)hp;
    }
  }

  return NULL;
 8001c44:	2400      	movs	r4, #0
 8001c46:	e7df      	b.n	8001c08 <chHeapAlloc+0x48>
 8001c48:	20000ae8 	.word	0x20000ae8
 8001c4c:	f3af 8000 	nop.w

08001c50 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8001c50:	6883      	ldr	r3, [r0, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	6083      	str	r3, [r0, #8]
 8001c58:	dd00      	ble.n	8001c5c <chSemSignalI+0xc>
 8001c5a:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001c5c:	6803      	ldr	r3, [r0, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001c62:	2100      	movs	r1, #0
 8001c64:	6050      	str	r0, [r2, #4]
    chSchReadyI(tp);
 8001c66:	4618      	mov	r0, r3

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001c68:	6219      	str	r1, [r3, #32]
    chSchReadyI(tp);
 8001c6a:	f7ff bc31 	b.w	80014d0 <chSchReadyI>
 8001c6e:	bf00      	nop

08001c70 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8001c70:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8001c72:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8001c74:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0) {
 8001c76:	3501      	adds	r5, #1
 8001c78:	2d00      	cmp	r5, #0
 8001c7a:	dc0c      	bgt.n	8001c96 <chSemResetI+0x26>
 8001c7c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001c7e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8001c82:	6860      	ldr	r0, [r4, #4]

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8001c84:	6843      	ldr	r3, [r0, #4]
 8001c86:	6063      	str	r3, [r4, #4]
 8001c88:	601c      	str	r4, [r3, #0]
 8001c8a:	f7ff fc21 	bl	80014d0 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0) {
 8001c8e:	3501      	adds	r5, #1
 8001c90:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001c92:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0) {
 8001c94:	d1f5      	bne.n	8001c82 <chSemResetI+0x12>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f3af 8000 	nop.w
 8001c9c:	f3af 8000 	nop.w

08001ca0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <chThdExit+0x44>)
 8001cac:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001cae:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001cb0:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting)) {
 8001cb2:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001cb6:	42a8      	cmp	r0, r5
 8001cb8:	d006      	beq.n	8001cc8 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	6263      	str	r3, [r4, #36]	; 0x24
    chSchReadyI(list_remove(&tp->p_waiting));
 8001cbe:	f7ff fc07 	bl	80014d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting)) {
 8001cc4:	42a8      	cmp	r0, r5
 8001cc6:	d1f8      	bne.n	8001cba <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001cc8:	7f63      	ldrb	r3, [r4, #29]
 8001cca:	079b      	lsls	r3, r3, #30
 8001ccc:	d104      	bne.n	8001cd8 <chThdExit+0x38>
    REG_REMOVE(tp);
 8001cce:	6963      	ldr	r3, [r4, #20]
 8001cd0:	6922      	ldr	r2, [r4, #16]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	6922      	ldr	r2, [r4, #16]
 8001cd6:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001cd8:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8001cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001cde:	f7ff ba3f 	b.w	8001160 <chSchGoSleepS>
 8001ce2:	bf00      	nop
 8001ce4:	20000b78 	.word	0x20000b78
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001cf2:	490f      	ldr	r1, [pc, #60]	; (8001d30 <chTMStopMeasurementX+0x40>)
 8001cf4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8001cf6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001cf8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001cfa:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001cfc:	68c6      	ldr	r6, [r0, #12]
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8001cfe:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001d00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001d08:	18e4      	adds	r4, r4, r3
 8001d0a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001d0e:	3601      	adds	r6, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8001d10:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001d12:	60c6      	str	r6, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8001d14:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001d16:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8001d1a:	d805      	bhi.n	8001d28 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8001d20:	bf38      	it	cc
 8001d22:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001d24:	bcf0      	pop	{r4, r5, r6, r7}
 8001d26:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001d28:	6043      	str	r3, [r0, #4]
 8001d2a:	e7fb      	b.n	8001d24 <chTMStopMeasurementX+0x34>
 8001d2c:	e0001000 	.word	0xe0001000
 8001d30:	20000b78 	.word	0x20000b78
 8001d34:	f3af 8000 	nop.w
 8001d38:	f3af 8000 	nop.w
 8001d3c:	f3af 8000 	nop.w

08001d40 <_port_irq_epilogue>:
 8001d40:	2320      	movs	r3, #32
 8001d42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <_port_irq_epilogue+0x44>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001d4e:	d102      	bne.n	8001d56 <_port_irq_epilogue+0x16>
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001d56:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001d62:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001d66:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <_port_irq_epilogue+0x48>)
 8001d6c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001d6e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001d70:	6889      	ldr	r1, [r1, #8]
 8001d72:	6892      	ldr	r2, [r2, #8]
 8001d74:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001d76:	bf8c      	ite	hi
 8001d78:	4a04      	ldrhi	r2, [pc, #16]	; (8001d8c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001d7a:	4a05      	ldrls	r2, [pc, #20]	; (8001d90 <_port_irq_epilogue+0x50>)
 8001d7c:	f843 2c08 	str.w	r2, [r3, #-8]
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	20000b78 	.word	0x20000b78
 8001d8c:	080008ff 	.word	0x080008ff
 8001d90:	08000902 	.word	0x08000902
 8001d94:	f3af 8000 	nop.w
 8001d98:	f3af 8000 	nop.w
 8001d9c:	f3af 8000 	nop.w

08001da0 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8001da0:	e7fe      	b.n	8001da0 <BusFault_Handler>
 8001da2:	bf00      	nop
 8001da4:	f3af 8000 	nop.w
 8001da8:	f3af 8000 	nop.w
 8001dac:	f3af 8000 	nop.w

08001db0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8001db0:	4a02      	ldr	r2, [pc, #8]	; (8001dbc <notify2+0xc>)
 8001db2:	68d3      	ldr	r3, [r2, #12]
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	60d3      	str	r3, [r2, #12]
 8001dba:	4770      	bx	lr
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <bmk12_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <bmk12_setup+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605b      	str	r3, [r3, #4]
 8001dc6:	601b      	str	r3, [r3, #0]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	4770      	bx	lr
 8001dcc:	20000b2c 	.word	0x20000b2c

08001dd0 <bmk11_setup>:
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <bmk11_setup+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	605b      	str	r3, [r3, #4]
 8001dd6:	601b      	str	r3, [r3, #0]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	4770      	bx	lr
 8001ddc:	20000b20 	.word	0x20000b20

08001de0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	f3af 8000 	nop.w
 8001de8:	f3af 8000 	nop.w
 8001dec:	f3af 8000 	nop.w

08001df0 <Thread1>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001df0:	b508      	push	{r3, lr}

  (void)arg;
  chRegSetThreadName("blinker");
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <Thread1+0x28>)
 8001df4:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <Thread1+0x2c>)
 8001df6:	699b      	ldr	r3, [r3, #24]
  while (TRUE) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001df8:	4c09      	ldr	r4, [pc, #36]	; (8001e20 <Thread1+0x30>)
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8001dfa:	619a      	str	r2, [r3, #24]
  while (TRUE) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	462e      	mov	r6, r5
 8001e00:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(500);
 8001e02:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e06:	f7ff fb43 	bl	8001490 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001e0a:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 8001e0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e10:	f7ff fb3e 	bl	8001490 <chThdSleep>
 8001e14:	e7f4      	b.n	8001e00 <Thread1+0x10>
 8001e16:	bf00      	nop
 8001e18:	20000b78 	.word	0x20000b78
 8001e1c:	08005d20 	.word	0x08005d20
 8001e20:	40020000 	.word	0x40020000
 8001e24:	f3af 8000 	nop.w
 8001e28:	f3af 8000 	nop.w
 8001e2c:	f3af 8000 	nop.w

08001e30 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 8001e34:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001e38:	2000      	movs	r0, #0
 8001e3a:	6120      	str	r0, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e3c:	2520      	movs	r5, #32
 8001e3e:	f385 8811 	msr	BASEPRI, r5
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8001e42:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001ec0 <VectorB0+0x90>
 8001e46:	6a61      	ldr	r1, [r4, #36]	; 0x24

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e48:	f8d9 301c 	ldr.w	r3, [r9, #28]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8001e4c:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e50:	689a      	ldr	r2, [r3, #8]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8001e52:	ebce 0601 	rsb	r6, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e56:	4296      	cmp	r6, r2
 8001e58:	bf38      	it	cc
 8001e5a:	f109 061c 	addcc.w	r6, r9, #28
 8001e5e:	d31c      	bcc.n	8001e9a <VectorB0+0x6a>

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8001e60:	4680      	mov	r8, r0
 8001e62:	f109 061c 	add.w	r6, r9, #28
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e66:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8001e68:	68df      	ldr	r7, [r3, #12]
      break;
    }

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001e6a:	4472      	add	r2, lr
 8001e6c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e70:	604e      	str	r6, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8001e72:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8001e76:	f8c3 800c 	str.w	r8, [r3, #12]
 8001e7a:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8001e7e:	6918      	ldr	r0, [r3, #16]
 8001e80:	47b8      	blx	r7
 8001e82:	f385 8811 	msr	BASEPRI, r5
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e86:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8001e8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8001e8c:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e90:	689a      	ldr	r2, [r3, #8]
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8001e92:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta) {
 8001e96:	4290      	cmp	r0, r2
 8001e98:	d2e5      	bcs.n	8001e66 <VectorB0+0x36>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e9a:	42b3      	cmp	r3, r6
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea0:	d00b      	beq.n	8001eba <VectorB0+0x8a>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA) {
 8001ea2:	2a01      	cmp	r2, #1
      port_timer_set_alarm(now + vtp->vt_delta);
 8001ea4:	bf14      	ite	ne
 8001ea6:	1852      	addne	r2, r2, r1
    }
    else {
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8001ea8:	1c8a      	addeq	r2, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8001eac:	2300      	movs	r3, #0
 8001eae:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8001eb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8001eb6:	f7ff bf43 	b.w	8001d40 <_port_irq_epilogue>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e7f5      	b.n	8001eac <VectorB0+0x7c>
 8001ec0:	20000b78 	.word	0x20000b78
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	f3af 8000 	nop.w

08001ed0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8001ed4:	4f4b      	ldr	r7, [pc, #300]	; (8002004 <VectorD8+0x134>)
 8001ed6:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001ed8:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 8001edc:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001ede:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8001ee0:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001ee2:	d45e      	bmi.n	8001fa2 <VectorD8+0xd2>
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001eea:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001eee:	d108      	bne.n	8001f02 <VectorD8+0x32>
 8001ef0:	e031      	b.n	8001f56 <VectorD8+0x86>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8001ef2:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8001ef4:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8001ef6:	d41d      	bmi.n	8001f34 <VectorD8+0x64>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001ef8:	682c      	ldr	r4, [r5, #0]
 8001efa:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001efc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001f00:	d029      	beq.n	8001f56 <VectorD8+0x86>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001f02:	0720      	lsls	r0, r4, #28
 8001f04:	d0f5      	beq.n	8001ef2 <VectorD8+0x22>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8001f06:	f014 0f08 	tst.w	r4, #8
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2100      	moveq	r1, #0
 8001f0e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8001f10:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8001f12:	bf48      	it	mi
 8001f14:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001f18:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001f1a:	bf48      	it	mi
 8001f1c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001f20:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 8001f22:	bf48      	it	mi
 8001f24:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001f28:	4837      	ldr	r0, [pc, #220]	; (8002008 <VectorD8+0x138>)
 8001f2a:	f7ff fb71 	bl	8001610 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8001f2e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8001f30:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8001f32:	d5e1      	bpl.n	8001ef8 <VectorD8+0x28>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	b37b      	cbz	r3, 8001f98 <VectorD8+0xc8>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8001f38:	b2f1      	uxtb	r1, r6
 8001f3a:	4834      	ldr	r0, [pc, #208]	; (800200c <VectorD8+0x13c>)
 8001f3c:	f7ff fae0 	bl	8001500 <chIQPutI>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	dad9      	bge.n	8001ef8 <VectorD8+0x28>
 8001f44:	4830      	ldr	r0, [pc, #192]	; (8002008 <VectorD8+0x138>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	f7ff fb62 	bl	8001610 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001f4c:	682c      	ldr	r4, [r5, #0]
 8001f4e:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001f50:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001f54:	d1d5      	bne.n	8001f02 <VectorD8+0x32>
 8001f56:	2300      	movs	r3, #0
 8001f58:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001f5c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001f60:	d001      	beq.n	8001f66 <VectorD8+0x96>
 8001f62:	0622      	lsls	r2, r4, #24
 8001f64:	d42c      	bmi.n	8001fc0 <VectorD8+0xf0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8001f66:	0663      	lsls	r3, r4, #25
 8001f68:	d512      	bpl.n	8001f90 <VectorD8+0xc0>
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f74:	4823      	ldr	r0, [pc, #140]	; (8002004 <VectorD8+0x134>)
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d02f      	beq.n	8001fda <VectorD8+0x10a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001f7a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001f7e:	ea08 0303 	and.w	r3, r8, r3
    u->SR = ~USART_SR_TC;
 8001f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001f86:	60eb      	str	r3, [r5, #12]
 8001f88:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001f8a:	602a      	str	r2, [r5, #0]
 8001f8c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8001f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8001f94:	f7ff bed4 	b.w	8001d40 <_port_irq_epilogue>
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <VectorD8+0x138>)
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	f7ff fb38 	bl	8001610 <chEvtBroadcastFlagsI>
 8001fa0:	e7ca      	b.n	8001f38 <VectorD8+0x68>
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fac:	1d38      	adds	r0, r7, #4
 8001fae:	f7ff fb2f 	bl	8001610 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8001fb2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001fb6:	602b      	str	r3, [r5, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	e791      	b.n	8001ee4 <VectorD8+0x14>
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8001fc6:	4812      	ldr	r0, [pc, #72]	; (8002010 <VectorD8+0x140>)
 8001fc8:	f7ff fac2 	bl	8001550 <chOQGetI>
    if (b < Q_OK) {
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	db0c      	blt.n	8001fea <VectorD8+0x11a>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8001fd0:	6068      	str	r0, [r5, #4]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	e7c5      	b.n	8001f66 <VectorD8+0x96>
 8001fda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0cc      	beq.n	8001f7a <VectorD8+0xaa>
 8001fe0:	3004      	adds	r0, #4
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	f7ff fb14 	bl	8001610 <chEvtBroadcastFlagsI>
 8001fe8:	e7c7      	b.n	8001f7a <VectorD8+0xaa>
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <VectorD8+0x138>)
 8001fec:	2108      	movs	r1, #8
 8001fee:	f7ff fb0f 	bl	8001610 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001ff2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001ff6:	ea08 0303 	and.w	r3, r8, r3
 8001ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffe:	60eb      	str	r3, [r5, #12]
 8002000:	e7e7      	b.n	8001fd2 <VectorD8+0x102>
 8002002:	bf00      	nop
 8002004:	20000a6c 	.word	0x20000a6c
 8002008:	20000a70 	.word	0x20000a70
 800200c:	20000a78 	.word	0x20000a78
 8002010:	20000a9c 	.word	0x20000a9c
 8002014:	f3af 8000 	nop.w
 8002018:	f3af 8000 	nop.w
 800201c:	f3af 8000 	nop.w

08002020 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, time);
 8002020:	300c      	adds	r0, #12
 8002022:	f7ff b9cd 	b.w	80013c0 <chIQReadTimeout>
 8002026:	bf00      	nop
 8002028:	f3af 8000 	nop.w
 800202c:	f3af 8000 	nop.w

08002030 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002030:	300c      	adds	r0, #12
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	f7ff b9c3 	b.w	80013c0 <chIQReadTimeout>
 800203a:	bf00      	nop
 800203c:	f3af 8000 	nop.w

08002040 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, time);
 8002040:	3030      	adds	r0, #48	; 0x30
 8002042:	f7ff b94d 	b.w	80012e0 <chOQWriteTimeout>
 8002046:	bf00      	nop
 8002048:	f3af 8000 	nop.w
 800204c:	f3af 8000 	nop.w

08002050 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002050:	3030      	adds	r0, #48	; 0x30
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	f7ff b943 	b.w	80012e0 <chOQWriteTimeout>
 800205a:	bf00      	nop
 800205c:	f3af 8000 	nop.w

08002060 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002060:	300c      	adds	r0, #12
 8002062:	f7ff b9ed 	b.w	8001440 <chIQGetTimeout>
 8002066:	bf00      	nop
 8002068:	f3af 8000 	nop.w
 800206c:	f3af 8000 	nop.w

08002070 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002070:	300c      	adds	r0, #12
 8002072:	f04f 31ff 	mov.w	r1, #4294967295
 8002076:	f7ff b9e3 	b.w	8001440 <chIQGetTimeout>
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w

08002080 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002080:	3030      	adds	r0, #48	; 0x30
 8002082:	f7ff b975 	b.w	8001370 <chOQPutTimeout>
 8002086:	bf00      	nop
 8002088:	f3af 8000 	nop.w
 800208c:	f3af 8000 	nop.w

08002090 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002090:	3030      	adds	r0, #48	; 0x30
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	f7ff b96b 	b.w	8001370 <chOQPutTimeout>
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w

080020a0 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 80020a0:	b510      	push	{r4, lr}

  test_print("--- System: ");
 80020a2:	482f      	ldr	r0, [pc, #188]	; (8002160 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 80020a4:	4c2f      	ldr	r4, [pc, #188]	; (8002164 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 80020a6:	f7fe fe63 	bl	8000d70 <test_print>
  test_printn(sizeof(ch_system_t));
 80020aa:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80020ae:	f7fe fe6f 	bl	8000d90 <test_printn>
  test_println(" bytes");
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe fe3c 	bl	8000d30 <test_println>
  test_print("--- Thread: ");
 80020b8:	482b      	ldr	r0, [pc, #172]	; (8002168 <bmk13_execute+0xc8>)
 80020ba:	f7fe fe59 	bl	8000d70 <test_print>
  test_printn(sizeof(thread_t));
 80020be:	2044      	movs	r0, #68	; 0x44
 80020c0:	f7fe fe66 	bl	8000d90 <test_printn>
  test_println(" bytes");
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7fe fe33 	bl	8000d30 <test_println>
  test_print("--- Timer : ");
 80020ca:	4828      	ldr	r0, [pc, #160]	; (800216c <bmk13_execute+0xcc>)
 80020cc:	f7fe fe50 	bl	8000d70 <test_print>
  test_printn(sizeof(virtual_timer_t));
 80020d0:	2014      	movs	r0, #20
 80020d2:	f7fe fe5d 	bl	8000d90 <test_printn>
  test_println(" bytes");
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7fe fe2a 	bl	8000d30 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 80020dc:	4824      	ldr	r0, [pc, #144]	; (8002170 <bmk13_execute+0xd0>)
 80020de:	f7fe fe47 	bl	8000d70 <test_print>
  test_printn(sizeof(semaphore_t));
 80020e2:	200c      	movs	r0, #12
 80020e4:	f7fe fe54 	bl	8000d90 <test_printn>
  test_println(" bytes");
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7fe fe21 	bl	8000d30 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 80020ee:	4821      	ldr	r0, [pc, #132]	; (8002174 <bmk13_execute+0xd4>)
 80020f0:	f7fe fe3e 	bl	8000d70 <test_print>
  test_printn(sizeof(event_source_t));
 80020f4:	2004      	movs	r0, #4
 80020f6:	f7fe fe4b 	bl	8000d90 <test_printn>
  test_println(" bytes");
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe fe18 	bl	8000d30 <test_println>
  test_print("--- EventL: ");
 8002100:	481d      	ldr	r0, [pc, #116]	; (8002178 <bmk13_execute+0xd8>)
 8002102:	f7fe fe35 	bl	8000d70 <test_print>
  test_printn(sizeof(event_listener_t));
 8002106:	2014      	movs	r0, #20
 8002108:	f7fe fe42 	bl	8000d90 <test_printn>
  test_println(" bytes");
 800210c:	4620      	mov	r0, r4
 800210e:	f7fe fe0f 	bl	8000d30 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8002112:	481a      	ldr	r0, [pc, #104]	; (800217c <bmk13_execute+0xdc>)
 8002114:	f7fe fe2c 	bl	8000d70 <test_print>
  test_printn(sizeof(mutex_t));
 8002118:	2010      	movs	r0, #16
 800211a:	f7fe fe39 	bl	8000d90 <test_printn>
  test_println(" bytes");
 800211e:	4620      	mov	r0, r4
 8002120:	f7fe fe06 	bl	8000d30 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8002124:	4816      	ldr	r0, [pc, #88]	; (8002180 <bmk13_execute+0xe0>)
 8002126:	f7fe fe23 	bl	8000d70 <test_print>
  test_printn(sizeof(condition_variable_t));
 800212a:	2008      	movs	r0, #8
 800212c:	f7fe fe30 	bl	8000d90 <test_printn>
  test_println(" bytes");
 8002130:	4620      	mov	r0, r4
 8002132:	f7fe fdfd 	bl	8000d30 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <bmk13_execute+0xe4>)
 8002138:	f7fe fe1a 	bl	8000d70 <test_print>
  test_printn(sizeof(io_queue_t));
 800213c:	2024      	movs	r0, #36	; 0x24
 800213e:	f7fe fe27 	bl	8000d90 <test_printn>
  test_println(" bytes");
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe fdf4 	bl	8000d30 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <bmk13_execute+0xe8>)
 800214a:	f7fe fe11 	bl	8000d70 <test_print>
  test_printn(sizeof(mailbox_t));
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	f7fe fe1e 	bl	8000d90 <test_printn>
  test_println(" bytes");
 8002154:	4620      	mov	r0, r4
#endif
}
 8002156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800215a:	f7fe bde9 	b.w	8000d30 <test_println>
 800215e:	bf00      	nop
 8002160:	08005d28 	.word	0x08005d28
 8002164:	08005d38 	.word	0x08005d38
 8002168:	08005d40 	.word	0x08005d40
 800216c:	08005d50 	.word	0x08005d50
 8002170:	08005d60 	.word	0x08005d60
 8002174:	08005d70 	.word	0x08005d70
 8002178:	08005d80 	.word	0x08005d80
 800217c:	08005d90 	.word	0x08005d90
 8002180:	08005da0 	.word	0x08005da0
 8002184:	08005db0 	.word	0x08005db0
 8002188:	08005dc0 	.word	0x08005dc0
 800218c:	f3af 8000 	nop.w

08002190 <bmk12_execute>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8002190:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002192:	f7ff f98d 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002196:	f003 fba3 	bl	80058e0 <test_start_timer.constprop.3>
 800219a:	4d14      	ldr	r5, [pc, #80]	; (80021ec <bmk12_execute+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800219c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <bmk12_execute+0x60>)
 80021a0:	f7ff fb0e 	bl	80017c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 80021a4:	4812      	ldr	r0, [pc, #72]	; (80021f0 <bmk12_execute+0x60>)
 80021a6:	f7fe ff4b 	bl	8001040 <chMtxUnlock>
    chMtxLock(&mtx1);
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <bmk12_execute+0x60>)
 80021ac:	f7ff fb08 	bl	80017c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 80021b0:	480f      	ldr	r0, [pc, #60]	; (80021f0 <bmk12_execute+0x60>)
 80021b2:	f7fe ff45 	bl	8001040 <chMtxUnlock>
    chMtxLock(&mtx1);
 80021b6:	480e      	ldr	r0, [pc, #56]	; (80021f0 <bmk12_execute+0x60>)
 80021b8:	f7ff fb02 	bl	80017c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <bmk12_execute+0x60>)
 80021be:	f7fe ff3f 	bl	8001040 <chMtxUnlock>
    chMtxLock(&mtx1);
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <bmk12_execute+0x60>)
 80021c4:	f7ff fafc 	bl	80017c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <bmk12_execute+0x60>)
 80021ca:	f7fe ff39 	bl	8001040 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80021ce:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 80021d0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0e3      	beq.n	800219e <bmk12_execute+0xe>
  test_print("--- Score : ");
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <bmk12_execute+0x64>)
 80021d8:	f7fe fdca 	bl	8000d70 <test_print>
  test_printn(n * 4);
 80021dc:	00a0      	lsls	r0, r4, #2
 80021de:	f7fe fdd7 	bl	8000d90 <test_printn>
  test_println(" lock+unlock/S");
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <bmk12_execute+0x68>)
}
 80021e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80021e8:	f7fe bda2 	b.w	8000d30 <test_println>
 80021ec:	20000b70 	.word	0x20000b70
 80021f0:	20000b2c 	.word	0x20000b2c
 80021f4:	08005dd0 	.word	0x08005dd0
 80021f8:	08005de0 	.word	0x08005de0
 80021fc:	f3af 8000 	nop.w

08002200 <bmk9_execute>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <bmk9_execute+0x9c>)
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <bmk9_execute+0xa0>)
 8002206:	4f27      	ldr	r7, [pc, #156]	; (80022a4 <bmk9_execute+0xa4>)
 8002208:	605b      	str	r3, [r3, #4]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800220a:	2400      	movs	r4, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 800220c:	f102 0110 	add.w	r1, r2, #16
 8002210:	601b      	str	r3, [r3, #0]
 8002212:	6119      	str	r1, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8002214:	615a      	str	r2, [r3, #20]
 8002216:	619a      	str	r2, [r3, #24]
 8002218:	60da      	str	r2, [r3, #12]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800221a:	609c      	str	r4, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 800221c:	61dc      	str	r4, [r3, #28]
  iqp->q_link = link;
 800221e:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8002220:	f7ff f946 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002224:	f003 fb5c 	bl	80058e0 <test_start_timer.constprop.3>
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8002228:	4626      	mov	r6, r4
 800222a:	2520      	movs	r5, #32
 800222c:	f385 8811 	msr	BASEPRI, r5
 8002230:	2100      	movs	r1, #0
 8002232:	481b      	ldr	r0, [pc, #108]	; (80022a0 <bmk9_execute+0xa0>)
 8002234:	f7ff f964 	bl	8001500 <chIQPutI>
    chIQPutI(&iq, 1);
 8002238:	2101      	movs	r1, #1
 800223a:	4819      	ldr	r0, [pc, #100]	; (80022a0 <bmk9_execute+0xa0>)
 800223c:	f7ff f960 	bl	8001500 <chIQPutI>
    chIQPutI(&iq, 2);
 8002240:	2102      	movs	r1, #2
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <bmk9_execute+0xa0>)
 8002244:	f7ff f95c 	bl	8001500 <chIQPutI>
    chIQPutI(&iq, 3);
 8002248:	2103      	movs	r1, #3
 800224a:	4815      	ldr	r0, [pc, #84]	; (80022a0 <bmk9_execute+0xa0>)
 800224c:	f7ff f958 	bl	8001500 <chIQPutI>
 8002250:	f386 8811 	msr	BASEPRI, r6
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	4811      	ldr	r0, [pc, #68]	; (80022a0 <bmk9_execute+0xa0>)
 800225a:	f7ff f8f1 	bl	8001440 <chIQGetTimeout>
 800225e:	f04f 31ff 	mov.w	r1, #4294967295
 8002262:	480f      	ldr	r0, [pc, #60]	; (80022a0 <bmk9_execute+0xa0>)
 8002264:	f7ff f8ec 	bl	8001440 <chIQGetTimeout>
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <bmk9_execute+0xa0>)
 800226e:	f7ff f8e7 	bl	8001440 <chIQGetTimeout>
 8002272:	480b      	ldr	r0, [pc, #44]	; (80022a0 <bmk9_execute+0xa0>)
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	f7ff f8e2 	bl	8001440 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800227c:	783b      	ldrb	r3, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 800227e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0d3      	beq.n	800222c <bmk9_execute+0x2c>
  test_print("--- Score : ");
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <bmk9_execute+0xa8>)
 8002286:	f7fe fd73 	bl	8000d70 <test_print>
  test_printn(n * 4);
 800228a:	00a0      	lsls	r0, r4, #2
 800228c:	f7fe fd80 	bl	8000d90 <test_printn>
  test_println(" bytes/S");
 8002290:	4806      	ldr	r0, [pc, #24]	; (80022ac <bmk9_execute+0xac>)
}
 8002292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8002296:	f7fe bd4b 	b.w	8000d30 <test_println>
 800229a:	bf00      	nop
 800229c:	20000a30 	.word	0x20000a30
 80022a0:	200008bc 	.word	0x200008bc
 80022a4:	20000b70 	.word	0x20000b70
 80022a8:	08005dd0 	.word	0x08005dd0
 80022ac:	08005df0 	.word	0x08005df0

080022b0 <bmk11_execute>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80022b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80022b2:	f7ff f8fd 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 80022b6:	f003 fb13 	bl	80058e0 <test_start_timer.constprop.3>
 80022ba:	4d14      	ldr	r5, [pc, #80]	; (800230c <bmk11_execute+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80022bc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80022be:	4814      	ldr	r0, [pc, #80]	; (8002310 <bmk11_execute+0x60>)
 80022c0:	f7fe ff86 	bl	80011d0 <chSemWait>
    chSemSignal(&sem1);
 80022c4:	4812      	ldr	r0, [pc, #72]	; (8002310 <bmk11_execute+0x60>)
 80022c6:	f7fe feeb 	bl	80010a0 <chSemSignal>
    chSemWait(&sem1);
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <bmk11_execute+0x60>)
 80022cc:	f7fe ff80 	bl	80011d0 <chSemWait>
    chSemSignal(&sem1);
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <bmk11_execute+0x60>)
 80022d2:	f7fe fee5 	bl	80010a0 <chSemSignal>
    chSemWait(&sem1);
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <bmk11_execute+0x60>)
 80022d8:	f7fe ff7a 	bl	80011d0 <chSemWait>
    chSemSignal(&sem1);
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <bmk11_execute+0x60>)
 80022de:	f7fe fedf 	bl	80010a0 <chSemSignal>
    chSemWait(&sem1);
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <bmk11_execute+0x60>)
 80022e4:	f7fe ff74 	bl	80011d0 <chSemWait>
    chSemSignal(&sem1);
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <bmk11_execute+0x60>)
 80022ea:	f7fe fed9 	bl	80010a0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80022ee:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80022f0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0e3      	beq.n	80022be <bmk11_execute+0xe>
  test_print("--- Score : ");
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <bmk11_execute+0x64>)
 80022f8:	f7fe fd3a 	bl	8000d70 <test_print>
  test_printn(n * 4);
 80022fc:	00a0      	lsls	r0, r4, #2
 80022fe:	f7fe fd47 	bl	8000d90 <test_printn>
  test_println(" wait+signal/S");
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <bmk11_execute+0x68>)
}
 8002304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8002308:	f7fe bd12 	b.w	8000d30 <test_println>
 800230c:	20000b70 	.word	0x20000b70
 8002310:	20000b20 	.word	0x20000b20
 8002314:	08005dd0 	.word	0x08005dd0
 8002318:	08005dfc 	.word	0x08005dfc
 800231c:	f3af 8000 	nop.w

08002320 <bmk10_execute>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8002320:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8002322:	f7ff f8c5 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002326:	f003 fadb 	bl	80058e0 <test_start_timer.constprop.3>
 800232a:	4d15      	ldr	r5, [pc, #84]	; (8002380 <bmk10_execute+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800232c:	2400      	movs	r4, #0
 800232e:	2320      	movs	r3, #32
 8002330:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <bmk10_execute+0x64>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <bmk10_execute+0x68>)
 8002338:	2101      	movs	r1, #1
 800233a:	2300      	movs	r3, #0
 800233c:	f7fe fde8 	bl	8000f10 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002340:	4a11      	ldr	r2, [pc, #68]	; (8002388 <bmk10_execute+0x68>)
 8002342:	4812      	ldr	r0, [pc, #72]	; (800238c <bmk10_execute+0x6c>)
 8002344:	f242 7110 	movw	r1, #10000	; 0x2710
 8002348:	2300      	movs	r3, #0
 800234a:	f7fe fde1 	bl	8000f10 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <bmk10_execute+0x64>)
 8002350:	f7fe fdae 	bl	8000eb0 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <bmk10_execute+0x6c>)
 8002356:	f7fe fdab 	bl	8000eb0 <chVTDoResetI>
 800235a:	2300      	movs	r3, #0
 800235c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002360:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8002362:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0e2      	beq.n	800232e <bmk10_execute+0xe>
  test_print("--- Score : ");
 8002368:	4809      	ldr	r0, [pc, #36]	; (8002390 <bmk10_execute+0x70>)
 800236a:	f7fe fd01 	bl	8000d70 <test_print>
  test_printn(n * 2);
 800236e:	0060      	lsls	r0, r4, #1
 8002370:	f7fe fd0e 	bl	8000d90 <test_printn>
  test_println(" timers/S");
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <bmk10_execute+0x74>)
}
 8002376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 800237a:	f7fe bcd9 	b.w	8000d30 <test_println>
 800237e:	bf00      	nop
 8002380:	20000b70 	.word	0x20000b70
 8002384:	20000a58 	.word	0x20000a58
 8002388:	08001de1 	.word	0x08001de1
 800238c:	20000b3c 	.word	0x20000b3c
 8002390:	08005dd0 	.word	0x08005dd0
 8002394:	08005e0c 	.word	0x08005e0c
 8002398:	f3af 8000 	nop.w
 800239c:	f3af 8000 	nop.w

080023a0 <bmk7_setup.lto_priv.116>:
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <bmk7_setup.lto_priv.116+0xc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605b      	str	r3, [r3, #4]
 80023a6:	601b      	str	r3, [r3, #0]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	4770      	bx	lr
 80023ac:	20000b20 	.word	0x20000b20

080023b0 <thread1.lto_priv.122>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	f3af 8000 	nop.w
 80023b8:	f3af 8000 	nop.w
 80023bc:	f3af 8000 	nop.w

080023c0 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	f3af 8000 	nop.w
 80023cc:	f3af 8000 	nop.w

080023d0 <queues2_setup.lto_priv.108>:
 * This test case tests sysnchronos and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 80023d0:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <queues2_setup.lto_priv.108+0x24>)
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <queues2_setup.lto_priv.108+0x28>)
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <queues2_setup.lto_priv.108+0x2c>)
 80023d8:	605b      	str	r3, [r3, #4]
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80023da:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80023dc:	2404      	movs	r4, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 80023de:	2100      	movs	r1, #0
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80023e0:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80023e2:	609c      	str	r4, [r3, #8]
 80023e4:	601b      	str	r3, [r3, #0]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80023ec:	61d8      	str	r0, [r3, #28]
  oqp->q_link = link;
 80023ee:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80023f0:	bc30      	pop	{r4, r5}
 80023f2:	4770      	bx	lr
 80023f4:	20000d10 	.word	0x20000d10
 80023f8:	20000800 	.word	0x20000800
 80023fc:	080023c1 	.word	0x080023c1

08002400 <queues1_setup.lto_priv.106>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <queues1_setup.lto_priv.106+0x24>)
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <queues1_setup.lto_priv.106+0x28>)
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <queues1_setup.lto_priv.106+0x2c>)
 * This test case tests sysnchronos and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8002406:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8002408:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 800240a:	1d14      	adds	r4, r2, #4
 800240c:	611c      	str	r4, [r3, #16]
 800240e:	605b      	str	r3, [r3, #4]
 8002410:	601b      	str	r3, [r3, #0]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8002412:	615a      	str	r2, [r3, #20]
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8002418:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800241a:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 800241c:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 800241e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000d10 	.word	0x20000d10
 8002428:	20000824 	.word	0x20000824
 800242c:	080023c1 	.word	0x080023c1

08002430 <dyn3_setup.lto_priv.104>:
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8002430:	4909      	ldr	r1, [pc, #36]	; (8002458 <dyn3_setup.lto_priv.104+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <dyn3_setup.lto_priv.104+0x2c>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8002434:	b410      	push	{r4}
 8002436:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002438:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 800243c:	e881 0014 	stmia.w	r1, {r2, r4}
 8002440:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8002444:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	6158      	str	r0, [r3, #20]
 800244a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8002450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000d10 	.word	0x20000d10
 800245c:	20000cd8 	.word	0x20000cd8

08002460 <bmk8_execute.lto_priv.118>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8002466:	ac04      	add	r4, sp, #16
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002468:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002538 <bmk8_execute.lto_priv.118+0xd8>
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800246c:	4f2d      	ldr	r7, [pc, #180]	; (8002524 <bmk8_execute.lto_priv.118+0xc4>)
 800246e:	4e2e      	ldr	r6, [pc, #184]	; (8002528 <bmk8_execute.lto_priv.118+0xc8>)
 8002470:	4d2e      	ldr	r5, [pc, #184]	; (800252c <bmk8_execute.lto_priv.118+0xcc>)
}

static void bmk8_execute(void) {
  uint32_t n;

  n = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8002478:	f7ff f81a 	bl	80014b0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800247c:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	9400      	str	r4, [sp, #0]
 8002484:	4633      	mov	r3, r6
 8002486:	3a01      	subs	r2, #1
 8002488:	4638      	mov	r0, r7
 800248a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800248e:	f7fe fe27 	bl	80010e0 <chThdCreateStatic>
 8002492:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002496:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	9400      	str	r4, [sp, #0]
 800249c:	4633      	mov	r3, r6
 800249e:	3a01      	subs	r2, #1
 80024a0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80024a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024a8:	f7fe fe1a 	bl	80010e0 <chThdCreateStatic>
 80024ac:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80024b0:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	9400      	str	r4, [sp, #0]
 80024b6:	4633      	mov	r3, r6
 80024b8:	3a01      	subs	r2, #1
 80024ba:	f507 7024 	add.w	r0, r7, #656	; 0x290
 80024be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024c2:	f7fe fe0d 	bl	80010e0 <chThdCreateStatic>
 80024c6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80024ca:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	9400      	str	r4, [sp, #0]
 80024d0:	4633      	mov	r3, r6
 80024d2:	3a01      	subs	r2, #1
 80024d4:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80024d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024dc:	f7fe fe00 	bl	80010e0 <chThdCreateStatic>
 80024e0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80024e4:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	9400      	str	r4, [sp, #0]
 80024ea:	3a01      	subs	r2, #1
 80024ec:	4633      	mov	r3, r6
 80024ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024f2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80024f6:	f7fe fdf3 	bl	80010e0 <chThdCreateStatic>
 80024fa:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 80024fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8002500:	f7fe ffc6 	bl	8001490 <chThdSleep>
  test_terminate_threads();
 8002504:	f7fe fb84 	bl	8000c10 <test_terminate_threads>
  test_wait_threads();
 8002508:	f7ff fa32 	bl	8001970 <test_wait_threads>

  test_print("--- Score : ");
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <bmk8_execute.lto_priv.118+0xd0>)
 800250e:	f7fe fc2f 	bl	8000d70 <test_print>
  test_printn(n);
 8002512:	9803      	ldr	r0, [sp, #12]
 8002514:	f7fe fc3c 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <bmk8_execute.lto_priv.118+0xd4>)
 800251a:	f7fe fc09 	bl	8000d30 <test_println>
}
 800251e:	b004      	add	sp, #16
 8002520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002524:	20000d10 	.word	0x20000d10
 8002528:	08002541 	.word	0x08002541
 800252c:	20000a40 	.word	0x20000a40
 8002530:	08005dd0 	.word	0x08005dd0
 8002534:	080064f0 	.word	0x080064f0
 8002538:	20000b78 	.word	0x20000b78
 800253c:	f3af 8000 	nop.w

08002540 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4d09      	ldr	r5, [pc, #36]	; (8002568 <thread8+0x28>)
 8002544:	4604      	mov	r4, r0

  do {
    chThdYield();
 8002546:	f7fe fc83 	bl	8000e50 <chThdYield>
    chThdYield();
 800254a:	f7fe fc81 	bl	8000e50 <chThdYield>
    chThdYield();
 800254e:	f7fe fc7f 	bl	8000e50 <chThdYield>
    chThdYield();
 8002552:	f7fe fc7d 	bl	8000e50 <chThdYield>
    (*(uint32_t *)p) += 4;
 8002556:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8002558:	69aa      	ldr	r2, [r5, #24]
 800255a:	3304      	adds	r3, #4
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8002560:	075b      	lsls	r3, r3, #29
 8002562:	d5f0      	bpl.n	8002546 <thread8+0x6>
  return 0;
}
 8002564:	2000      	movs	r0, #0
 8002566:	bd38      	pop	{r3, r4, r5, pc}
 8002568:	20000b78 	.word	0x20000b78
 800256c:	f3af 8000 	nop.w

08002570 <bmk6_execute.lto_priv.115>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <bmk6_execute.lto_priv.115+0x4c>)
 8002574:	4f12      	ldr	r7, [pc, #72]	; (80025c0 <bmk6_execute.lto_priv.115+0x50>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800257a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
 800257c:	f7fe ff98 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002580:	f003 f9ae 	bl	80058e0 <test_start_timer.constprop.3>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8002584:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8002586:	3501      	adds	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8002588:	4626      	mov	r6, r4
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <bmk6_execute.lto_priv.115+0x54>)
 800258c:	9600      	str	r6, [sp, #0]
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <bmk6_execute.lto_priv.115+0x58>)
 8002590:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002594:	462a      	mov	r2, r5
 8002596:	f7fe fda3 	bl	80010e0 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800259a:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800259c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f3      	beq.n	800258a <bmk6_execute.lto_priv.115+0x1a>
  test_print("--- Score : ");
 80025a2:	480a      	ldr	r0, [pc, #40]	; (80025cc <bmk6_execute.lto_priv.115+0x5c>)
 80025a4:	f7fe fbe4 	bl	8000d70 <test_print>
  test_printn(n);
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7fe fbf1 	bl	8000d90 <test_printn>
  test_println(" threads/S");
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <bmk6_execute.lto_priv.115+0x60>)
}
 80025b0:	b003      	add	sp, #12
 80025b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80025b6:	f7fe bbbb 	b.w	8000d30 <test_println>
 80025ba:	bf00      	nop
 80025bc:	20000b78 	.word	0x20000b78
 80025c0:	20000b70 	.word	0x20000b70
 80025c4:	080023b1 	.word	0x080023b1
 80025c8:	20000d10 	.word	0x20000d10
 80025cc:	08005dd0 	.word	0x08005dd0
 80025d0:	080064fc 	.word	0x080064fc
 80025d4:	f3af 8000 	nop.w
 80025d8:	f3af 8000 	nop.w
 80025dc:	f3af 8000 	nop.w

080025e0 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 80025e0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80025e2:	4c07      	ldr	r4, [pc, #28]	; (8002600 <thread3+0x20>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 80025e4:	69a3      	ldr	r3, [r4, #24]
 80025e6:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 80025e8:	075a      	lsls	r2, r3, #29
 80025ea:	d406      	bmi.n	80025fa <thread3+0x1a>
    chSemWait(&sem1);
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <thread3+0x24>)
 80025ee:	f7fe fdef 	bl	80011d0 <chSemWait>
 80025f2:	69a3      	ldr	r3, [r4, #24]
 80025f4:	7f5b      	ldrb	r3, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 80025f6:	075b      	lsls	r3, r3, #29
 80025f8:	d5f8      	bpl.n	80025ec <thread3+0xc>
    chSemWait(&sem1);
  return 0;
}
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	bf00      	nop
 8002600:	20000b78 	.word	0x20000b78
 8002604:	20000b20 	.word	0x20000b20
 8002608:	f3af 8000 	nop.w
 800260c:	f3af 8000 	nop.w

08002610 <bmk7_execute.lto_priv.117>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8002610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002614:	4e3a      	ldr	r6, [pc, #232]	; (8002700 <bmk7_execute.lto_priv.117+0xf0>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <bmk7_execute.lto_priv.117+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002618:	69b2      	ldr	r2, [r6, #24]
 800261a:	483b      	ldr	r0, [pc, #236]	; (8002708 <bmk7_execute.lto_priv.117+0xf8>)
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	4d3b      	ldr	r5, [pc, #236]	; (800270c <bmk7_execute.lto_priv.117+0xfc>)
 8002620:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8002730 <bmk7_execute.lto_priv.117+0x120>
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8002624:	b083      	sub	sp, #12
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8002626:	2400      	movs	r4, #0
 8002628:	3205      	adds	r2, #5
 800262a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800262e:	9400      	str	r4, [sp, #0]
 8002630:	f7fe fd56 	bl	80010e0 <chThdCreateStatic>
 8002634:	69b3      	ldr	r3, [r6, #24]
 8002636:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <bmk7_execute.lto_priv.117+0x100>)
 800263c:	4b31      	ldr	r3, [pc, #196]	; (8002704 <bmk7_execute.lto_priv.117+0xf4>)
 800263e:	9400      	str	r4, [sp, #0]
 8002640:	3204      	adds	r2, #4
 8002642:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002646:	f7fe fd4b 	bl	80010e0 <chThdCreateStatic>
 800264a:	69b3      	ldr	r3, [r6, #24]
 800264c:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4830      	ldr	r0, [pc, #192]	; (8002714 <bmk7_execute.lto_priv.117+0x104>)
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <bmk7_execute.lto_priv.117+0xf4>)
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	3203      	adds	r2, #3
 8002658:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800265c:	f7fe fd40 	bl	80010e0 <chThdCreateStatic>
 8002660:	69b3      	ldr	r3, [r6, #24]
 8002662:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	482c      	ldr	r0, [pc, #176]	; (8002718 <bmk7_execute.lto_priv.117+0x108>)
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <bmk7_execute.lto_priv.117+0xf4>)
 800266a:	9400      	str	r4, [sp, #0]
 800266c:	3202      	adds	r2, #2
 800266e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002672:	f7fe fd35 	bl	80010e0 <chThdCreateStatic>
 8002676:	69b3      	ldr	r3, [r6, #24]
 8002678:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4827      	ldr	r0, [pc, #156]	; (800271c <bmk7_execute.lto_priv.117+0x10c>)
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <bmk7_execute.lto_priv.117+0xf4>)
 8002680:	9400      	str	r4, [sp, #0]
 8002682:	3201      	adds	r2, #1
 8002684:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002688:	f7fe fd2a 	bl	80010e0 <chThdCreateStatic>
 800268c:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800268e:	f7fe ff0f 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002692:	f003 f925 	bl	80058e0 <test_start_timer.constprop.3>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002696:	46a0      	mov	r8, r4
 8002698:	2720      	movs	r7, #32
 800269a:	2620      	movs	r6, #32
 800269c:	f387 8811 	msr	BASEPRI, r7
 80026a0:	481f      	ldr	r0, [pc, #124]	; (8002720 <bmk7_execute.lto_priv.117+0x110>)
 80026a2:	2100      	movs	r1, #0
 80026a4:	f7ff fae4 	bl	8001c70 <chSemResetI>
 80026a8:	2500      	movs	r5, #0
  chSchRescheduleS();
 80026aa:	f7fe fc71 	bl	8000f90 <chSchRescheduleS>
 80026ae:	f388 8811 	msr	BASEPRI, r8
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80026b2:	f899 3000 	ldrb.w	r3, [r9]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 80026b6:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <bmk7_execute.lto_priv.117+0x8a>
  test_terminate_threads();
 80026bc:	f7fe faa8 	bl	8000c10 <test_terminate_threads>
 80026c0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80026c4:	4816      	ldr	r0, [pc, #88]	; (8002720 <bmk7_execute.lto_priv.117+0x110>)
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7ff fad2 	bl	8001c70 <chSemResetI>
  chSchRescheduleS();
 80026cc:	f7fe fc60 	bl	8000f90 <chSchRescheduleS>
 80026d0:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 80026d4:	f7ff f94c 	bl	8001970 <test_wait_threads>

  test_print("--- Score : ");
 80026d8:	4812      	ldr	r0, [pc, #72]	; (8002724 <bmk7_execute.lto_priv.117+0x114>)
 80026da:	f7fe fb49 	bl	8000d70 <test_print>
  test_printn(n);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7fe fb56 	bl	8000d90 <test_printn>
  test_print(" reschedules/S, ");
 80026e4:	4810      	ldr	r0, [pc, #64]	; (8002728 <bmk7_execute.lto_priv.117+0x118>)
 80026e6:	f7fe fb43 	bl	8000d70 <test_print>
  test_printn(n * 6);
 80026ea:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80026ee:	0040      	lsls	r0, r0, #1
 80026f0:	f7fe fb4e 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <bmk7_execute.lto_priv.117+0x11c>)
}
 80026f6:	b003      	add	sp, #12
 80026f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80026fc:	f7fe bb18 	b.w	8000d30 <test_println>
 8002700:	20000b78 	.word	0x20000b78
 8002704:	080025e1 	.word	0x080025e1
 8002708:	20000d10 	.word	0x20000d10
 800270c:	20000a40 	.word	0x20000a40
 8002710:	20000e58 	.word	0x20000e58
 8002714:	20000fa0 	.word	0x20000fa0
 8002718:	200010e8 	.word	0x200010e8
 800271c:	20001230 	.word	0x20001230
 8002720:	20000b20 	.word	0x20000b20
 8002724:	08005dd0 	.word	0x08005dd0
 8002728:	08006508 	.word	0x08006508
 800272c:	080064f0 	.word	0x080064f0
 8002730:	20000b70 	.word	0x20000b70
 8002734:	f3af 8000 	nop.w
 8002738:	f3af 8000 	nop.w
 800273c:	f3af 8000 	nop.w

08002740 <bmk5_execute.lto_priv.114>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <bmk5_execute.lto_priv.114+0x50>)
 8002744:	4f13      	ldr	r7, [pc, #76]	; (8002794 <bmk5_execute.lto_priv.114+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800274a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
 800274c:	f7fe feb0 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 8002750:	f003 f8c6 	bl	80058e0 <test_start_timer.constprop.3>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 8002754:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8002756:	3d01      	subs	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8002758:	4626      	mov	r6, r4
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <bmk5_execute.lto_priv.114+0x58>)
 800275c:	9600      	str	r6, [sp, #0]
 800275e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002762:	462a      	mov	r2, r5
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <bmk5_execute.lto_priv.114+0x5c>)
 8002766:	f7fe fcbb 	bl	80010e0 <chThdCreateStatic>
 800276a:	f7ff f8e1 	bl	8001930 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800276e:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8002770:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f1      	beq.n	800275a <bmk5_execute.lto_priv.114+0x1a>
  test_print("--- Score : ");
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <bmk5_execute.lto_priv.114+0x60>)
 8002778:	f7fe fafa 	bl	8000d70 <test_print>
  test_printn(n);
 800277c:	4620      	mov	r0, r4
 800277e:	f7fe fb07 	bl	8000d90 <test_printn>
  test_println(" threads/S");
 8002782:	4808      	ldr	r0, [pc, #32]	; (80027a4 <bmk5_execute.lto_priv.114+0x64>)
}
 8002784:	b003      	add	sp, #12
 8002786:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800278a:	f7fe bad1 	b.w	8000d30 <test_println>
 800278e:	bf00      	nop
 8002790:	20000b78 	.word	0x20000b78
 8002794:	20000b70 	.word	0x20000b70
 8002798:	080023b1 	.word	0x080023b1
 800279c:	20000d10 	.word	0x20000d10
 80027a0:	08005dd0 	.word	0x08005dd0
 80027a4:	080064fc 	.word	0x080064fc
 80027a8:	f3af 8000 	nop.w
 80027ac:	f3af 8000 	nop.w

080027b0 <bmk4_execute.lto_priv.113>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 80027b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <bmk4_execute.lto_priv.113+0x9c>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80027b6:	4826      	ldr	r0, [pc, #152]	; (8002850 <bmk4_execute.lto_priv.113+0xa0>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <bmk4_execute.lto_priv.113+0xa4>)
 80027bc:	6892      	ldr	r2, [r2, #8]
 80027be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002864 <bmk4_execute.lto_priv.113+0xb4>
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 80027c2:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80027c4:	2500      	movs	r5, #0
 80027c6:	3201      	adds	r2, #1
 80027c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027cc:	9500      	str	r5, [sp, #0]
 80027ce:	f7fe fc87 	bl	80010e0 <chThdCreateStatic>
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <bmk4_execute.lto_priv.113+0xa8>)
 80027d4:	4604      	mov	r4, r0
 80027d6:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 80027d8:	f7fe fe6a 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 80027dc:	f003 f880 	bl	80058e0 <test_start_timer.constprop.3>
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80027e0:	46aa      	mov	sl, r5
 80027e2:	f04f 0820 	mov.w	r8, #32
 80027e6:	2720      	movs	r7, #32
 80027e8:	f388 8811 	msr	BASEPRI, r8
 80027ec:	2100      	movs	r1, #0
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7fe fbf6 	bl	8000fe0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80027f4:	4620      	mov	r0, r4
 80027f6:	2100      	movs	r1, #0
 80027f8:	f7fe fbf2 	bl	8000fe0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80027fc:	4620      	mov	r0, r4
 80027fe:	2100      	movs	r1, #0
 8002800:	f7fe fbee 	bl	8000fe0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8002804:	4620      	mov	r0, r4
 8002806:	2100      	movs	r1, #0
 8002808:	f7fe fbea 	bl	8000fe0 <chSchWakeupS>
 800280c:	2600      	movs	r6, #0
 800280e:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002812:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8002816:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0e4      	beq.n	80027e6 <bmk4_execute.lto_priv.113+0x36>
 800281c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	4620      	mov	r0, r4
 8002826:	f7fe fbdb 	bl	8000fe0 <chSchWakeupS>
 800282a:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 800282e:	f7ff f89f 	bl	8001970 <test_wait_threads>
  test_print("--- Score : ");
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <bmk4_execute.lto_priv.113+0xac>)
 8002834:	f7fe fa9c 	bl	8000d70 <test_print>
  test_printn(n * 2);
 8002838:	0068      	lsls	r0, r5, #1
 800283a:	f7fe faa9 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 800283e:	4808      	ldr	r0, [pc, #32]	; (8002860 <bmk4_execute.lto_priv.113+0xb0>)
}
 8002840:	b002      	add	sp, #8
 8002842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8002846:	f7fe ba73 	b.w	8000d30 <test_println>
 800284a:	bf00      	nop
 800284c:	20000b78 	.word	0x20000b78
 8002850:	20000d10 	.word	0x20000d10
 8002854:	08002871 	.word	0x08002871
 8002858:	20000a40 	.word	0x20000a40
 800285c:	08005dd0 	.word	0x08005dd0
 8002860:	080064f0 	.word	0x080064f0
 8002864:	20000b70 	.word	0x20000b70
 8002868:	f3af 8000 	nop.w
 800286c:	f3af 8000 	nop.w

08002870 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8002872:	b510      	push	{r4, lr}
 8002874:	2320      	movs	r3, #32
 8002876:	6994      	ldr	r4, [r2, #24]
 8002878:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800287c:	2003      	movs	r0, #3
 800287e:	f7fe fc6f 	bl	8001160 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8002882:	6a23      	ldr	r3, [r4, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f9      	beq.n	800287c <thread4+0xc>
 8002888:	2000      	movs	r0, #0
 800288a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	20000b78 	.word	0x20000b78
 8002894:	f3af 8000 	nop.w
 8002898:	f3af 8000 	nop.w
 800289c:	f3af 8000 	nop.w

080028a0 <thread2.lto_priv.124>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	2620      	movs	r6, #32
 80028a4:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80028a6:	f7fe fc73 	bl	8001190 <chMsgWait>
 80028aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80028ac:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80028b0:	4621      	mov	r1, r4
 80028b2:	f7fe fb95 	bl	8000fe0 <chSchWakeupS>
 80028b6:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80028ba:	2c00      	cmp	r4, #0
 80028bc:	d1f3      	bne.n	80028a6 <thread2.lto_priv.124+0x6>
  return 0;
}
 80028be:	4620      	mov	r0, r4
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
 80028c8:	f3af 8000 	nop.w
 80028cc:	f3af 8000 	nop.w

080028d0 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 80028d4:	f7fe fdec 	bl	80014b0 <test_wait_tick>
  test_start_timer(1000);
 80028d8:	f003 f802 	bl	80058e0 <test_start_timer.constprop.3>
 80028dc:	4e07      	ldr	r6, [pc, #28]	; (80028fc <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 80028de:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 80028e0:	4628      	mov	r0, r5
 80028e2:	2101      	movs	r1, #1
 80028e4:	f7fe fe5c 	bl	80015a0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80028e8:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 80028ea:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f7      	beq.n	80028e0 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 80028f0:	4628      	mov	r0, r5
 80028f2:	2100      	movs	r1, #0
 80028f4:	f7fe fe54 	bl	80015a0 <chMsgSend>
  return n;
}
 80028f8:	4620      	mov	r0, r4
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	20000b70 	.word	0x20000b70

08002900 <bmk3_execute.lto_priv.112>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8002900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002904:	4f2c      	ldr	r7, [pc, #176]	; (80029b8 <bmk3_execute.lto_priv.112+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002906:	4d2d      	ldr	r5, [pc, #180]	; (80029bc <bmk3_execute.lto_priv.112+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <bmk3_execute.lto_priv.112+0xc0>)
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	4c2d      	ldr	r4, [pc, #180]	; (80029c4 <bmk3_execute.lto_priv.112+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8002910:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80029d4 <bmk3_execute.lto_priv.112+0xd4>
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8002914:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002916:	2600      	movs	r6, #0
 8002918:	3201      	adds	r2, #1
 800291a:	4628      	mov	r0, r5
 800291c:	9600      	str	r6, [sp, #0]
 800291e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002922:	f7fe fbdd 	bl	80010e0 <chThdCreateStatic>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	9600      	str	r6, [sp, #0]
 800292e:	4643      	mov	r3, r8
 8002930:	3a02      	subs	r2, #2
 8002932:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8002936:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800293a:	f7fe fbd1 	bl	80010e0 <chThdCreateStatic>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	9600      	str	r6, [sp, #0]
 8002946:	4643      	mov	r3, r8
 8002948:	3a03      	subs	r2, #3
 800294a:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800294e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002952:	f7fe fbc5 	bl	80010e0 <chThdCreateStatic>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	9600      	str	r6, [sp, #0]
 800295e:	4643      	mov	r3, r8
 8002960:	3a04      	subs	r2, #4
 8002962:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8002966:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800296a:	f7fe fbb9 	bl	80010e0 <chThdCreateStatic>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	9600      	str	r6, [sp, #0]
 8002976:	3a05      	subs	r2, #5
 8002978:	4643      	mov	r3, r8
 800297a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800297e:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8002982:	f7fe fbad 	bl	80010e0 <chThdCreateStatic>
 8002986:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	f7ff ffa1 	bl	80028d0 <msg_loop_test>
 800298e:	4604      	mov	r4, r0
  test_wait_threads();
 8002990:	f7fe ffee 	bl	8001970 <test_wait_threads>
  test_print("--- Score : ");
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <bmk3_execute.lto_priv.112+0xc8>)
 8002996:	f7fe f9eb 	bl	8000d70 <test_print>
  test_printn(n);
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe f9f8 	bl	8000d90 <test_printn>
  test_print(" msgs/S, ");
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <bmk3_execute.lto_priv.112+0xcc>)
 80029a2:	f7fe f9e5 	bl	8000d70 <test_print>
  test_printn(n << 1);
 80029a6:	0060      	lsls	r0, r4, #1
 80029a8:	f7fe f9f2 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 80029ac:	4808      	ldr	r0, [pc, #32]	; (80029d0 <bmk3_execute.lto_priv.112+0xd0>)
}
 80029ae:	b002      	add	sp, #8
 80029b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80029b4:	f7fe b9bc 	b.w	8000d30 <test_println>
 80029b8:	20000b78 	.word	0x20000b78
 80029bc:	20000d10 	.word	0x20000d10
 80029c0:	080028a1 	.word	0x080028a1
 80029c4:	20000a40 	.word	0x20000a40
 80029c8:	08005dd0 	.word	0x08005dd0
 80029cc:	0800651c 	.word	0x0800651c
 80029d0:	080064f0 	.word	0x080064f0
 80029d4:	080023b1 	.word	0x080023b1
 80029d8:	f3af 8000 	nop.w
 80029dc:	f3af 8000 	nop.w

080029e0 <bmk2_execute.lto_priv.111>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 80029e0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <bmk2_execute.lto_priv.111+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80029e4:	4813      	ldr	r0, [pc, #76]	; (8002a34 <bmk2_execute.lto_priv.111+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <bmk2_execute.lto_priv.111+0x58>)
 80029ea:	6892      	ldr	r2, [r2, #8]
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 80029ec:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80029ee:	2100      	movs	r1, #0
 80029f0:	3201      	adds	r2, #1
 80029f2:	9100      	str	r1, [sp, #0]
 80029f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80029f8:	f7fe fb72 	bl	80010e0 <chThdCreateStatic>
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <bmk2_execute.lto_priv.111+0x5c>)
 80029fe:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8002a00:	f7ff ff66 	bl	80028d0 <msg_loop_test>
 8002a04:	4604      	mov	r4, r0
  test_wait_threads();
 8002a06:	f7fe ffb3 	bl	8001970 <test_wait_threads>
  test_print("--- Score : ");
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <bmk2_execute.lto_priv.111+0x60>)
 8002a0c:	f7fe f9b0 	bl	8000d70 <test_print>
  test_printn(n);
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7fe f9bd 	bl	8000d90 <test_printn>
  test_print(" msgs/S, ");
 8002a16:	480b      	ldr	r0, [pc, #44]	; (8002a44 <bmk2_execute.lto_priv.111+0x64>)
 8002a18:	f7fe f9aa 	bl	8000d70 <test_print>
  test_printn(n << 1);
 8002a1c:	0060      	lsls	r0, r4, #1
 8002a1e:	f7fe f9b7 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 8002a22:	4809      	ldr	r0, [pc, #36]	; (8002a48 <bmk2_execute.lto_priv.111+0x68>)
}
 8002a24:	b002      	add	sp, #8
 8002a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002a2a:	f7fe b981 	b.w	8000d30 <test_println>
 8002a2e:	bf00      	nop
 8002a30:	20000b78 	.word	0x20000b78
 8002a34:	20000d10 	.word	0x20000d10
 8002a38:	080028a1 	.word	0x080028a1
 8002a3c:	20000a40 	.word	0x20000a40
 8002a40:	08005dd0 	.word	0x08005dd0
 8002a44:	0800651c 	.word	0x0800651c
 8002a48:	080064f0 	.word	0x080064f0
 8002a4c:	f3af 8000 	nop.w

08002a50 <bmk1_execute.lto_priv.110>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8002a50:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <bmk1_execute.lto_priv.110+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <bmk1_execute.lto_priv.110+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <bmk1_execute.lto_priv.110+0x58>)
 8002a5a:	6892      	ldr	r2, [r2, #8]
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8002a5c:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8002a5e:	2100      	movs	r1, #0
 8002a60:	3a01      	subs	r2, #1
 8002a62:	9100      	str	r1, [sp, #0]
 8002a64:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a68:	f7fe fb3a 	bl	80010e0 <chThdCreateStatic>
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <bmk1_execute.lto_priv.110+0x5c>)
 8002a6e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8002a70:	f7ff ff2e 	bl	80028d0 <msg_loop_test>
 8002a74:	4604      	mov	r4, r0
  test_wait_threads();
 8002a76:	f7fe ff7b 	bl	8001970 <test_wait_threads>
  test_print("--- Score : ");
 8002a7a:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <bmk1_execute.lto_priv.110+0x60>)
 8002a7c:	f7fe f978 	bl	8000d70 <test_print>
  test_printn(n);
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7fe f985 	bl	8000d90 <test_printn>
  test_print(" msgs/S, ");
 8002a86:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <bmk1_execute.lto_priv.110+0x64>)
 8002a88:	f7fe f972 	bl	8000d70 <test_print>
  test_printn(n << 1);
 8002a8c:	0060      	lsls	r0, r4, #1
 8002a8e:	f7fe f97f 	bl	8000d90 <test_printn>
  test_println(" ctxswc/S");
 8002a92:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <bmk1_execute.lto_priv.110+0x68>)
}
 8002a94:	b002      	add	sp, #8
 8002a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002a9a:	f7fe b949 	b.w	8000d30 <test_println>
 8002a9e:	bf00      	nop
 8002aa0:	20000b78 	.word	0x20000b78
 8002aa4:	20000d10 	.word	0x20000d10
 8002aa8:	080028a1 	.word	0x080028a1
 8002aac:	20000a40 	.word	0x20000a40
 8002ab0:	08005dd0 	.word	0x08005dd0
 8002ab4:	0800651c 	.word	0x0800651c
 8002ab8:	080064f0 	.word	0x080064f0
 8002abc:	f3af 8000 	nop.w

08002ac0 <thread2.lto_priv.123>:
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8002ac0:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <thread2.lto_priv.123+0x14>)
 8002aca:	f7fe fc51 	bl	8001370 <chOQPutTimeout>
  return 0;
}
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd08      	pop	{r3, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000800 	.word	0x20000800
 8002ad8:	f3af 8000 	nop.w
 8002adc:	f3af 8000 	nop.w

08002ae0 <queues2_execute.lto_priv.109>:

static void queues2_execute(void) {
 8002ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8002aec:	4f8f      	ldr	r7, [pc, #572]	; (8002d2c <queues2_execute.lto_priv.109+0x24c>)
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d05d      	beq.n	8002bb2 <queues2_execute.lto_priv.109+0xd2>
 8002af6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7fe f8e9 	bl	8000cd0 <_test_assert>
 8002afe:	bbb8      	cbnz	r0, 8002b70 <queues2_execute.lto_priv.109+0x90>
 8002b00:	f380 8811 	msr	BASEPRI, r0
 8002b04:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8002b06:	4d89      	ldr	r5, [pc, #548]	; (8002d2c <queues2_execute.lto_priv.109+0x24c>)
 8002b08:	4621      	mov	r1, r4
 8002b0a:	3401      	adds	r4, #1
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b12:	b2e4      	uxtb	r4, r4
 8002b14:	f7fe fc2c 	bl	8001370 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8002b18:	2c45      	cmp	r4, #69	; 0x45
 8002b1a:	d1f4      	bne.n	8002b06 <queues2_execute.lto_priv.109+0x26>
 8002b1c:	2620      	movs	r6, #32
 8002b1e:	f386 8811 	msr	BASEPRI, r6
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8002b22:	2002      	movs	r0, #2
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002b24:	68a9      	ldr	r1, [r5, #8]
 8002b26:	fab1 f181 	clz	r1, r1
 8002b2a:	0949      	lsrs	r1, r1, #5
 8002b2c:	f7fe f8d0 	bl	8000cd0 <_test_assert>
 8002b30:	4680      	mov	r8, r0
 8002b32:	b9e8      	cbnz	r0, 8002b70 <queues2_execute.lto_priv.109+0x90>
 8002b34:	f380 8811 	msr	BASEPRI, r0
 8002b38:	2404      	movs	r4, #4
 8002b3a:	4682      	mov	sl, r0
 8002b3c:	f04f 0920 	mov.w	r9, #32
 8002b40:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8002b44:	4d79      	ldr	r5, [pc, #484]	; (8002d2c <queues2_execute.lto_priv.109+0x24c>)
 8002b46:	4628      	mov	r0, r5
 8002b48:	f7fe fd02 	bl	8001550 <chOQGetI>
 8002b4c:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    test_emit_token(c);
 8002b50:	b2c0      	uxtb	r0, r0
 8002b52:	f7fe f8d5 	bl	8000d00 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8002b56:	3c01      	subs	r4, #1
 8002b58:	d1f0      	bne.n	8002b3c <queues2_execute.lto_priv.109+0x5c>
 8002b5a:	f389 8811 	msr	BASEPRI, r9
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8002b5e:	696a      	ldr	r2, [r5, #20]
 8002b60:	69ab      	ldr	r3, [r5, #24]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d02a      	beq.n	8002bbc <queues2_execute.lto_priv.109+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8002b66:	4641      	mov	r1, r8
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f7fe f8b1 	bl	8000cd0 <_test_assert>
 8002b6e:	b128      	cbz	r0, 8002b7c <queues2_execute.lto_priv.109+0x9c>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8002b76:	b002      	add	sp, #8
 8002b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b7c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8002b80:	2004      	movs	r0, #4
 8002b82:	496b      	ldr	r1, [pc, #428]	; (8002d30 <queues2_execute.lto_priv.109+0x250>)
 8002b84:	f7fe f87c 	bl	8000c80 <_test_assert_sequence>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d1f3      	bne.n	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002b8e:	2620      	movs	r6, #32
 8002b90:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8002b94:	4d65      	ldr	r5, [pc, #404]	; (8002d2c <queues2_execute.lto_priv.109+0x24c>)
 8002b96:	4628      	mov	r0, r5
 8002b98:	f7fe fcda 	bl	8001550 <chOQGetI>
 8002b9c:	3003      	adds	r0, #3
 8002b9e:	bf14      	ite	ne
 8002ba0:	2100      	movne	r1, #0
 8002ba2:	2101      	moveq	r1, #1
 8002ba4:	2005      	movs	r0, #5
 8002ba6:	f7fe f893 	bl	8000cd0 <_test_assert>
 8002baa:	b170      	cbz	r0, 8002bca <queues2_execute.lto_priv.109+0xea>
 8002bac:	f384 8811 	msr	BASEPRI, r4
 8002bb0:	e7e1      	b.n	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	3100      	adds	r1, #0
 8002bb6:	bf18      	it	ne
 8002bb8:	2101      	movne	r1, #1
 8002bba:	e79d      	b.n	8002af8 <queues2_execute.lto_priv.109+0x18>
 8002bbc:	68ab      	ldr	r3, [r5, #8]
 8002bbe:	f113 0800 	adds.w	r8, r3, #0
 8002bc2:	bf18      	it	ne
 8002bc4:	f04f 0801 	movne.w	r8, #1
 8002bc8:	e7cd      	b.n	8002b66 <queues2_execute.lto_priv.109+0x86>
 8002bca:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8002bce:	4959      	ldr	r1, [pc, #356]	; (8002d34 <queues2_execute.lto_priv.109+0x254>)
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f7fe fb83 	bl	80012e0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8002bda:	f1a0 0104 	sub.w	r1, r0, #4
 8002bde:	2006      	movs	r0, #6
 8002be0:	fab1 f181 	clz	r1, r1
 8002be4:	0949      	lsrs	r1, r1, #5
 8002be6:	f7fe f873 	bl	8000cd0 <_test_assert>
 8002bea:	4604      	mov	r4, r0
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d1c2      	bne.n	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002bf0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8002bf4:	2007      	movs	r0, #7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002bf6:	68a9      	ldr	r1, [r5, #8]
 8002bf8:	fab1 f181 	clz	r1, r1
 8002bfc:	0949      	lsrs	r1, r1, #5
 8002bfe:	f7fe f867 	bl	8000cd0 <_test_assert>
 8002c02:	4680      	mov	r8, r0
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d1d1      	bne.n	8002bac <queues2_execute.lto_priv.109+0xcc>
 8002c08:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <queues2_execute.lto_priv.109+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002c0e:	484b      	ldr	r0, [pc, #300]	; (8002d3c <queues2_execute.lto_priv.109+0x25c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <queues2_execute.lto_priv.109+0x260>)
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	f8cd 8000 	str.w	r8, [sp]
 8002c1a:	3201      	adds	r2, #1
 8002c1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c20:	f7fe fa5e 	bl	80010e0 <chThdCreateStatic>
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <queues2_execute.lto_priv.109+0x264>)
 8002c26:	6018      	str	r0, [r3, #0]
 8002c28:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8002c2c:	68e9      	ldr	r1, [r5, #12]
 8002c2e:	692b      	ldr	r3, [r5, #16]
 8002c30:	68aa      	ldr	r2, [r5, #8]
 8002c32:	1a5b      	subs	r3, r3, r1
 8002c34:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8002c36:	f1a1 0104 	sub.w	r1, r1, #4
 8002c3a:	2008      	movs	r0, #8
 8002c3c:	fab1 f181 	clz	r1, r1
 8002c40:	0949      	lsrs	r1, r1, #5
 8002c42:	f7fe f845 	bl	8000cd0 <_test_assert>
 8002c46:	b110      	cbz	r0, 8002c4e <queues2_execute.lto_priv.109+0x16e>
 8002c48:	f388 8811 	msr	BASEPRI, r8
 8002c4c:	e793      	b.n	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002c4e:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8002c52:	f7fe fe8d 	bl	8001970 <test_wait_threads>
 8002c56:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8002c5a:	68e9      	ldr	r1, [r5, #12]
  oqp->q_counter = chQSizeI(oqp);
 8002c5c:	692a      	ldr	r2, [r5, #16]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002c5e:	682b      	ldr	r3, [r5, #0]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8002c60:	6169      	str	r1, [r5, #20]
  oqp->q_counter = chQSizeI(oqp);
 8002c62:	1a52      	subs	r2, r2, r1
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8002c64:	42ab      	cmp	r3, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8002c66:	61a9      	str	r1, [r5, #24]
  oqp->q_counter = chQSizeI(oqp);
 8002c68:	60aa      	str	r2, [r5, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002c6a:	bf18      	it	ne
 8002c6c:	f06f 0401 	mvnne.w	r4, #1
 8002c70:	d009      	beq.n	8002c86 <queues2_execute.lto_priv.109+0x1a6>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	603a      	str	r2, [r7, #0]
 8002c76:	6057      	str	r7, [r2, #4]
  chSchReadyI(tp);
 8002c78:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002c7a:	621c      	str	r4, [r3, #32]
  chSchReadyI(tp);
 8002c7c:	f7fe fc28 	bl	80014d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	42bb      	cmp	r3, r7
 8002c84:	d1f5      	bne.n	8002c72 <queues2_execute.lto_priv.109+0x192>
 8002c86:	2500      	movs	r5, #0
 8002c88:	f385 8811 	msr	BASEPRI, r5
 8002c8c:	2620      	movs	r6, #32
 8002c8e:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8002c92:	f107 0108 	add.w	r1, r7, #8
 8002c96:	c90e      	ldmia	r1, {r1, r2, r3}
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	1a59      	subs	r1, r3, r1
 8002c9c:	2009      	movs	r0, #9
 8002c9e:	fab1 f181 	clz	r1, r1
 8002ca2:	0949      	lsrs	r1, r1, #5
 8002ca4:	f7fe f814 	bl	8000cd0 <_test_assert>
 8002ca8:	4c20      	ldr	r4, [pc, #128]	; (8002d2c <queues2_execute.lto_priv.109+0x24c>)
 8002caa:	4603      	mov	r3, r0
 8002cac:	b110      	cbz	r0, 8002cb4 <queues2_execute.lto_priv.109+0x1d4>
 8002cae:	f385 8811 	msr	BASEPRI, r5
 8002cb2:	e760      	b.n	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002cb4:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002cb8:	491e      	ldr	r1, [pc, #120]	; (8002d34 <queues2_execute.lto_priv.109+0x254>)
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7fe fb0f 	bl	80012e0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002cc2:	3802      	subs	r0, #2
 8002cc4:	4241      	negs	r1, r0
 8002cc6:	4141      	adcs	r1, r0
 8002cc8:	200a      	movs	r0, #10
 8002cca:	f7fe f801 	bl	8000cd0 <_test_assert>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	f47f af50 	bne.w	8002b76 <queues2_execute.lto_priv.109+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002cd6:	4917      	ldr	r1, [pc, #92]	; (8002d34 <queues2_execute.lto_priv.109+0x254>)
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fe fb00 	bl	80012e0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002ce0:	1e82      	subs	r2, r0, #2
 8002ce2:	4251      	negs	r1, r2
 8002ce4:	4151      	adcs	r1, r2
 8002ce6:	200b      	movs	r0, #11
 8002ce8:	f7fd fff2 	bl	8000cd0 <_test_assert>
 8002cec:	4605      	mov	r5, r0
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	f47f af41 	bne.w	8002b76 <queues2_execute.lto_priv.109+0x96>
 8002cf4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8002cf8:	200c      	movs	r0, #12
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002cfa:	68a1      	ldr	r1, [r4, #8]
 8002cfc:	fab1 f181 	clz	r1, r1
 8002d00:	0949      	lsrs	r1, r1, #5
 8002d02:	f7fd ffe5 	bl	8000cd0 <_test_assert>
 8002d06:	4601      	mov	r1, r0
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d1d0      	bne.n	8002cae <queues2_execute.lto_priv.109+0x1ce>
 8002d0c:	f380 8811 	msr	BASEPRI, r0

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8002d10:	220a      	movs	r2, #10
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7fe fb2c 	bl	8001370 <chOQPutTimeout>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	4259      	negs	r1, r3
 8002d1c:	4159      	adcs	r1, r3
 8002d1e:	200d      	movs	r0, #13
}
 8002d20:	b002      	add	sp, #8
 8002d22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8002d26:	f7fd bfd3 	b.w	8000cd0 <_test_assert>
 8002d2a:	bf00      	nop
 8002d2c:	20000800 	.word	0x20000800
 8002d30:	08006528 	.word	0x08006528
 8002d34:	20000e58 	.word	0x20000e58
 8002d38:	20000b78 	.word	0x20000b78
 8002d3c:	20000d10 	.word	0x20000d10
 8002d40:	08002ac1 	.word	0x08002ac1
 8002d44:	20000a40 	.word	0x20000a40
 8002d48:	f3af 8000 	nop.w
 8002d4c:	f3af 8000 	nop.w

08002d50 <thread1.lto_priv.121>:
static void queues1_setup(void) {

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread1(void *p) {
 8002d50:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8002d52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002d56:	4802      	ldr	r0, [pc, #8]	; (8002d60 <thread1.lto_priv.121+0x10>)
 8002d58:	f7fe fb72 	bl	8001440 <chIQGetTimeout>
  return 0;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	bd08      	pop	{r3, pc}
 8002d60:	20000824 	.word	0x20000824
 8002d64:	f3af 8000 	nop.w
 8002d68:	f3af 8000 	nop.w
 8002d6c:	f3af 8000 	nop.w

08002d70 <queues1_execute.lto_priv.107>:

static void queues1_execute(void) {
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d74:	2420      	movs	r4, #32
 8002d76:	b082      	sub	sp, #8
 8002d78:	f384 8811 	msr	BASEPRI, r4
 8002d7c:	4f98      	ldr	r7, [pc, #608]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8002d7e:	2001      	movs	r0, #1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	fab1 f181 	clz	r1, r1
 8002d86:	0949      	lsrs	r1, r1, #5
 8002d88:	f7fd ffa2 	bl	8000cd0 <_test_assert>
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	b9e8      	cbnz	r0, 8002dcc <queues1_execute.lto_priv.107+0x5c>
 8002d90:	f380 8811 	msr	BASEPRI, r0
 8002d94:	f384 8811 	msr	BASEPRI, r4
 8002d98:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002d9a:	4d91      	ldr	r5, [pc, #580]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	3401      	adds	r4, #1
 8002da0:	4628      	mov	r0, r5
 8002da2:	b2e4      	uxtb	r4, r4
 8002da4:	f7fe fbac 	bl	8001500 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8002da8:	2c45      	cmp	r4, #69	; 0x45
 8002daa:	d1f6      	bne.n	8002d9a <queues1_execute.lto_priv.107+0x2a>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	2320      	movs	r3, #32
 8002db4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8002db8:	69aa      	ldr	r2, [r5, #24]
 8002dba:	696b      	ldr	r3, [r5, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d03a      	beq.n	8002e36 <queues1_execute.lto_priv.107+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8002dc0:	4631      	mov	r1, r6
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f7fd ff84 	bl	8000cd0 <_test_assert>
 8002dc8:	4604      	mov	r4, r0
 8002dca:	b128      	cbz	r0, 8002dd8 <queues1_execute.lto_priv.107+0x68>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dd8:	f380 8811 	msr	BASEPRI, r0
 8002ddc:	2320      	movs	r3, #32
 8002dde:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8002de2:	487f      	ldr	r0, [pc, #508]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002de4:	4621      	mov	r1, r4
 8002de6:	f7fe fb8b 	bl	8001500 <chIQPutI>
 8002dea:	3004      	adds	r0, #4
 8002dec:	bf14      	ite	ne
 8002dee:	2100      	movne	r1, #0
 8002df0:	2101      	moveq	r1, #1
 8002df2:	2003      	movs	r0, #3
 8002df4:	f7fd ff6c 	bl	8000cd0 <_test_assert>
 8002df8:	b9c0      	cbnz	r0, 8002e2c <queues1_execute.lto_priv.107+0xbc>
 8002dfa:	f380 8811 	msr	BASEPRI, r0
 8002dfe:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002e00:	4d77      	ldr	r5, [pc, #476]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fe fb1a 	bl	8001440 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8002e0c:	b2c0      	uxtb	r0, r0
 8002e0e:	f7fd ff77 	bl	8000d00 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8002e12:	3c01      	subs	r4, #1
 8002e14:	d1f4      	bne.n	8002e00 <queues1_execute.lto_priv.107+0x90>
 8002e16:	2620      	movs	r6, #32
 8002e18:	f386 8811 	msr	BASEPRI, r6
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8002e1c:	2004      	movs	r0, #4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002e1e:	68a9      	ldr	r1, [r5, #8]
 8002e20:	fab1 f181 	clz	r1, r1
 8002e24:	0949      	lsrs	r1, r1, #5
 8002e26:	f7fd ff53 	bl	8000cd0 <_test_assert>
 8002e2a:	b148      	cbz	r0, 8002e40 <queues1_execute.lto_priv.107+0xd0>
 8002e2c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8002e30:	b002      	add	sp, #8
 8002e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8002e36:	68ae      	ldr	r6, [r5, #8]
 8002e38:	3600      	adds	r6, #0
 8002e3a:	bf18      	it	ne
 8002e3c:	2601      	movne	r6, #1
 8002e3e:	e7bf      	b.n	8002dc0 <queues1_execute.lto_priv.107+0x50>
 8002e40:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8002e44:	2005      	movs	r0, #5
 8002e46:	4967      	ldr	r1, [pc, #412]	; (8002fe4 <queues1_execute.lto_priv.107+0x274>)
 8002e48:	f7fd ff1a 	bl	8000c80 <_test_assert_sequence>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d1c0      	bne.n	8002dd2 <queues1_execute.lto_priv.107+0x62>
 8002e50:	f386 8811 	msr	BASEPRI, r6
 8002e54:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002e56:	4d62      	ldr	r5, [pc, #392]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002e58:	4621      	mov	r1, r4
 8002e5a:	3401      	adds	r4, #1
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	b2e4      	uxtb	r4, r4
 8002e60:	f7fe fb4e 	bl	8001500 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8002e64:	2c45      	cmp	r4, #69	; 0x45
 8002e66:	d1f6      	bne.n	8002e56 <queues1_execute.lto_priv.107+0xe6>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8002e6e:	495e      	ldr	r1, [pc, #376]	; (8002fe8 <queues1_execute.lto_priv.107+0x278>)
 8002e70:	2208      	movs	r2, #8
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7fe faa4 	bl	80013c0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8002e78:	f1a0 0104 	sub.w	r1, r0, #4
 8002e7c:	2006      	movs	r0, #6
 8002e7e:	fab1 f181 	clz	r1, r1
 8002e82:	0949      	lsrs	r1, r1, #5
 8002e84:	f7fd ff24 	bl	8000cd0 <_test_assert>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d1a1      	bne.n	8002dd2 <queues1_execute.lto_priv.107+0x62>
 8002e8e:	2620      	movs	r6, #32
 8002e90:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8002e94:	2007      	movs	r0, #7
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002e96:	68a9      	ldr	r1, [r5, #8]
 8002e98:	fab1 f181 	clz	r1, r1
 8002e9c:	0949      	lsrs	r1, r1, #5
 8002e9e:	f7fd ff17 	bl	8000cd0 <_test_assert>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d1c2      	bne.n	8002e2c <queues1_execute.lto_priv.107+0xbc>
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	f386 8811 	msr	BASEPRI, r6
 8002eae:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002eb0:	4d4b      	ldr	r5, [pc, #300]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	3401      	adds	r4, #1
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	b2e4      	uxtb	r4, r4
 8002eba:	f7fe fb21 	bl	8001500 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8002ebe:	2c45      	cmp	r4, #69	; 0x45
 8002ec0:	d1f6      	bne.n	8002eb0 <queues1_execute.lto_priv.107+0x140>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002ec8:	4947      	ldr	r1, [pc, #284]	; (8002fe8 <queues1_execute.lto_priv.107+0x278>)
 8002eca:	4628      	mov	r0, r5
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f7fe fa77 	bl	80013c0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002ed2:	f1a0 0102 	sub.w	r1, r0, #2
 8002ed6:	2008      	movs	r0, #8
 8002ed8:	fab1 f181 	clz	r1, r1
 8002edc:	0949      	lsrs	r1, r1, #5
 8002ede:	f7fd fef7 	bl	8000cd0 <_test_assert>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	f47f af75 	bne.w	8002dd2 <queues1_execute.lto_priv.107+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002ee8:	4603      	mov	r3, r0
 8002eea:	493f      	ldr	r1, [pc, #252]	; (8002fe8 <queues1_execute.lto_priv.107+0x278>)
 8002eec:	2202      	movs	r2, #2
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f7fe fa66 	bl	80013c0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002ef4:	f1a0 0102 	sub.w	r1, r0, #2
 8002ef8:	2009      	movs	r0, #9
 8002efa:	fab1 f181 	clz	r1, r1
 8002efe:	0949      	lsrs	r1, r1, #5
 8002f00:	f7fd fee6 	bl	8000cd0 <_test_assert>
 8002f04:	4680      	mov	r8, r0
 8002f06:	2800      	cmp	r0, #0
 8002f08:	f47f af63 	bne.w	8002dd2 <queues1_execute.lto_priv.107+0x62>
 8002f0c:	2620      	movs	r6, #32
 8002f0e:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8002f12:	200a      	movs	r0, #10
 8002f14:	68a9      	ldr	r1, [r5, #8]
 8002f16:	fab1 f181 	clz	r1, r1
 8002f1a:	0949      	lsrs	r1, r1, #5
 8002f1c:	f7fd fed8 	bl	8000cd0 <_test_assert>
 8002f20:	4604      	mov	r4, r0
 8002f22:	b110      	cbz	r0, 8002f2a <queues1_execute.lto_priv.107+0x1ba>
 8002f24:	f388 8811 	msr	BASEPRI, r8
 8002f28:	e753      	b.n	8002dd2 <queues1_execute.lto_priv.107+0x62>
 8002f2a:	f380 8811 	msr	BASEPRI, r0
 8002f2e:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8002f32:	4621      	mov	r1, r4
 8002f34:	4628      	mov	r0, r5
 8002f36:	f7fe fae3 	bl	8001500 <chIQPutI>
 8002f3a:	682b      	ldr	r3, [r5, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8002f3c:	68ea      	ldr	r2, [r5, #12]
  iqp->q_counter = 0;
 8002f3e:	60ac      	str	r4, [r5, #8]
 8002f40:	42ab      	cmp	r3, r5
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8002f42:	616a      	str	r2, [r5, #20]
 8002f44:	61aa      	str	r2, [r5, #24]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002f46:	bf18      	it	ne
 8002f48:	f06f 0401 	mvnne.w	r4, #1
 8002f4c:	d009      	beq.n	8002f62 <queues1_execute.lto_priv.107+0x1f2>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	603a      	str	r2, [r7, #0]
 8002f52:	6057      	str	r7, [r2, #4]
  chSchReadyI(tp);
 8002f54:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002f56:	621c      	str	r4, [r3, #32]
  chSchReadyI(tp);
 8002f58:	f7fe faba 	bl	80014d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	42bb      	cmp	r3, r7
 8002f60:	d1f5      	bne.n	8002f4e <queues1_execute.lto_priv.107+0x1de>
 8002f62:	f04f 0800 	mov.w	r8, #0
 8002f66:	f388 8811 	msr	BASEPRI, r8
 8002f6a:	2620      	movs	r6, #32
 8002f6c:	f386 8811 	msr	BASEPRI, r6
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8002f70:	200b      	movs	r0, #11
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	fab1 f181 	clz	r1, r1
 8002f78:	0949      	lsrs	r1, r1, #5
 8002f7a:	f7fd fea9 	bl	8000cd0 <_test_assert>
 8002f7e:	4d18      	ldr	r5, [pc, #96]	; (8002fe0 <queues1_execute.lto_priv.107+0x270>)
 8002f80:	4604      	mov	r4, r0
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1ce      	bne.n	8002f24 <queues1_execute.lto_priv.107+0x1b4>
 8002f86:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <queues1_execute.lto_priv.107+0x27c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8002f8c:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <queues1_execute.lto_priv.107+0x280>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <queues1_execute.lto_priv.107+0x284>)
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	9400      	str	r4, [sp, #0]
 8002f96:	3201      	adds	r2, #1
 8002f98:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f9c:	f7fe f8a0 	bl	80010e0 <chThdCreateStatic>
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <queues1_execute.lto_priv.107+0x288>)
 8002fa2:	6018      	str	r0, [r3, #0]
 8002fa4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8002fa8:	200c      	movs	r0, #12
 8002faa:	68a9      	ldr	r1, [r5, #8]
 8002fac:	fab1 f181 	clz	r1, r1
 8002fb0:	0949      	lsrs	r1, r1, #5
 8002fb2:	f7fd fe8d 	bl	8000cd0 <_test_assert>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	f47f af38 	bne.w	8002e2c <queues1_execute.lto_priv.107+0xbc>
 8002fbc:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8002fc0:	f7fe fcd6 	bl	8001970 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	210a      	movs	r1, #10
 8002fc8:	f7fe fa3a 	bl	8001440 <chIQGetTimeout>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	4259      	negs	r1, r3
 8002fd0:	4159      	adcs	r1, r3
 8002fd2:	200d      	movs	r0, #13
}
 8002fd4:	b002      	add	sp, #8
 8002fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8002fda:	f7fd be79 	b.w	8000cd0 <_test_assert>
 8002fde:	bf00      	nop
 8002fe0:	20000824 	.word	0x20000824
 8002fe4:	08006528 	.word	0x08006528
 8002fe8:	20000e58 	.word	0x20000e58
 8002fec:	20000b78 	.word	0x20000b78
 8002ff0:	20000d10 	.word	0x20000d10
 8002ff4:	08002d51 	.word	0x08002d51
 8002ff8:	20000a40 	.word	0x20000a40
 8002ffc:	f3af 8000 	nop.w

08003000 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8003000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003004:	4680      	mov	r8, r0
 8003006:	2520      	movs	r5, #32
 8003008:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800300c:	4e10      	ldr	r6, [pc, #64]	; (8003050 <regfind+0x50>)
 800300e:	6930      	ldr	r0, [r6, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8003010:	7f83      	ldrb	r3, [r0, #30]
 8003012:	3301      	adds	r3, #1
 8003014:	7783      	strb	r3, [r0, #30]
 8003016:	f04f 0900 	mov.w	r9, #0
 800301a:	f389 8811 	msr	BASEPRI, r9
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist) {
    ntp = NULL;
 800301e:	464f      	mov	r7, r9
 8003020:	e000      	b.n	8003024 <regfind+0x24>

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8003022:	4620      	mov	r0, r4
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8003024:	4540      	cmp	r0, r8
 8003026:	bf08      	it	eq
 8003028:	f049 0901 	orreq.w	r9, r9, #1
 800302c:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8003030:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8003032:	42b4      	cmp	r4, r6
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8003034:	bf1d      	ittte	ne
 8003036:	7fa3      	ldrbne	r3, [r4, #30]
 8003038:	3301      	addne	r3, #1
 800303a:	77a3      	strbne	r3, [r4, #30]
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist) {
    ntp = NULL;
 800303c:	2400      	moveq	r4, #0
 800303e:	f387 8811 	msr	BASEPRI, r7
    ntp->p_refs++;
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8003042:	f7fe fc45 	bl	80018d0 <chThdRelease>
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8003046:	2c00      	cmp	r4, #0
 8003048:	d1eb      	bne.n	8003022 <regfind+0x22>
  return found;
}
 800304a:	4648      	mov	r0, r9
 800304c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003050:	20000b78 	.word	0x20000b78
 8003054:	f3af 8000 	nop.w
 8003058:	f3af 8000 	nop.w
 800305c:	f3af 8000 	nop.w

08003060 <dyn3_execute.lto_priv.105>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003060:	4b46      	ldr	r3, [pc, #280]	; (800317c <dyn3_execute.lto_priv.105+0x11c>)
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8003062:	4947      	ldr	r1, [pc, #284]	; (8003180 <dyn3_execute.lto_priv.105+0x120>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	6898      	ldr	r0, [r3, #8]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8003068:	b510      	push	{r4, lr}
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800306a:	3801      	subs	r0, #1
 800306c:	f002 fa08 	bl	8005480 <chThdCreateFromHeap.constprop.51>
 8003070:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8003072:	2001      	movs	r0, #1
 8003074:	7fa1      	ldrb	r1, [r4, #30]
 8003076:	1a09      	subs	r1, r1, r0
 8003078:	fab1 f181 	clz	r1, r1
 800307c:	0949      	lsrs	r1, r1, #5
 800307e:	f7fd fe27 	bl	8000cd0 <_test_assert>
 8003082:	b100      	cbz	r0, 8003086 <dyn3_execute.lto_priv.105+0x26>
 8003084:	bd10      	pop	{r4, pc}
 8003086:	2320      	movs	r3, #32
 8003088:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 800308c:	7fa3      	ldrb	r3, [r4, #30]
 800308e:	3301      	adds	r3, #1
 8003090:	77a3      	strb	r3, [r4, #30]
 8003092:	f380 8811 	msr	BASEPRI, r0
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8003096:	7fa1      	ldrb	r1, [r4, #30]
 8003098:	2002      	movs	r0, #2
 800309a:	1a09      	subs	r1, r1, r0
 800309c:	fab1 f181 	clz	r1, r1
 80030a0:	0949      	lsrs	r1, r1, #5
 80030a2:	f7fd fe15 	bl	8000cd0 <_test_assert>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d1ec      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  chThdRelease(tp);
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7fe fc10 	bl	80018d0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 80030b0:	7fa1      	ldrb	r1, [r4, #30]
 80030b2:	2003      	movs	r0, #3
 80030b4:	f1a1 0101 	sub.w	r1, r1, #1
 80030b8:	fab1 f181 	clz	r1, r1
 80030bc:	0949      	lsrs	r1, r1, #5
 80030be:	f7fd fe07 	bl	8000cd0 <_test_assert>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d1de      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff ff9a 	bl	8003000 <regfind>
 80030cc:	4601      	mov	r1, r0
 80030ce:	2004      	movs	r0, #4
 80030d0:	f7fd fdfe 	bl	8000cd0 <_test_assert>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d1d5      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  test_assert(5, regfind(tp), "thread disappeared");
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff ff91 	bl	8003000 <regfind>
 80030de:	4601      	mov	r1, r0
 80030e0:	2005      	movs	r0, #5
 80030e2:	f7fd fdf5 	bl	8000cd0 <_test_assert>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d1cc      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7fe fbf0 	bl	80018d0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 80030f0:	7fa1      	ldrb	r1, [r4, #30]
 80030f2:	fab1 f181 	clz	r1, r1
 80030f6:	2006      	movs	r0, #6
 80030f8:	0949      	lsrs	r1, r1, #5
 80030fa:	f7fd fde9 	bl	8000cd0 <_test_assert>
 80030fe:	2800      	cmp	r0, #0
 8003100:	d1c0      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8003102:	7f21      	ldrb	r1, [r4, #28]
 8003104:	fab1 f181 	clz	r1, r1
 8003108:	2007      	movs	r0, #7
 800310a:	0949      	lsrs	r1, r1, #5
 800310c:	f7fd fde0 	bl	8000cd0 <_test_assert>
 8003110:	2800      	cmp	r0, #0
 8003112:	d1b7      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  test_assert(8, regfind(tp), "thread disappeared");
 8003114:	4620      	mov	r0, r4
 8003116:	f7ff ff73 	bl	8003000 <regfind>
 800311a:	4601      	mov	r1, r0
 800311c:	2008      	movs	r0, #8
 800311e:	f7fd fdd7 	bl	8000cd0 <_test_assert>
 8003122:	2800      	cmp	r0, #0
 8003124:	d1ae      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  test_assert(9, regfind(tp), "thread disappeared");
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff ff6a 	bl	8003000 <regfind>
 800312c:	4601      	mov	r1, r0
 800312e:	2009      	movs	r0, #9
 8003130:	f7fd fdce 	bl	8000cd0 <_test_assert>
 8003134:	2800      	cmp	r0, #0
 8003136:	d1a5      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8003138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800313c:	f7fe f9a8 	bl	8001490 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8003140:	7f21      	ldrb	r1, [r4, #28]
 8003142:	f1a1 030f 	sub.w	r3, r1, #15
 8003146:	4259      	negs	r1, r3
 8003148:	4159      	adcs	r1, r3
 800314a:	200a      	movs	r0, #10
 800314c:	f7fd fdc0 	bl	8000cd0 <_test_assert>
 8003150:	2800      	cmp	r0, #0
 8003152:	d197      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff ff53 	bl	8003000 <regfind>
 800315a:	4601      	mov	r1, r0
 800315c:	200b      	movs	r0, #11
 800315e:	f7fd fdb7 	bl	8000cd0 <_test_assert>
 8003162:	2800      	cmp	r0, #0
 8003164:	d18e      	bne.n	8003084 <dyn3_execute.lto_priv.105+0x24>
  test_assert(12, !regfind(tp), "thread still in registry");
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff ff4a 	bl	8003000 <regfind>
 800316c:	f080 0101 	eor.w	r1, r0, #1
 8003170:	b2c9      	uxtb	r1, r1
 8003172:	200c      	movs	r0, #12
}
 8003174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8003178:	f7fd bdaa 	b.w	8000cd0 <_test_assert>
 800317c:	20000b78 	.word	0x20000b78
 8003180:	08005930 	.word	0x08005930
 8003184:	f3af 8000 	nop.w
 8003188:	f3af 8000 	nop.w
 800318c:	f3af 8000 	nop.w

08003190 <dyn2_setup.lto_priv.102>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <dyn2_setup.lto_priv.102+0x10>)
 8003192:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8003194:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003198:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800319a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	4770      	bx	lr
 80031a0:	20000cc8 	.word	0x20000cc8
 80031a4:	f3af 8000 	nop.w
 80031a8:	f3af 8000 	nop.w
 80031ac:	f3af 8000 	nop.w

080031b0 <dyn1_setup.lto_priv.100>:
  heapp->h_free.h.u.next = hp = buf;
 80031b0:	4909      	ldr	r1, [pc, #36]	; (80031d8 <dyn1_setup.lto_priv.100+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <dyn1_setup.lto_priv.100+0x2c>)
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 80031b4:	b410      	push	{r4}
 80031b6:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80031b8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 80031bc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80031c0:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 80031c4:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	6158      	str	r0, [r3, #20]
 80031ca:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80031d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000d10 	.word	0x20000d10
 80031dc:	20000cd8 	.word	0x20000cd8

080031e0 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 80031e0:	2000      	movs	r0, #0
 80031e2:	4770      	bx	lr
 80031e4:	f3af 8000 	nop.w
 80031e8:	f3af 8000 	nop.w
 80031ec:	f3af 8000 	nop.w

080031f0 <pools1_setup.lto_priv.98>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <pools1_setup.lto_priv.98+0x10>)
 80031f2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80031f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80031f8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80031fa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	4770      	bx	lr
 8003200:	2000084c 	.word	0x2000084c
 8003204:	f3af 8000 	nop.w
 8003208:	f3af 8000 	nop.w
 800320c:	f3af 8000 	nop.w

08003210 <heap1_setup.lto_priv.96>:
  heapp->h_free.h.u.next = hp = buf;
 8003210:	4909      	ldr	r1, [pc, #36]	; (8003238 <heap1_setup.lto_priv.96+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <heap1_setup.lto_priv.96+0x2c>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8003214:	b410      	push	{r4}
 8003216:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8003218:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 800321c:	e881 0014 	stmia.w	r1, {r2, r4}
 8003220:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8003224:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	6158      	str	r0, [r3, #20]
 800322a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8003230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000d10 	.word	0x20000d10
 800323c:	20000b50 	.word	0x20000b50

08003240 <pools1_execute.lto_priv.99>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <pools1_execute.lto_priv.99+0xc0>)
 8003244:	4c2f      	ldr	r4, [pc, #188]	; (8003304 <pools1_execute.lto_priv.99+0xc4>)
 8003246:	2205      	movs	r2, #5
 8003248:	2520      	movs	r5, #32
 800324a:	2000      	movs	r0, #0
 800324c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8003250:	6821      	ldr	r1, [r4, #0]
 8003252:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	f380 8811 	msr	BASEPRI, r0

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800325a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 800325c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800325e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 8003260:	d1f4      	bne.n	800324c <pools1_execute.lto_priv.99+0xc>
 8003262:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8003264:	4827      	ldr	r0, [pc, #156]	; (8003304 <pools1_execute.lto_priv.99+0xc4>)
 8003266:	f7fd fdc3 	bl	8000df0 <chPoolAlloc>
 800326a:	1c01      	adds	r1, r0, #0
 800326c:	bf18      	it	ne
 800326e:	2101      	movne	r1, #1
 8003270:	2001      	movs	r0, #1
 8003272:	f7fd fd2d 	bl	8000cd0 <_test_assert>
 8003276:	bb90      	cbnz	r0, 80032de <pools1_execute.lto_priv.99+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8003278:	3d01      	subs	r5, #1
 800327a:	d1f3      	bne.n	8003264 <pools1_execute.lto_priv.99+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 800327c:	4821      	ldr	r0, [pc, #132]	; (8003304 <pools1_execute.lto_priv.99+0xc4>)
 800327e:	f7fd fdb7 	bl	8000df0 <chPoolAlloc>
 8003282:	fab0 f180 	clz	r1, r0
 8003286:	2002      	movs	r0, #2
 8003288:	0949      	lsrs	r1, r1, #5
 800328a:	f7fd fd21 	bl	8000cd0 <_test_assert>
 800328e:	bb30      	cbnz	r0, 80032de <pools1_execute.lto_priv.99+0x9e>
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <pools1_execute.lto_priv.99+0xc8>)
 8003292:	2020      	movs	r0, #32
 8003294:	f103 0614 	add.w	r6, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8003298:	f853 2b04 	ldr.w	r2, [r3], #4
 800329c:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80032a0:	6821      	ldr	r1, [r4, #0]
 80032a2:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 80032a4:	6022      	str	r2, [r4, #0]
 80032a6:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 80032aa:	42b3      	cmp	r3, r6
 80032ac:	d1f4      	bne.n	8003298 <pools1_execute.lto_priv.99+0x58>
 80032ae:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 80032b0:	4d14      	ldr	r5, [pc, #80]	; (8003304 <pools1_execute.lto_priv.99+0xc4>)
 80032b2:	4628      	mov	r0, r5
 80032b4:	f7fd fd9c 	bl	8000df0 <chPoolAlloc>
 80032b8:	1c01      	adds	r1, r0, #0
 80032ba:	bf18      	it	ne
 80032bc:	2101      	movne	r1, #1
 80032be:	2003      	movs	r0, #3
 80032c0:	f7fd fd06 	bl	8000cd0 <_test_assert>
 80032c4:	b958      	cbnz	r0, 80032de <pools1_execute.lto_priv.99+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 80032c6:	3c01      	subs	r4, #1
 80032c8:	d1f2      	bne.n	80032b0 <pools1_execute.lto_priv.99+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 80032ca:	4628      	mov	r0, r5
 80032cc:	f7fd fd90 	bl	8000df0 <chPoolAlloc>
 80032d0:	fab0 f180 	clz	r1, r0
 80032d4:	2004      	movs	r0, #4
 80032d6:	0949      	lsrs	r1, r1, #5
 80032d8:	f7fd fcfa 	bl	8000cd0 <_test_assert>
 80032dc:	b100      	cbz	r0, 80032e0 <pools1_execute.lto_priv.99+0xa0>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80032e0:	2210      	movs	r2, #16
  mp->mp_provider = provider;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <pools1_execute.lto_priv.99+0xcc>)
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80032e4:	602c      	str	r4, [r5, #0]

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80032e6:	4628      	mov	r0, r5
  mp->mp_object_size = size;
 80032e8:	606a      	str	r2, [r5, #4]
  mp->mp_provider = provider;
 80032ea:	60ab      	str	r3, [r5, #8]
 80032ec:	f7fd fd80 	bl	8000df0 <chPoolAlloc>
}
 80032f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80032f4:	fab0 f180 	clz	r1, r0
 80032f8:	2005      	movs	r0, #5
 80032fa:	0949      	lsrs	r1, r1, #5
 80032fc:	f7fd bce8 	b.w	8000cd0 <_test_assert>
 8003300:	20000d10 	.word	0x20000d10
 8003304:	2000084c 	.word	0x2000084c
 8003308:	080064d0 	.word	0x080064d0
 800330c:	080031e1 	.word	0x080031e1

08003310 <dyn2_execute.lto_priv.103>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003310:	4a2f      	ldr	r2, [pc, #188]	; (80033d0 <dyn2_execute.lto_priv.103+0xc0>)
 8003312:	4930      	ldr	r1, [pc, #192]	; (80033d4 <dyn2_execute.lto_priv.103+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003314:	6992      	ldr	r2, [r2, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <dyn2_execute.lto_priv.103+0xc8>)
 800331a:	6895      	ldr	r5, [r2, #8]
 800331c:	f103 0710 	add.w	r7, r3, #16
 8003320:	2620      	movs	r6, #32
 8003322:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8003324:	f853 2b04 	ldr.w	r2, [r3], #4
 8003328:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800332c:	6808      	ldr	r0, [r1, #0]
 800332e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8003330:	600a      	str	r2, [r1, #0]
 8003332:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8003336:	42bb      	cmp	r3, r7
 8003338:	d1f4      	bne.n	8003324 <dyn2_execute.lto_priv.103+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 800333a:	4928      	ldr	r1, [pc, #160]	; (80033dc <dyn2_execute.lto_priv.103+0xcc>)
 800333c:	4c28      	ldr	r4, [pc, #160]	; (80033e0 <dyn2_execute.lto_priv.103+0xd0>)
 800333e:	1e68      	subs	r0, r5, #1
 8003340:	f002 f8ee 	bl	8005520 <chThdCreateFromMemoryPool.constprop.50>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8003344:	4927      	ldr	r1, [pc, #156]	; (80033e4 <dyn2_execute.lto_priv.103+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8003346:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8003348:	1ea8      	subs	r0, r5, #2
 800334a:	f002 f8e9 	bl	8005520 <chThdCreateFromMemoryPool.constprop.50>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <dyn2_execute.lto_priv.103+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8003350:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8003352:	1ee8      	subs	r0, r5, #3
 8003354:	f002 f8e4 	bl	8005520 <chThdCreateFromMemoryPool.constprop.50>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8003358:	4924      	ldr	r1, [pc, #144]	; (80033ec <dyn2_execute.lto_priv.103+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800335a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800335c:	1f28      	subs	r0, r5, #4
 800335e:	f002 f8df 	bl	8005520 <chThdCreateFromMemoryPool.constprop.50>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8003362:	4923      	ldr	r1, [pc, #140]	; (80033f0 <dyn2_execute.lto_priv.103+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8003364:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8003366:	1f68      	subs	r0, r5, #5
 8003368:	f002 f8da 	bl	8005520 <chThdCreateFromMemoryPool.constprop.50>

  test_assert(1, (threads[0] != NULL) &&
 800336c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800336e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8003370:	b141      	cbz	r1, 8003384 <dyn2_execute.lto_priv.103+0x74>
 8003372:	6861      	ldr	r1, [r4, #4]
 8003374:	b131      	cbz	r1, 8003384 <dyn2_execute.lto_priv.103+0x74>
 8003376:	68a1      	ldr	r1, [r4, #8]
 8003378:	b121      	cbz	r1, 8003384 <dyn2_execute.lto_priv.103+0x74>
 800337a:	68e1      	ldr	r1, [r4, #12]
 800337c:	b111      	cbz	r1, 8003384 <dyn2_execute.lto_priv.103+0x74>
 800337e:	fab0 f180 	clz	r1, r0
 8003382:	0949      	lsrs	r1, r1, #5
 8003384:	2001      	movs	r0, #1
 8003386:	f7fd fca3 	bl	8000cd0 <_test_assert>
 800338a:	b100      	cbz	r0, 800338e <dyn2_execute.lto_priv.103+0x7e>
 800338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 800338e:	f7fe faef 	bl	8001970 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8003392:	2002      	movs	r0, #2
 8003394:	4917      	ldr	r1, [pc, #92]	; (80033f4 <dyn2_execute.lto_priv.103+0xe4>)
 8003396:	f7fd fc73 	bl	8000c80 <_test_assert_sequence>
 800339a:	2800      	cmp	r0, #0
 800339c:	d1f6      	bne.n	800338c <dyn2_execute.lto_priv.103+0x7c>
 800339e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 80033a0:	480c      	ldr	r0, [pc, #48]	; (80033d4 <dyn2_execute.lto_priv.103+0xc4>)
 80033a2:	f7fd fd25 	bl	8000df0 <chPoolAlloc>
 80033a6:	1c01      	adds	r1, r0, #0
 80033a8:	bf18      	it	ne
 80033aa:	2101      	movne	r1, #1
 80033ac:	2003      	movs	r0, #3
 80033ae:	f7fd fc8f 	bl	8000cd0 <_test_assert>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d1ea      	bne.n	800338c <dyn2_execute.lto_priv.103+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 80033b6:	3c01      	subs	r4, #1
 80033b8:	d1f2      	bne.n	80033a0 <dyn2_execute.lto_priv.103+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80033ba:	4806      	ldr	r0, [pc, #24]	; (80033d4 <dyn2_execute.lto_priv.103+0xc4>)
 80033bc:	f7fd fd18 	bl	8000df0 <chPoolAlloc>
}
 80033c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80033c4:	fab0 f180 	clz	r1, r0
 80033c8:	2004      	movs	r0, #4
 80033ca:	0949      	lsrs	r1, r1, #5
 80033cc:	f7fd bc80 	b.w	8000cd0 <_test_assert>
 80033d0:	20000b78 	.word	0x20000b78
 80033d4:	20000cc8 	.word	0x20000cc8
 80033d8:	080064d0 	.word	0x080064d0
 80033dc:	08005930 	.word	0x08005930
 80033e0:	20000a40 	.word	0x20000a40
 80033e4:	08005934 	.word	0x08005934
 80033e8:	08005938 	.word	0x08005938
 80033ec:	0800592c 	.word	0x0800592c
 80033f0:	08005940 	.word	0x08005940
 80033f4:	08006528 	.word	0x08006528
 80033f8:	f3af 8000 	nop.w
 80033fc:	f3af 8000 	nop.w

08003400 <thread.lto_priv.61>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8003400:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8003402:	7800      	ldrb	r0, [r0, #0]
 8003404:	f7fd fc7c 	bl	8000d00 <test_emit_token>
  return 0;
}
 8003408:	2000      	movs	r0, #0
 800340a:	bd08      	pop	{r3, pc}
 800340c:	f3af 8000 	nop.w

08003410 <dyn1_execute.lto_priv.101>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8003410:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003412:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <dyn1_execute.lto_priv.101+0xb4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8003414:	482c      	ldr	r0, [pc, #176]	; (80034c8 <dyn1_execute.lto_priv.101+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003416:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8003418:	4c2c      	ldr	r4, [pc, #176]	; (80034cc <dyn1_execute.lto_priv.101+0xbc>)
 800341a:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 800341c:	b082      	sub	sp, #8
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 800341e:	a901      	add	r1, sp, #4
 8003420:	f7fe f9de 	bl	80017e0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8003424:	492a      	ldr	r1, [pc, #168]	; (80034d0 <dyn1_execute.lto_priv.101+0xc0>)
 8003426:	1e68      	subs	r0, r5, #1
 8003428:	f002 f82a 	bl	8005480 <chThdCreateFromHeap.constprop.51>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800342c:	4929      	ldr	r1, [pc, #164]	; (80034d4 <dyn1_execute.lto_priv.101+0xc4>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 800342e:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8003430:	1ea8      	subs	r0, r5, #2
 8003432:	f002 f825 	bl	8005480 <chThdCreateFromHeap.constprop.51>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8003436:	4669      	mov	r1, sp
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8003438:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800343a:	4823      	ldr	r0, [pc, #140]	; (80034c8 <dyn1_execute.lto_priv.101+0xb8>)
 800343c:	f7fe f9d0 	bl	80017e0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8003440:	9900      	ldr	r1, [sp, #0]
 8003442:	4821      	ldr	r0, [pc, #132]	; (80034c8 <dyn1_execute.lto_priv.101+0xb8>)
 8003444:	f7fe fbbc 	bl	8001bc0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8003448:	4923      	ldr	r1, [pc, #140]	; (80034d8 <dyn1_execute.lto_priv.101+0xc8>)
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 800344a:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 800344c:	1ee8      	subs	r0, r5, #3
 800344e:	f002 f817 	bl	8005480 <chThdCreateFromHeap.constprop.51>
 8003452:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8003454:	4630      	mov	r0, r6
 8003456:	f7fe f9eb 	bl	8001830 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 800345a:	6821      	ldr	r1, [r4, #0]
 800345c:	b121      	cbz	r1, 8003468 <dyn1_execute.lto_priv.101+0x58>
 800345e:	6861      	ldr	r1, [r4, #4]
 8003460:	b111      	cbz	r1, 8003468 <dyn1_execute.lto_priv.101+0x58>
 8003462:	68a1      	ldr	r1, [r4, #8]
 8003464:	b331      	cbz	r1, 80034b4 <dyn1_execute.lto_priv.101+0xa4>
 8003466:	2100      	movs	r1, #0
 8003468:	2001      	movs	r0, #1
 800346a:	f7fd fc31 	bl	8000cd0 <_test_assert>
 800346e:	b108      	cbz	r0, 8003474 <dyn1_execute.lto_priv.101+0x64>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8003470:	b002      	add	sp, #8
 8003472:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8003474:	f7fe fa7c 	bl	8001970 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8003478:	2002      	movs	r0, #2
 800347a:	4918      	ldr	r1, [pc, #96]	; (80034dc <dyn1_execute.lto_priv.101+0xcc>)
 800347c:	f7fd fc00 	bl	8000c80 <_test_assert_sequence>
 8003480:	2800      	cmp	r0, #0
 8003482:	d1f5      	bne.n	8003470 <dyn1_execute.lto_priv.101+0x60>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8003484:	4669      	mov	r1, sp
 8003486:	4810      	ldr	r0, [pc, #64]	; (80034c8 <dyn1_execute.lto_priv.101+0xb8>)
 8003488:	f7fe f9aa 	bl	80017e0 <chHeapStatus>
 800348c:	f1a0 0101 	sub.w	r1, r0, #1
 8003490:	2003      	movs	r0, #3
 8003492:	fab1 f181 	clz	r1, r1
 8003496:	0949      	lsrs	r1, r1, #5
 8003498:	f7fd fc1a 	bl	8000cd0 <_test_assert>
 800349c:	2800      	cmp	r0, #0
 800349e:	d1e7      	bne.n	8003470 <dyn1_execute.lto_priv.101+0x60>
  test_assert(4, n == sz, "heap size changed");
 80034a0:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80034a4:	2004      	movs	r0, #4
 80034a6:	1ac9      	subs	r1, r1, r3
 80034a8:	fab1 f181 	clz	r1, r1
 80034ac:	0949      	lsrs	r1, r1, #5
 80034ae:	f7fd fc0f 	bl	8000cd0 <_test_assert>
 80034b2:	e7dd      	b.n	8003470 <dyn1_execute.lto_priv.101+0x60>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 80034b4:	68e3      	ldr	r3, [r4, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1d6      	bne.n	8003468 <dyn1_execute.lto_priv.101+0x58>
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	fab1 f181 	clz	r1, r1
 80034c0:	0949      	lsrs	r1, r1, #5
 80034c2:	e7d1      	b.n	8003468 <dyn1_execute.lto_priv.101+0x58>
 80034c4:	20000b78 	.word	0x20000b78
 80034c8:	20000cd8 	.word	0x20000cd8
 80034cc:	20000a40 	.word	0x20000a40
 80034d0:	08005930 	.word	0x08005930
 80034d4:	08005934 	.word	0x08005934
 80034d8:	08005938 	.word	0x08005938
 80034dc:	08006530 	.word	0x08006530

080034e0 <heap1_execute.lto_priv.97>:

static void heap1_execute(void) {
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 80034e4:	a901      	add	r1, sp, #4
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fe f97a 	bl	80017e0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 80034ec:	2110      	movs	r1, #16
 80034ee:	2000      	movs	r0, #0
 80034f0:	f7fe fb66 	bl	8001bc0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 80034f4:	1c01      	adds	r1, r0, #0
 80034f6:	4605      	mov	r5, r0
 80034f8:	bf18      	it	ne
 80034fa:	2101      	movne	r1, #1
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7fd fbe7 	bl	8000cd0 <_test_assert>
 8003502:	4604      	mov	r4, r0
 8003504:	b108      	cbz	r0, 800350a <heap1_execute.lto_priv.97+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8003506:	b002      	add	sp, #8
 8003508:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800350a:	4628      	mov	r0, r5
 800350c:	f7fe f990 	bl	8001830 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8003510:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8003514:	4620      	mov	r0, r4
 8003516:	f7fe fb53 	bl	8001bc0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800351a:	fab0 f180 	clz	r1, r0
 800351e:	2002      	movs	r0, #2
 8003520:	0949      	lsrs	r1, r1, #5
 8003522:	f7fd fbd5 	bl	8000cd0 <_test_assert>
 8003526:	2800      	cmp	r0, #0
 8003528:	d1ed      	bne.n	8003506 <heap1_execute.lto_priv.97+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800352a:	a901      	add	r1, sp, #4
 800352c:	487b      	ldr	r0, [pc, #492]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 800352e:	f7fe f957 	bl	80017e0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003532:	2110      	movs	r1, #16
 8003534:	4879      	ldr	r0, [pc, #484]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003536:	f7fe fb43 	bl	8001bc0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800353a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800353c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800353e:	4877      	ldr	r0, [pc, #476]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003540:	f7fe fb3e 	bl	8001bc0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003544:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003546:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003548:	4874      	ldr	r0, [pc, #464]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 800354a:	f7fe fb39 	bl	8001bc0 <chHeapAlloc>
 800354e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8003550:	4630      	mov	r0, r6
 8003552:	f7fe f96d 	bl	8001830 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8003556:	4628      	mov	r0, r5
 8003558:	f7fe f96a 	bl	8001830 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 800355c:	4620      	mov	r0, r4
 800355e:	f7fe f967 	bl	8001830 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003562:	4669      	mov	r1, sp
 8003564:	486d      	ldr	r0, [pc, #436]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003566:	f7fe f93b 	bl	80017e0 <chHeapStatus>
 800356a:	f1a0 0101 	sub.w	r1, r0, #1
 800356e:	2003      	movs	r0, #3
 8003570:	fab1 f181 	clz	r1, r1
 8003574:	0949      	lsrs	r1, r1, #5
 8003576:	f7fd fbab 	bl	8000cd0 <_test_assert>
 800357a:	2800      	cmp	r0, #0
 800357c:	d1c3      	bne.n	8003506 <heap1_execute.lto_priv.97+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800357e:	2110      	movs	r1, #16
 8003580:	4866      	ldr	r0, [pc, #408]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003582:	f7fe fb1d 	bl	8001bc0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003586:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003588:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800358a:	4864      	ldr	r0, [pc, #400]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 800358c:	f7fe fb18 	bl	8001bc0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003590:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003592:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003594:	4861      	ldr	r0, [pc, #388]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003596:	f7fe fb13 	bl	8001bc0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 800359a:	f7fe f949 	bl	8001830 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 800359e:	4628      	mov	r0, r5
 80035a0:	f7fe f946 	bl	8001830 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7fe f943 	bl	8001830 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80035aa:	4669      	mov	r1, sp
 80035ac:	485b      	ldr	r0, [pc, #364]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80035ae:	f7fe f917 	bl	80017e0 <chHeapStatus>
 80035b2:	f1a0 0101 	sub.w	r1, r0, #1
 80035b6:	2004      	movs	r0, #4
 80035b8:	fab1 f181 	clz	r1, r1
 80035bc:	0949      	lsrs	r1, r1, #5
 80035be:	f7fd fb87 	bl	8000cd0 <_test_assert>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d19f      	bne.n	8003506 <heap1_execute.lto_priv.97+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80035c6:	2111      	movs	r1, #17
 80035c8:	4854      	ldr	r0, [pc, #336]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80035ca:	f7fe faf9 	bl	8001bc0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80035ce:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80035d0:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80035d2:	4852      	ldr	r0, [pc, #328]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80035d4:	f7fe faf4 	bl	8001bc0 <chHeapAlloc>
 80035d8:	4605      	mov	r5, r0
  chHeapFree(p1);
 80035da:	4620      	mov	r0, r4
 80035dc:	f7fe f928 	bl	8001830 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80035e0:	4669      	mov	r1, sp
 80035e2:	484e      	ldr	r0, [pc, #312]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80035e4:	f7fe f8fc 	bl	80017e0 <chHeapStatus>
 80035e8:	f1a0 0102 	sub.w	r1, r0, #2
 80035ec:	2005      	movs	r0, #5
 80035ee:	fab1 f181 	clz	r1, r1
 80035f2:	0949      	lsrs	r1, r1, #5
 80035f4:	f7fd fb6c 	bl	8000cd0 <_test_assert>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d184      	bne.n	8003506 <heap1_execute.lto_priv.97+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 80035fc:	2110      	movs	r1, #16
 80035fe:	4847      	ldr	r0, [pc, #284]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003600:	f7fe fade 	bl	8001bc0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003604:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003606:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003608:	4844      	ldr	r0, [pc, #272]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 800360a:	f7fe f8e9 	bl	80017e0 <chHeapStatus>
 800360e:	2801      	cmp	r0, #1
 8003610:	f000 8081 	beq.w	8003716 <heap1_execute.lto_priv.97+0x236>
 8003614:	4669      	mov	r1, sp
 8003616:	4841      	ldr	r0, [pc, #260]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003618:	f7fe f8e2 	bl	80017e0 <chHeapStatus>
 800361c:	f1a0 0102 	sub.w	r1, r0, #2
 8003620:	fab1 f181 	clz	r1, r1
 8003624:	0949      	lsrs	r1, r1, #5
 8003626:	2006      	movs	r0, #6
 8003628:	f7fd fb52 	bl	8000cd0 <_test_assert>
 800362c:	2800      	cmp	r0, #0
 800362e:	f47f af6a 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8003632:	4628      	mov	r0, r5
 8003634:	f7fe f8fc 	bl	8001830 <chHeapFree>
  chHeapFree(p1);
 8003638:	4620      	mov	r0, r4
 800363a:	f7fe f8f9 	bl	8001830 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800363e:	4669      	mov	r1, sp
 8003640:	4836      	ldr	r0, [pc, #216]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003642:	f7fe f8cd 	bl	80017e0 <chHeapStatus>
 8003646:	1e46      	subs	r6, r0, #1
 8003648:	4271      	negs	r1, r6
 800364a:	4171      	adcs	r1, r6
 800364c:	2007      	movs	r0, #7
 800364e:	f7fd fb3f 	bl	8000cd0 <_test_assert>
 8003652:	2800      	cmp	r0, #0
 8003654:	f47f af57 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003658:	2110      	movs	r1, #16
 800365a:	4830      	ldr	r0, [pc, #192]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 800365c:	f7fe fab0 	bl	8001bc0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003660:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003662:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003664:	482d      	ldr	r0, [pc, #180]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003666:	f7fe faab 	bl	8001bc0 <chHeapAlloc>
 800366a:	4604      	mov	r4, r0
  chHeapFree(p1);
 800366c:	4628      	mov	r0, r5
 800366e:	f7fe f8df 	bl	8001830 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8003672:	4669      	mov	r1, sp
 8003674:	4829      	ldr	r0, [pc, #164]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003676:	f7fe f8b3 	bl	80017e0 <chHeapStatus>
 800367a:	1e85      	subs	r5, r0, #2
 800367c:	4269      	negs	r1, r5
 800367e:	4169      	adcs	r1, r5
 8003680:	2008      	movs	r0, #8
 8003682:	f7fd fb25 	bl	8000cd0 <_test_assert>
 8003686:	2800      	cmp	r0, #0
 8003688:	f47f af3d 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 800368c:	2120      	movs	r1, #32
 800368e:	4823      	ldr	r0, [pc, #140]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 8003690:	f7fe fa96 	bl	8001bc0 <chHeapAlloc>
  chHeapFree(p1);
 8003694:	f7fe f8cc 	bl	8001830 <chHeapFree>
  chHeapFree(p2);
 8003698:	4620      	mov	r0, r4
 800369a:	f7fe f8c9 	bl	8001830 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800369e:	4669      	mov	r1, sp
 80036a0:	481e      	ldr	r0, [pc, #120]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80036a2:	f7fe f89d 	bl	80017e0 <chHeapStatus>
 80036a6:	3801      	subs	r0, #1
 80036a8:	4241      	negs	r1, r0
 80036aa:	4141      	adcs	r1, r0
 80036ac:	2009      	movs	r0, #9
 80036ae:	f7fd fb0f 	bl	8000cd0 <_test_assert>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	f47f af27 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 80036b8:	4669      	mov	r1, sp
 80036ba:	4818      	ldr	r0, [pc, #96]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80036bc:	f7fe f890 	bl	80017e0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 80036c0:	9900      	ldr	r1, [sp, #0]
 80036c2:	4816      	ldr	r0, [pc, #88]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80036c4:	f7fe fa7c 	bl	8001bc0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80036c8:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 80036ca:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80036cc:	4813      	ldr	r0, [pc, #76]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80036ce:	f7fe f887 	bl	80017e0 <chHeapStatus>
 80036d2:	fab0 f180 	clz	r1, r0
 80036d6:	200a      	movs	r0, #10
 80036d8:	0949      	lsrs	r1, r1, #5
 80036da:	f7fd faf9 	bl	8000cd0 <_test_assert>
 80036de:	2800      	cmp	r0, #0
 80036e0:	f47f af11 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>
  chHeapFree(p1);
 80036e4:	4620      	mov	r0, r4
 80036e6:	f7fe f8a3 	bl	8001830 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80036ea:	4669      	mov	r1, sp
 80036ec:	480b      	ldr	r0, [pc, #44]	; (800371c <heap1_execute.lto_priv.97+0x23c>)
 80036ee:	f7fe f877 	bl	80017e0 <chHeapStatus>
 80036f2:	1e42      	subs	r2, r0, #1
 80036f4:	4251      	negs	r1, r2
 80036f6:	4151      	adcs	r1, r2
 80036f8:	200b      	movs	r0, #11
 80036fa:	f7fd fae9 	bl	8000cd0 <_test_assert>
 80036fe:	2800      	cmp	r0, #0
 8003700:	f47f af01 	bne.w	8003506 <heap1_execute.lto_priv.97+0x26>
  test_assert(12, n == sz, "size changed");
 8003704:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8003708:	1acb      	subs	r3, r1, r3
 800370a:	4259      	negs	r1, r3
 800370c:	4159      	adcs	r1, r3
 800370e:	200c      	movs	r0, #12
 8003710:	f7fd fade 	bl	8000cd0 <_test_assert>
 8003714:	e6f7      	b.n	8003506 <heap1_execute.lto_priv.97+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003716:	4601      	mov	r1, r0
 8003718:	e785      	b.n	8003626 <heap1_execute.lto_priv.97+0x146>
 800371a:	bf00      	nop
 800371c:	20000b50 	.word	0x20000b50

08003720 <evt3_execute.lto_priv.95>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8003720:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003722:	4c55      	ldr	r4, [pc, #340]	; (8003878 <evt3_execute.lto_priv.95+0x158>)
 8003724:	2320      	movs	r3, #32
 8003726:	69a2      	ldr	r2, [r4, #24]
 8003728:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 800372c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800372e:	b93b      	cbnz	r3, 8003740 <evt3_execute.lto_priv.95+0x20>
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8003736:	2001      	movs	r0, #1
 8003738:	f7fd faca 	bl	8000cd0 <_test_assert>
 800373c:	b180      	cbz	r0, 8003760 <evt3_execute.lto_priv.95+0x40>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8003740:	4259      	negs	r1, r3
 8003742:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8003744:	ea23 0301 	bic.w	r3, r3, r1
 8003748:	6353      	str	r3, [r2, #52]	; 0x34
 800374a:	2300      	movs	r3, #0
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	2001      	movs	r0, #1
 8003752:	fab1 f181 	clz	r1, r1
 8003756:	0949      	lsrs	r1, r1, #5
 8003758:	f7fd faba 	bl	8000cd0 <_test_assert>
 800375c:	2800      	cmp	r0, #0
 800375e:	d1ee      	bne.n	800373e <evt3_execute.lto_priv.95+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003760:	69a3      	ldr	r3, [r4, #24]
 8003762:	2220      	movs	r2, #32
 8003764:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 8003768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376a:	2a00      	cmp	r2, #0
 800376c:	d06f      	beq.n	800384e <evt3_execute.lto_priv.95+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 800376e:	6358      	str	r0, [r3, #52]	; 0x34
 8003770:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8003774:	4601      	mov	r1, r0
 8003776:	2002      	movs	r0, #2
 8003778:	f7fd faaa 	bl	8000cd0 <_test_assert>
 800377c:	2800      	cmp	r0, #0
 800377e:	d1de      	bne.n	800373e <evt3_execute.lto_priv.95+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003780:	69a3      	ldr	r3, [r4, #24]
 8003782:	2220      	movs	r2, #32
 8003784:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8003788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378a:	3201      	adds	r2, #1
 800378c:	d063      	beq.n	8003856 <evt3_execute.lto_priv.95+0x136>
 800378e:	f380 8811 	msr	BASEPRI, r0
 8003792:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8003794:	4601      	mov	r1, r0
 8003796:	2003      	movs	r0, #3
 8003798:	f7fd fa9a 	bl	8000cd0 <_test_assert>
 800379c:	2800      	cmp	r0, #0
 800379e:	d1ce      	bne.n	800373e <evt3_execute.lto_priv.95+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80037a0:	69a6      	ldr	r6, [r4, #24]
 80037a2:	2320      	movs	r3, #32
 80037a4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 80037a8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80037aa:	b94d      	cbnz	r5, 80037c0 <evt3_execute.lto_priv.95+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80037b0:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80037b2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80037b4:	4601      	mov	r1, r0
 80037b6:	f7fd fd33 	bl	8001220 <chSchGoSleepTimeoutS>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	db4f      	blt.n	800385e <evt3_execute.lto_priv.95+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80037be:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 80037c0:	4269      	negs	r1, r5
 80037c2:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 80037c4:	ea25 0501 	bic.w	r5, r5, r1
 80037c8:	6375      	str	r5, [r6, #52]	; 0x34
 80037ca:	2300      	movs	r3, #0
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	fab1 f181 	clz	r1, r1
 80037d4:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 80037d6:	2004      	movs	r0, #4
 80037d8:	f7fd fa7a 	bl	8000cd0 <_test_assert>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1ae      	bne.n	800373e <evt3_execute.lto_priv.95+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80037e0:	69a6      	ldr	r6, [r4, #24]
 80037e2:	2320      	movs	r3, #32
 80037e4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 80037e8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80037ea:	b94d      	cbnz	r5, 8003800 <evt3_execute.lto_priv.95+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80037f0:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80037f2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80037f4:	4601      	mov	r1, r0
 80037f6:	f7fd fd13 	bl	8001220 <chSchGoSleepTimeoutS>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	db33      	blt.n	8003866 <evt3_execute.lto_priv.95+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80037fe:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8003800:	2300      	movs	r3, #0
 8003802:	6373      	str	r3, [r6, #52]	; 0x34
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	fab5 f185 	clz	r1, r5
 800380c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800380e:	2005      	movs	r0, #5
 8003810:	f7fd fa5e 	bl	8000cd0 <_test_assert>
 8003814:	4605      	mov	r5, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d191      	bne.n	800373e <evt3_execute.lto_priv.95+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800381a:	69a4      	ldr	r4, [r4, #24]
 800381c:	2320      	movs	r3, #32
 800381e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8003822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003824:	3301      	adds	r3, #1
 8003826:	d008      	beq.n	800383a <evt3_execute.lto_priv.95+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800382e:	200b      	movs	r0, #11
 8003830:	210a      	movs	r1, #10
 8003832:	f7fd fcf5 	bl	8001220 <chSchGoSleepTimeoutS>
 8003836:	2800      	cmp	r0, #0
 8003838:	db19      	blt.n	800386e <evt3_execute.lto_priv.95+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800383a:	2300      	movs	r3, #0
 800383c:	6363      	str	r3, [r4, #52]	; 0x34
 800383e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8003842:	4629      	mov	r1, r5
 8003844:	2006      	movs	r0, #6
}
 8003846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 800384a:	f7fd ba41 	b.w	8000cd0 <_test_assert>
 800384e:	f380 8811 	msr	BASEPRI, r0
 8003852:	2001      	movs	r0, #1
 8003854:	e78e      	b.n	8003774 <evt3_execute.lto_priv.95+0x54>
 8003856:	6358      	str	r0, [r3, #52]	; 0x34
 8003858:	f380 8811 	msr	BASEPRI, r0
 800385c:	e79a      	b.n	8003794 <evt3_execute.lto_priv.95+0x74>
 800385e:	f385 8811 	msr	BASEPRI, r5
 8003862:	2101      	movs	r1, #1
 8003864:	e7b7      	b.n	80037d6 <evt3_execute.lto_priv.95+0xb6>
 8003866:	f385 8811 	msr	BASEPRI, r5
 800386a:	2101      	movs	r1, #1
 800386c:	e7cf      	b.n	800380e <evt3_execute.lto_priv.95+0xee>
 800386e:	f385 8811 	msr	BASEPRI, r5
 8003872:	2501      	movs	r5, #1
 8003874:	e7e5      	b.n	8003842 <evt3_execute.lto_priv.95+0x122>
 8003876:	bf00      	nop
 8003878:	20000b78 	.word	0x20000b78
 800387c:	f3af 8000 	nop.w

08003880 <evt3_setup.lto_priv.94>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8003880:	f001 bf06 	b.w	8005690 <chEvtGetAndClearEvents.constprop.33>
 8003884:	f3af 8000 	nop.w
 8003888:	f3af 8000 	nop.w
 800388c:	f3af 8000 	nop.w

08003890 <evt2_setup.lto_priv.92>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8003890:	f001 befe 	b.w	8005690 <chEvtGetAndClearEvents.constprop.33>
 8003894:	f3af 8000 	nop.w
 8003898:	f3af 8000 	nop.w
 800389c:	f3af 8000 	nop.w

080038a0 <evt2_execute.lto_priv.93>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	2520      	movs	r5, #32
 80038a6:	b08d      	sub	sp, #52	; 0x34
 80038a8:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  events = (currp->p_epending |= events);
 80038ac:	4ca7      	ldr	r4, [pc, #668]	; (8003b4c <evt2_execute.lto_priv.93+0x2ac>)
 80038ae:	69a2      	ldr	r2, [r4, #24]
 80038b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80038b2:	f043 0307 	orr.w	r3, r3, #7
 80038b6:	6353      	str	r3, [r2, #52]	; 0x34
 80038b8:	2300      	movs	r3, #0
 80038ba:	f383 8811 	msr	BASEPRI, r3

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 80038be:	f001 fef7 	bl	80056b0 <chEvtWaitOne.constprop.29>
  test_assert(1, m == 1, "single event error");
 80038c2:	f1a0 0101 	sub.w	r1, r0, #1
 80038c6:	2001      	movs	r0, #1
 80038c8:	fab1 f181 	clz	r1, r1
 80038cc:	0949      	lsrs	r1, r1, #5
 80038ce:	f7fd f9ff 	bl	8000cd0 <_test_assert>
 80038d2:	b110      	cbz	r0, 80038da <evt2_execute.lto_priv.93+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80038d4:	b00d      	add	sp, #52	; 0x34
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80038da:	f001 fee9 	bl	80056b0 <chEvtWaitOne.constprop.29>
  test_assert(2, m == 2, "single event error");
 80038de:	f1a0 0102 	sub.w	r1, r0, #2
 80038e2:	2002      	movs	r0, #2
 80038e4:	fab1 f181 	clz	r1, r1
 80038e8:	0949      	lsrs	r1, r1, #5
 80038ea:	f7fd f9f1 	bl	8000cd0 <_test_assert>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d1f0      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 80038f2:	f001 fedd 	bl	80056b0 <chEvtWaitOne.constprop.29>
  test_assert(3, m == 4, "single event error");
 80038f6:	f1a0 0104 	sub.w	r1, r0, #4
 80038fa:	2003      	movs	r0, #3
 80038fc:	fab1 f181 	clz	r1, r1
 8003900:	0949      	lsrs	r1, r1, #5
 8003902:	f7fd f9e5 	bl	8000cd0 <_test_assert>
 8003906:	2800      	cmp	r0, #0
 8003908:	d1e4      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800390a:	f001 fec1 	bl	8005690 <chEvtGetAndClearEvents.constprop.33>
  test_assert(4, m == 0, "stuck event");
 800390e:	fab0 f180 	clz	r1, r0
 8003912:	2004      	movs	r0, #4
 8003914:	0949      	lsrs	r1, r1, #5
 8003916:	f7fd f9db 	bl	8000cd0 <_test_assert>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d1d9      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8003920:	f7fd fdc6 	bl	80014b0 <test_wait_tick>
 8003924:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003928:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800392c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8003930:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003934:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003936:	4b86      	ldr	r3, [pc, #536]	; (8003b50 <evt2_execute.lto_priv.93+0x2b0>)
 8003938:	688a      	ldr	r2, [r1, #8]
 800393a:	4886      	ldr	r0, [pc, #536]	; (8003b54 <evt2_execute.lto_priv.93+0x2b4>)
 800393c:	9100      	str	r1, [sp, #0]
 800393e:	3a01      	subs	r2, #1
 8003940:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003944:	f7fd fbcc 	bl	80010e0 <chThdCreateStatic>
 8003948:	4e83      	ldr	r6, [pc, #524]	; (8003b58 <evt2_execute.lto_priv.93+0x2b8>)
 800394a:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800394c:	f001 feb0 	bl	80056b0 <chEvtWaitOne.constprop.29>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8003950:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8003954:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8003956:	f207 2226 	addw	r2, r7, #550	; 0x226
 800395a:	2005      	movs	r0, #5
 800395c:	f7fd f970 	bl	8000c40 <_test_assert_time_window>
 8003960:	2800      	cmp	r0, #0
 8003962:	d1b7      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_assert(6, m == 1, "single event error");
 8003964:	f1a9 0101 	sub.w	r1, r9, #1
 8003968:	2006      	movs	r0, #6
 800396a:	fab1 f181 	clz	r1, r1
 800396e:	0949      	lsrs	r1, r1, #5
 8003970:	f7fd f9ae 	bl	8000cd0 <_test_assert>
 8003974:	2800      	cmp	r0, #0
 8003976:	d1ad      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003978:	f001 fe8a 	bl	8005690 <chEvtGetAndClearEvents.constprop.33>
  test_assert(7, m == 0, "stuck event");
 800397c:	fab0 f180 	clz	r1, r0
 8003980:	2007      	movs	r0, #7
 8003982:	0949      	lsrs	r1, r1, #5
 8003984:	f7fd f9a4 	bl	8000cd0 <_test_assert>
 8003988:	4607      	mov	r7, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d1a2      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_wait_threads();
 800398e:	f7fd ffef 	bl	8001970 <test_wait_threads>
 8003992:	f385 8811 	msr	BASEPRI, r5
 8003996:	69a2      	ldr	r2, [r4, #24]
 8003998:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800399a:	f043 0305 	orr.w	r3, r3, #5
 800399e:	6353      	str	r3, [r2, #52]	; 0x34
 80039a0:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80039a4:	f001 fea4 	bl	80056f0 <chEvtWaitAny.constprop.28>
  test_assert(8, m == 5, "unexpected pending bit");
 80039a8:	1f47      	subs	r7, r0, #5
 80039aa:	4279      	negs	r1, r7
 80039ac:	4179      	adcs	r1, r7
 80039ae:	2008      	movs	r0, #8
 80039b0:	f7fd f98e 	bl	8000cd0 <_test_assert>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d18d      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80039b8:	f001 fe6a 	bl	8005690 <chEvtGetAndClearEvents.constprop.33>
  test_assert(9, m == 0, "stuck event");
 80039bc:	fab0 f180 	clz	r1, r0
 80039c0:	2009      	movs	r0, #9
 80039c2:	0949      	lsrs	r1, r1, #5
 80039c4:	f7fd f984 	bl	8000cd0 <_test_assert>
 80039c8:	4607      	mov	r7, r0
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d182      	bne.n	80038d4 <evt2_execute.lto_priv.93+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80039ce:	f7fd fd6f 	bl	80014b0 <test_wait_tick>
 80039d2:	f385 8811 	msr	BASEPRI, r5
 80039d6:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 80039da:	f387 8811 	msr	BASEPRI, r7
 80039de:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80039e0:	4b5b      	ldr	r3, [pc, #364]	; (8003b50 <evt2_execute.lto_priv.93+0x2b0>)
 80039e2:	688a      	ldr	r2, [r1, #8]
 80039e4:	485b      	ldr	r0, [pc, #364]	; (8003b54 <evt2_execute.lto_priv.93+0x2b4>)
 80039e6:	9100      	str	r1, [sp, #0]
 80039e8:	3a01      	subs	r2, #1
 80039ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039ee:	f7fd fb77 	bl	80010e0 <chThdCreateStatic>
 80039f2:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80039f4:	f001 fe7c 	bl	80056f0 <chEvtWaitAny.constprop.28>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80039f8:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80039fc:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80039fe:	f205 2226 	addw	r2, r5, #550	; 0x226
 8003a02:	200a      	movs	r0, #10
 8003a04:	f7fd f91c 	bl	8000c40 <_test_assert_time_window>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f47f af63 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_assert(11, m == 1, "single event error");
 8003a0e:	1e78      	subs	r0, r7, #1
 8003a10:	4241      	negs	r1, r0
 8003a12:	4141      	adcs	r1, r0
 8003a14:	200b      	movs	r0, #11
 8003a16:	f7fd f95b 	bl	8000cd0 <_test_assert>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	f47f af5a 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003a20:	f001 fe36 	bl	8005690 <chEvtGetAndClearEvents.constprop.33>
  test_assert(12, m == 0, "stuck event");
 8003a24:	fab0 f180 	clz	r1, r0
 8003a28:	200c      	movs	r0, #12
 8003a2a:	0949      	lsrs	r1, r1, #5
 8003a2c:	f7fd f950 	bl	8000cd0 <_test_assert>
 8003a30:	4607      	mov	r7, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	f47f af4e 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_wait_threads();
 8003a38:	f7fd ff9a 	bl	8001970 <test_wait_threads>
 8003a3c:	4d47      	ldr	r5, [pc, #284]	; (8003b5c <evt2_execute.lto_priv.93+0x2bc>)
 8003a3e:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <evt2_execute.lto_priv.93+0x2c0>)
 8003a40:	602d      	str	r5, [r5, #0]
 8003a42:	601b      	str	r3, [r3, #0]
 8003a44:	f04f 0b20 	mov.w	fp, #32
 8003a48:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8003a4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003a50:	682a      	ldr	r2, [r5, #0]
 8003a52:	f849 2d28 	str.w	r2, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 8003a56:	69a1      	ldr	r1, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = 0;
 8003a58:	9705      	str	r7, [sp, #20]

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8003a5a:	2001      	movs	r0, #1
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8003a60:	9103      	str	r1, [sp, #12]
  elp->el_events   = events;
 8003a62:	9004      	str	r0, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8003a64:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8003a68:	9206      	str	r2, [sp, #24]
 8003a6a:	f387 8811 	msr	BASEPRI, r7
 8003a6e:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8003a72:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8003a7c:	2004      	movs	r0, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8003a7e:	69a1      	ldr	r1, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = 0;
 8003a80:	970a      	str	r7, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8003a82:	920b      	str	r2, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8003a84:	9108      	str	r1, [sp, #32]
  elp->el_events   = events;
 8003a86:	9009      	str	r0, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8003a88:	f8c3 8000 	str.w	r8, [r3]
 8003a8c:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8003a90:	f7fd fd0e 	bl	80014b0 <test_wait_tick>
 8003a94:	f38b 8811 	msr	BASEPRI, fp
 8003a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a9c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 8003aa0:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003aa4:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <evt2_execute.lto_priv.93+0x2c4>)
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	482a      	ldr	r0, [pc, #168]	; (8003b54 <evt2_execute.lto_priv.93+0x2b4>)
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <evt2_execute.lto_priv.93+0x2c8>)
 8003ab6:	f7fd fb13 	bl	80010e0 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8003aba:	f50a 77fa 	add.w	r7, sl, #500	; 0x1f4
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003abe:	6030      	str	r0, [r6, #0]
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8003ac0:	69a4      	ldr	r4, [r4, #24]
 8003ac2:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8003ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ac8:	f003 0205 	and.w	r2, r3, #5
 8003acc:	2a05      	cmp	r2, #5
 8003ace:	d005      	beq.n	8003adc <evt2_execute.lto_priv.93+0x23c>
    ctp->p_u.ewmask = events;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8003ad4:	200b      	movs	r0, #11
 8003ad6:	f7fd fb43 	bl	8001160 <chSchGoSleepS>
 8003ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8003adc:	f023 0305 	bic.w	r3, r3, #5
 8003ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8003ae8:	200d      	movs	r0, #13
 8003aea:	4639      	mov	r1, r7
 8003aec:	f20a 2226 	addw	r2, sl, #550	; 0x226
 8003af0:	f7fd f8a6 	bl	8000c40 <_test_assert_time_window>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	f47f aeed 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003afa:	f001 fdc9 	bl	8005690 <chEvtGetAndClearEvents.constprop.33>
  test_assert(14, m == 0, "stuck event");
 8003afe:	fab0 f180 	clz	r1, r0
 8003b02:	200e      	movs	r0, #14
 8003b04:	0949      	lsrs	r1, r1, #5
 8003b06:	f7fd f8e3 	bl	8000cd0 <_test_assert>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f47f aee2 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8003b10:	4c13      	ldr	r4, [pc, #76]	; (8003b60 <evt2_execute.lto_priv.93+0x2c0>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8003b12:	f7fd ff2d 	bl	8001970 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 8003b16:	4649      	mov	r1, r9
 8003b18:	4810      	ldr	r0, [pc, #64]	; (8003b5c <evt2_execute.lto_priv.93+0x2bc>)
 8003b1a:	f7fd f981 	bl	8000e20 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8003b1e:	4641      	mov	r1, r8
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fd f97d 	bl	8000e20 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8003b26:	6829      	ldr	r1, [r5, #0]
 8003b28:	1b4a      	subs	r2, r1, r5
 8003b2a:	4251      	negs	r1, r2
 8003b2c:	4151      	adcs	r1, r2
 8003b2e:	200f      	movs	r0, #15
 8003b30:	f7fd f8ce 	bl	8000cd0 <_test_assert>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	f47f aecd 	bne.w	80038d4 <evt2_execute.lto_priv.93+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8003b3a:	6821      	ldr	r1, [r4, #0]
 8003b3c:	1b0b      	subs	r3, r1, r4
 8003b3e:	4259      	negs	r1, r3
 8003b40:	4159      	adcs	r1, r3
 8003b42:	2010      	movs	r0, #16
 8003b44:	f7fd f8c4 	bl	8000cd0 <_test_assert>
 8003b48:	e6c4      	b.n	80038d4 <evt2_execute.lto_priv.93+0x34>
 8003b4a:	bf00      	nop
 8003b4c:	20000b78 	.word	0x20000b78
 8003b50:	08003bc1 	.word	0x08003bc1
 8003b54:	20000d10 	.word	0x20000d10
 8003b58:	20000a40 	.word	0x20000a40
 8003b5c:	20000848 	.word	0x20000848
 8003b60:	20000858 	.word	0x20000858
 8003b64:	08005930 	.word	0x08005930
 8003b68:	08003b71 	.word	0x08003b71
 8003b6c:	f3af 8000 	nop.w

08003b70 <thread2>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	2520      	movs	r5, #32
 8003b74:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8003b78:	480c      	ldr	r0, [pc, #48]	; (8003bac <thread2+0x3c>)
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f7fd fd48 	bl	8001610 <chEvtBroadcastFlagsI>
 8003b80:	2400      	movs	r4, #0
  chSchRescheduleS();
 8003b82:	f7fd fa05 	bl	8000f90 <chSchRescheduleS>
 8003b86:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8003b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b8e:	f7fd fc7f 	bl	8001490 <chThdSleep>
 8003b92:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8003b96:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <thread2+0x40>)
 8003b98:	4621      	mov	r1, r4
 8003b9a:	f7fd fd39 	bl	8001610 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8003b9e:	f7fd f9f7 	bl	8000f90 <chSchRescheduleS>
 8003ba2:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
 8003baa:	bf00      	nop
 8003bac:	20000848 	.word	0x20000848
 8003bb0:	20000858 	.word	0x20000858
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	f3af 8000 	nop.w
 8003bbc:	f3af 8000 	nop.w

08003bc0 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8003bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bc8:	f7fd fc62 	bl	8001490 <chThdSleep>
 8003bcc:	2320      	movs	r3, #32
 8003bce:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7fd fd03 	bl	80015e0 <chEvtSignalI>
  chSchRescheduleS();
 8003bda:	f7fd f9d9 	bl	8000f90 <chSchRescheduleS>
 8003bde:	2000      	movs	r0, #0
 8003be0:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	bf00      	nop
 8003be8:	f3af 8000 	nop.w
 8003bec:	f3af 8000 	nop.w

08003bf0 <mtx6_setup.lto_priv.81>:
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <mtx6_setup.lto_priv.81+0x14>)
 8003bf2:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <mtx6_setup.lto_priv.81+0x18>)
 8003bf4:	605b      	str	r3, [r3, #4]
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	6052      	str	r2, [r2, #4]
 8003bfa:	6012      	str	r2, [r2, #0]
 8003bfc:	601b      	str	r3, [r3, #0]
 8003bfe:	6099      	str	r1, [r3, #8]
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000086c 	.word	0x2000086c
 8003c08:	200008a4 	.word	0x200008a4
 8003c0c:	f3af 8000 	nop.w

08003c10 <mtx5_setup.lto_priv.79>:
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <mtx5_setup.lto_priv.79+0xc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	605b      	str	r3, [r3, #4]
 8003c16:	601b      	str	r3, [r3, #0]
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	4770      	bx	lr
 8003c1c:	2000086c 	.word	0x2000086c

08003c20 <mtx4_setup.lto_priv.77>:
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <mtx4_setup.lto_priv.77+0x14>)
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <mtx4_setup.lto_priv.77+0x18>)
 8003c24:	6052      	str	r2, [r2, #4]
 8003c26:	2100      	movs	r1, #0
 8003c28:	6012      	str	r2, [r2, #0]
 8003c2a:	6091      	str	r1, [r2, #8]
 8003c2c:	6099      	str	r1, [r3, #8]
 8003c2e:	605b      	str	r3, [r3, #4]
 8003c30:	601b      	str	r3, [r3, #0]
 8003c32:	4770      	bx	lr
 8003c34:	2000086c 	.word	0x2000086c
 8003c38:	2000085c 	.word	0x2000085c
 8003c3c:	f3af 8000 	nop.w

08003c40 <mtx1_setup.lto_priv.75>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <mtx1_setup.lto_priv.75+0xc>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	605b      	str	r3, [r3, #4]
 8003c46:	601b      	str	r3, [r3, #0]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	4770      	bx	lr
 8003c4c:	2000086c 	.word	0x2000086c

08003c50 <sem3_setup.lto_priv.72>:
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <sem3_setup.lto_priv.72+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8003c52:	2200      	movs	r2, #0
 8003c54:	605b      	str	r3, [r3, #4]
 8003c56:	601b      	str	r3, [r3, #0]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	4770      	bx	lr
 8003c5c:	200008ac 	.word	0x200008ac

08003c60 <sem2_setup.lto_priv.70>:
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <sem2_setup.lto_priv.70+0xc>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	605b      	str	r3, [r3, #4]
 8003c66:	601b      	str	r3, [r3, #0]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	4770      	bx	lr
 8003c6c:	200008ac 	.word	0x200008ac

08003c70 <sem1_setup.lto_priv.68>:
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <sem1_setup.lto_priv.68+0xc>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	605b      	str	r3, [r3, #4]
 8003c76:	601b      	str	r3, [r3, #0]
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	4770      	bx	lr
 8003c7c:	200008ac 	.word	0x200008ac

08003c80 <mtx5_execute.lto_priv.80>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8003c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003c84:	4d3b      	ldr	r5, [pc, #236]	; (8003d74 <mtx5_execute.lto_priv.80+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003c86:	69aa      	ldr	r2, [r5, #24]
 8003c88:	2320      	movs	r3, #32
 8003c8a:	6896      	ldr	r6, [r2, #8]
 8003c8c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003c90:	4c39      	ldr	r4, [pc, #228]	; (8003d78 <mtx5_execute.lto_priv.80+0xf8>)
 8003c92:	68a3      	ldr	r3, [r4, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8003c94:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d05e      	beq.n	8003d58 <mtx5_execute.lto_priv.80+0xd8>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fd f815 	bl	8000cd0 <_test_assert>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	b108      	cbz	r0, 8003cae <mtx5_execute.lto_priv.80+0x2e>
 8003caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cae:	2320      	movs	r3, #32
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	68a3      	ldr	r3, [r4, #8]
 8003cb6:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <mtx5_execute.lto_priv.80+0xf8>)
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d054      	beq.n	8003d66 <mtx5_execute.lto_priv.80+0xe6>
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f7fd f803 	bl	8000cd0 <_test_assert>
 8003cca:	4607      	mov	r7, r0
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d1ec      	bne.n	8003caa <mtx5_execute.lto_priv.80+0x2a>
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8003cd6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003d78 <mtx5_execute.lto_priv.80+0xf8>
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7fd fce0 	bl	80016a0 <chMtxUnlockS>
 8003ce0:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8003ce4:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8003ce6:	2003      	movs	r0, #3
 8003ce8:	1b09      	subs	r1, r1, r4
 8003cea:	fab1 f181 	clz	r1, r1
 8003cee:	0949      	lsrs	r1, r1, #5
 8003cf0:	f7fc ffee 	bl	8000cd0 <_test_assert>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d1d8      	bne.n	8003caa <mtx5_execute.lto_priv.80+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8003cf8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003cfc:	fab1 f181 	clz	r1, r1
 8003d00:	2004      	movs	r0, #4
 8003d02:	0949      	lsrs	r1, r1, #5
 8003d04:	f7fc ffe4 	bl	8000cd0 <_test_assert>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d1ce      	bne.n	8003caa <mtx5_execute.lto_priv.80+0x2a>
 8003d0c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	2005      	movs	r0, #5
 8003d12:	1a71      	subs	r1, r6, r1
 8003d14:	fab1 f181 	clz	r1, r1
 8003d18:	0949      	lsrs	r1, r1, #5
 8003d1a:	f7fc ffd9 	bl	8000cd0 <_test_assert>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d1c3      	bne.n	8003caa <mtx5_execute.lto_priv.80+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8003d22:	4640      	mov	r0, r8
 8003d24:	f7fd fd4c 	bl	80017c0 <chMtxLock>
  chMtxUnlockAll();
 8003d28:	f7fd fc8a 	bl	8001640 <chMtxUnlockAll>
 8003d2c:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8003d30:	2006      	movs	r0, #6
 8003d32:	ebc8 0101 	rsb	r1, r8, r1
 8003d36:	fab1 f181 	clz	r1, r1
 8003d3a:	0949      	lsrs	r1, r1, #5
 8003d3c:	f7fc ffc8 	bl	8000cd0 <_test_assert>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1b2      	bne.n	8003caa <mtx5_execute.lto_priv.80+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003d44:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003d48:	fab1 f181 	clz	r1, r1
 8003d4c:	2007      	movs	r0, #7
 8003d4e:	0949      	lsrs	r1, r1, #5
}
 8003d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003d54:	f7fc bfbc 	b.w	8000cd0 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003d58:	69ab      	ldr	r3, [r5, #24]
 8003d5a:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8003d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5e:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8003d60:	639c      	str	r4, [r3, #56]	; 0x38
 8003d62:	2101      	movs	r1, #1
 8003d64:	e799      	b.n	8003c9a <mtx5_execute.lto_priv.80+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003d66:	69ab      	ldr	r3, [r5, #24]
 8003d68:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 8003d6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d6c:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d70:	e7a5      	b.n	8003cbe <mtx5_execute.lto_priv.80+0x3e>
 8003d72:	bf00      	nop
 8003d74:	20000b78 	.word	0x20000b78
 8003d78:	2000086c 	.word	0x2000086c
 8003d7c:	f3af 8000 	nop.w

08003d80 <mtx4_execute.lto_priv.78>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8003d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003d84:	4d88      	ldr	r5, [pc, #544]	; (8003fa8 <mtx4_execute.lto_priv.78+0x228>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8003d86:	4a89      	ldr	r2, [pc, #548]	; (8003fac <mtx4_execute.lto_priv.78+0x22c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003d88:	69ab      	ldr	r3, [r5, #24]
 8003d8a:	4889      	ldr	r0, [pc, #548]	; (8003fb0 <mtx4_execute.lto_priv.78+0x230>)
 8003d8c:	689c      	ldr	r4, [r3, #8]
 8003d8e:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <mtx4_execute.lto_priv.78+0x234>)
 8003d90:	4e89      	ldr	r6, [pc, #548]	; (8003fb8 <mtx4_execute.lto_priv.78+0x238>)
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8003d92:	b082      	sub	sp, #8
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8003d94:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003d9c:	463a      	mov	r2, r7
 8003d9e:	f7fd f99f 	bl	80010e0 <chThdCreateStatic>
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8003da2:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8003da6:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <mtx4_execute.lto_priv.78+0x23c>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8003da8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8003daa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003dae:	4642      	mov	r2, r8
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4883      	ldr	r0, [pc, #524]	; (8003fc0 <mtx4_execute.lto_priv.78+0x240>)
 8003db4:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <mtx4_execute.lto_priv.78+0x244>)
 8003db6:	f7fd f993 	bl	80010e0 <chThdCreateStatic>
 8003dba:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8003dbc:	4882      	ldr	r0, [pc, #520]	; (8003fc8 <mtx4_execute.lto_priv.78+0x248>)
 8003dbe:	f7fd fcff 	bl	80017c0 <chMtxLock>
 8003dc2:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8003dc4:	6899      	ldr	r1, [r3, #8]
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	1a61      	subs	r1, r4, r1
 8003dca:	fab1 f181 	clz	r1, r1
 8003dce:	0949      	lsrs	r1, r1, #5
 8003dd0:	f7fc ff7e 	bl	8000cd0 <_test_assert>
 8003dd4:	b110      	cbz	r0, 8003ddc <mtx4_execute.lto_priv.78+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8003dd6:	b002      	add	sp, #8
 8003dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8003ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de0:	f7fd fb56 	bl	8001490 <chThdSleep>
 8003de4:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	2002      	movs	r0, #2
 8003dea:	1a79      	subs	r1, r7, r1
 8003dec:	fab1 f181 	clz	r1, r1
 8003df0:	0949      	lsrs	r1, r1, #5
 8003df2:	f7fc ff6d 	bl	8000cd0 <_test_assert>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d1ed      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chMtxLock(&m1);
 8003dfa:	4874      	ldr	r0, [pc, #464]	; (8003fcc <mtx4_execute.lto_priv.78+0x24c>)
 8003dfc:	f7fd fce0 	bl	80017c0 <chMtxLock>
 8003e00:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	2003      	movs	r0, #3
 8003e06:	1a79      	subs	r1, r7, r1
 8003e08:	fab1 f181 	clz	r1, r1
 8003e0c:	0949      	lsrs	r1, r1, #5
 8003e0e:	f7fc ff5f 	bl	8000cd0 <_test_assert>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1df      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chThdSleepMilliseconds(100);
 8003e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1a:	f7fd fb39 	bl	8001490 <chThdSleep>
 8003e1e:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	2004      	movs	r0, #4
 8003e24:	ebc1 0108 	rsb	r1, r1, r8
 8003e28:	fab1 f181 	clz	r1, r1
 8003e2c:	0949      	lsrs	r1, r1, #5
 8003e2e:	f7fc ff4f 	bl	8000cd0 <_test_assert>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d1cf      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chMtxUnlock(&m1);
 8003e36:	4865      	ldr	r0, [pc, #404]	; (8003fcc <mtx4_execute.lto_priv.78+0x24c>)
 8003e38:	f7fd f902 	bl	8001040 <chMtxUnlock>
 8003e3c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	2005      	movs	r0, #5
 8003e42:	1a79      	subs	r1, r7, r1
 8003e44:	fab1 f181 	clz	r1, r1
 8003e48:	0949      	lsrs	r1, r1, #5
 8003e4a:	f7fc ff41 	bl	8000cd0 <_test_assert>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1c1      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chThdSleepMilliseconds(100);
 8003e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e56:	f7fd fb1b 	bl	8001490 <chThdSleep>
 8003e5a:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	2006      	movs	r0, #6
 8003e60:	1a79      	subs	r1, r7, r1
 8003e62:	fab1 f181 	clz	r1, r1
 8003e66:	0949      	lsrs	r1, r1, #5
 8003e68:	f7fc ff32 	bl	8000cd0 <_test_assert>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1b2      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chMtxUnlockAll();
 8003e70:	f7fd fbe6 	bl	8001640 <chMtxUnlockAll>
 8003e74:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8003e76:	6899      	ldr	r1, [r3, #8]
 8003e78:	2007      	movs	r0, #7
 8003e7a:	1a61      	subs	r1, r4, r1
 8003e7c:	fab1 f181 	clz	r1, r1
 8003e80:	0949      	lsrs	r1, r1, #5
 8003e82:	f7fc ff25 	bl	8000cd0 <_test_assert>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d1a5      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  test_wait_threads();
 8003e8a:	f7fd fd71 	bl	8001970 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <mtx4_execute.lto_priv.78+0x250>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <mtx4_execute.lto_priv.78+0x234>)
 8003e98:	4845      	ldr	r0, [pc, #276]	; (8003fb0 <mtx4_execute.lto_priv.78+0x230>)
 8003e9a:	463a      	mov	r2, r7
 8003e9c:	f7fd f920 	bl	80010e0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <mtx4_execute.lto_priv.78+0x254>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8003ea2:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8003ea4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4642      	mov	r2, r8
 8003eac:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <mtx4_execute.lto_priv.78+0x244>)
 8003eae:	4844      	ldr	r0, [pc, #272]	; (8003fc0 <mtx4_execute.lto_priv.78+0x240>)
 8003eb0:	f7fd f916 	bl	80010e0 <chThdCreateStatic>
 8003eb4:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8003eb6:	4844      	ldr	r0, [pc, #272]	; (8003fc8 <mtx4_execute.lto_priv.78+0x248>)
 8003eb8:	f7fd fc82 	bl	80017c0 <chMtxLock>
 8003ebc:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	2008      	movs	r0, #8
 8003ec2:	1a61      	subs	r1, r4, r1
 8003ec4:	fab1 f181 	clz	r1, r1
 8003ec8:	0949      	lsrs	r1, r1, #5
 8003eca:	f7fc ff01 	bl	8000cd0 <_test_assert>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d181      	bne.n	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chThdSleepMilliseconds(100);
 8003ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ed6:	f7fd fadb 	bl	8001490 <chThdSleep>
 8003eda:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	1a7b      	subs	r3, r7, r1
 8003ee0:	4259      	negs	r1, r3
 8003ee2:	4159      	adcs	r1, r3
 8003ee4:	2009      	movs	r0, #9
 8003ee6:	f7fc fef3 	bl	8000cd0 <_test_assert>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	f47f af73 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chMtxLock(&m1);
 8003ef0:	4836      	ldr	r0, [pc, #216]	; (8003fcc <mtx4_execute.lto_priv.78+0x24c>)
 8003ef2:	f7fd fc65 	bl	80017c0 <chMtxLock>
 8003ef6:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8003ef8:	6899      	ldr	r1, [r3, #8]
 8003efa:	ebc1 0c07 	rsb	ip, r1, r7
 8003efe:	f1dc 0100 	rsbs	r1, ip, #0
 8003f02:	eb41 010c 	adc.w	r1, r1, ip
 8003f06:	200a      	movs	r0, #10
 8003f08:	f7fc fee2 	bl	8000cd0 <_test_assert>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f47f af62 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chThdSleepMilliseconds(100);
 8003f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f16:	f7fd fabb 	bl	8001490 <chThdSleep>
 8003f1a:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	ebc1 0e08 	rsb	lr, r1, r8
 8003f22:	f1de 0100 	rsbs	r1, lr, #0
 8003f26:	f04f 000b 	mov.w	r0, #11
 8003f2a:	eb41 010e 	adc.w	r1, r1, lr
 8003f2e:	f7fc fecf 	bl	8000cd0 <_test_assert>
 8003f32:	4606      	mov	r6, r0
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f47f af4e 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8003f40:	4822      	ldr	r0, [pc, #136]	; (8003fcc <mtx4_execute.lto_priv.78+0x24c>)
 8003f42:	f7fd fbad 	bl	80016a0 <chMtxUnlockS>
  chSchRescheduleS();
 8003f46:	f7fd f823 	bl	8000f90 <chSchRescheduleS>
 8003f4a:	f386 8811 	msr	BASEPRI, r6
 8003f4e:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	1a7e      	subs	r6, r7, r1
 8003f54:	4271      	negs	r1, r6
 8003f56:	4171      	adcs	r1, r6
 8003f58:	200c      	movs	r0, #12
 8003f5a:	f7fc feb9 	bl	8000cd0 <_test_assert>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	f47f af39 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chThdSleepMilliseconds(100);
 8003f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f68:	f7fd fa92 	bl	8001490 <chThdSleep>
 8003f6c:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	1a7a      	subs	r2, r7, r1
 8003f72:	4251      	negs	r1, r2
 8003f74:	4151      	adcs	r1, r2
 8003f76:	200d      	movs	r0, #13
 8003f78:	f7fc feaa 	bl	8000cd0 <_test_assert>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	f47f af2a 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  chMtxUnlockAll();
 8003f82:	f7fd fb5d 	bl	8001640 <chMtxUnlockAll>
 8003f86:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	1a63      	subs	r3, r4, r1
 8003f8c:	4259      	negs	r1, r3
 8003f8e:	4159      	adcs	r1, r3
 8003f90:	200e      	movs	r0, #14
 8003f92:	f7fc fe9d 	bl	8000cd0 <_test_assert>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f47f af1d 	bne.w	8003dd6 <mtx4_execute.lto_priv.78+0x56>
  test_wait_threads();
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8003fa2:	f7fd bce5 	b.w	8001970 <test_wait_threads>
 8003fa6:	bf00      	nop
 8003fa8:	20000b78 	.word	0x20000b78
 8003fac:	08005934 	.word	0x08005934
 8003fb0:	20000d10 	.word	0x20000d10
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	20000a40 	.word	0x20000a40
 8003fbc:	08005930 	.word	0x08005930
 8003fc0:	20000e58 	.word	0x20000e58
 8003fc4:	08004001 	.word	0x08004001
 8003fc8:	2000085c 	.word	0x2000085c
 8003fcc:	2000086c 	.word	0x2000086c
 8003fd0:	0800592c 	.word	0x0800592c
 8003fd4:	08005938 	.word	0x08005938
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	f3af 8000 	nop.w

08003fe0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 8003fe0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8003fe2:	4c06      	ldr	r4, [pc, #24]	; (8003ffc <thread4a+0x1c>)
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8003fe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fe8:	f7fd fa52 	bl	8001490 <chThdSleep>
  chMtxLock(&m2);
 8003fec:	4620      	mov	r0, r4
 8003fee:	f7fd fbe7 	bl	80017c0 <chMtxLock>
  chMtxUnlock(&m2);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7fd f824 	bl	8001040 <chMtxUnlock>
  return 0;
}
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	2000085c 	.word	0x2000085c

08004000 <thread4b>:

static msg_t thread4b(void *p) {
 8004000:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8004002:	4c06      	ldr	r4, [pc, #24]	; (800401c <thread4b+0x1c>)
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8004004:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004008:	f7fd fa42 	bl	8001490 <chThdSleep>
  chMtxLock(&m1);
 800400c:	4620      	mov	r0, r4
 800400e:	f7fd fbd7 	bl	80017c0 <chMtxLock>
  chMtxUnlock(&m1);
 8004012:	4620      	mov	r0, r4
 8004014:	f7fd f814 	bl	8001040 <chMtxUnlock>
  return 0;
}
 8004018:	2000      	movs	r0, #0
 800401a:	bd10      	pop	{r4, pc}
 800401c:	2000086c 	.word	0x2000086c

08004020 <mtx1_execute.lto_priv.76>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 8004020:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004022:	4e29      	ldr	r6, [pc, #164]	; (80040c8 <mtx1_execute.lto_priv.76+0xa8>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8004024:	4829      	ldr	r0, [pc, #164]	; (80040cc <mtx1_execute.lto_priv.76+0xac>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004026:	69b3      	ldr	r3, [r6, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8004028:	4d29      	ldr	r5, [pc, #164]	; (80040d0 <mtx1_execute.lto_priv.76+0xb0>)
 800402a:	689c      	ldr	r4, [r3, #8]
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 800402c:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 800402e:	f7fd fbc7 	bl	80017c0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8004032:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <mtx1_execute.lto_priv.76+0xb4>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	1c62      	adds	r2, r4, #1
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <mtx1_execute.lto_priv.76+0xb8>)
 800403a:	4828      	ldr	r0, [pc, #160]	; (80040dc <mtx1_execute.lto_priv.76+0xbc>)
 800403c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004040:	f7fd f84e 	bl	80010e0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <mtx1_execute.lto_priv.76+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8004046:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8004048:	1ca2      	adds	r2, r4, #2
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <mtx1_execute.lto_priv.76+0xb8>)
 8004052:	4824      	ldr	r0, [pc, #144]	; (80040e4 <mtx1_execute.lto_priv.76+0xc4>)
 8004054:	f7fd f844 	bl	80010e0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <mtx1_execute.lto_priv.76+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800405a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800405c:	1ce2      	adds	r2, r4, #3
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <mtx1_execute.lto_priv.76+0xb8>)
 8004066:	4821      	ldr	r0, [pc, #132]	; (80040ec <mtx1_execute.lto_priv.76+0xcc>)
 8004068:	f7fd f83a 	bl	80010e0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800406c:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <mtx1_execute.lto_priv.76+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800406e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8004070:	1d22      	adds	r2, r4, #4
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004078:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <mtx1_execute.lto_priv.76+0xb8>)
 800407a:	481e      	ldr	r0, [pc, #120]	; (80040f4 <mtx1_execute.lto_priv.76+0xd4>)
 800407c:	f7fd f830 	bl	80010e0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <mtx1_execute.lto_priv.76+0xd8>)
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8004082:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8004084:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004088:	1d62      	adds	r2, r4, #5
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	481b      	ldr	r0, [pc, #108]	; (80040fc <mtx1_execute.lto_priv.76+0xdc>)
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <mtx1_execute.lto_priv.76+0xb8>)
 8004090:	f7fd f826 	bl	80010e0 <chThdCreateStatic>
 8004094:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8004096:	480d      	ldr	r0, [pc, #52]	; (80040cc <mtx1_execute.lto_priv.76+0xac>)
 8004098:	f7fc ffd2 	bl	8001040 <chMtxUnlock>
  test_wait_threads();
 800409c:	f7fd fc68 	bl	8001970 <test_wait_threads>
 80040a0:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80040a2:	6899      	ldr	r1, [r3, #8]
 80040a4:	2001      	movs	r0, #1
 80040a6:	1a61      	subs	r1, r4, r1
 80040a8:	fab1 f181 	clz	r1, r1
 80040ac:	0949      	lsrs	r1, r1, #5
 80040ae:	f7fc fe0f 	bl	8000cd0 <_test_assert>
 80040b2:	b108      	cbz	r0, 80040b8 <mtx1_execute.lto_priv.76+0x98>
  test_assert_sequence(2, "ABCDE");
}
 80040b4:	b002      	add	sp, #8
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80040b8:	4911      	ldr	r1, [pc, #68]	; (8004100 <mtx1_execute.lto_priv.76+0xe0>)
 80040ba:	2002      	movs	r0, #2
}
 80040bc:	b002      	add	sp, #8
 80040be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80040c2:	f7fc bddd 	b.w	8000c80 <_test_assert_sequence>
 80040c6:	bf00      	nop
 80040c8:	20000b78 	.word	0x20000b78
 80040cc:	2000086c 	.word	0x2000086c
 80040d0:	20000a40 	.word	0x20000a40
 80040d4:	08005940 	.word	0x08005940
 80040d8:	08004111 	.word	0x08004111
 80040dc:	20000d10 	.word	0x20000d10
 80040e0:	0800592c 	.word	0x0800592c
 80040e4:	20000e58 	.word	0x20000e58
 80040e8:	08005938 	.word	0x08005938
 80040ec:	20000fa0 	.word	0x20000fa0
 80040f0:	08005934 	.word	0x08005934
 80040f4:	200010e8 	.word	0x200010e8
 80040f8:	08005930 	.word	0x08005930
 80040fc:	20001230 	.word	0x20001230
 8004100:	0800593c 	.word	0x0800593c
 8004104:	f3af 8000 	nop.w
 8004108:	f3af 8000 	nop.w
 800410c:	f3af 8000 	nop.w

08004110 <thread1.lto_priv.137>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8004110:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8004112:	4c06      	ldr	r4, [pc, #24]	; (800412c <thread1.lto_priv.137+0x1c>)
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8004114:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8004116:	4620      	mov	r0, r4
 8004118:	f7fd fb52 	bl	80017c0 <chMtxLock>
  test_emit_token(*(char *)p);
 800411c:	7828      	ldrb	r0, [r5, #0]
 800411e:	f7fc fdef 	bl	8000d00 <test_emit_token>
  chMtxUnlock(&m1);
 8004122:	4620      	mov	r0, r4
 8004124:	f7fc ff8c 	bl	8001040 <chMtxUnlock>
  return 0;
}
 8004128:	2000      	movs	r0, #0
 800412a:	bd38      	pop	{r3, r4, r5, pc}
 800412c:	2000086c 	.word	0x2000086c

08004130 <thread1.lto_priv.136>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8004130:	b510      	push	{r4, lr}
 8004132:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8004134:	4803      	ldr	r0, [pc, #12]	; (8004144 <thread1.lto_priv.136+0x14>)
 8004136:	f7fd f84b 	bl	80011d0 <chSemWait>
  test_emit_token(*(char *)p);
 800413a:	7820      	ldrb	r0, [r4, #0]
 800413c:	f7fc fde0 	bl	8000d00 <test_emit_token>
  return 0;
}
 8004140:	2000      	movs	r0, #0
 8004142:	bd10      	pop	{r4, pc}
 8004144:	200008ac 	.word	0x200008ac
 8004148:	f3af 8000 	nop.w
 800414c:	f3af 8000 	nop.w

08004150 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 8004150:	b508      	push	{r3, lr}
 8004152:	2220      	movs	r2, #32
 8004154:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
 8004158:	6883      	ldr	r3, [r0, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	dd05      	ble.n	800416a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800415e:	f7fc ff17 	bl	8000f90 <chSchRescheduleS>
 8004162:	2000      	movs	r0, #0
 8004164:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 8004168:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
    chSemSignalI(&bsp->bs_sem);
 800416a:	f7fd fd71 	bl	8001c50 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800416e:	f7fc ff0f 	bl	8000f90 <chSchRescheduleS>
 8004172:	2000      	movs	r0, #0
 8004174:	f380 8811 	msr	BASEPRI, r0
 8004178:	bd08      	pop	{r3, pc}
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w

08004180 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 8004180:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8004182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004186:	f7fd f983 	bl	8001490 <chThdSleep>
 800418a:	2320      	movs	r3, #32
 800418c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8004190:	4804      	ldr	r0, [pc, #16]	; (80041a4 <thread2+0x24>)
 8004192:	f7fd fd5d 	bl	8001c50 <chSemSignalI>
  chSchRescheduleS();
 8004196:	f7fc fefb 	bl	8000f90 <chSchRescheduleS>
 800419a:	2000      	movs	r0, #0
 800419c:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 80041a0:	bd08      	pop	{r3, pc}
 80041a2:	bf00      	nop
 80041a4:	200008ac 	.word	0x200008ac
 80041a8:	f3af 8000 	nop.w
 80041ac:	f3af 8000 	nop.w

080041b0 <sem4_execute.lto_priv.74>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80041b4:	ad03      	add	r5, sp, #12
 80041b6:	2400      	movs	r4, #0
 80041b8:	9504      	str	r5, [sp, #16]
 80041ba:	9503      	str	r5, [sp, #12]
 80041bc:	9405      	str	r4, [sp, #20]
 80041be:	2620      	movs	r6, #32
 80041c0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80041c4:	4628      	mov	r0, r5
 80041c6:	4621      	mov	r1, r4
 80041c8:	f7fd fd52 	bl	8001c70 <chSemResetI>
  chSchRescheduleS();
 80041cc:	f7fc fee0 	bl	8000f90 <chSchRescheduleS>
 80041d0:	f384 8811 	msr	BASEPRI, r4
 80041d4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 80041d8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80041da:	42a1      	cmp	r1, r4
 80041dc:	f04f 0001 	mov.w	r0, #1
 80041e0:	bfcc      	ite	gt
 80041e2:	2100      	movgt	r1, #0
 80041e4:	2101      	movle	r1, #1
 80041e6:	f7fc fd73 	bl	8000cd0 <_test_assert>
 80041ea:	4607      	mov	r7, r0
 80041ec:	b118      	cbz	r0, 80041f6 <sem4_execute.lto_priv.74+0x46>
 80041ee:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 80041f2:	b007      	add	sp, #28
 80041f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <sem4_execute.lto_priv.74+0x150>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80041fc:	4841      	ldr	r0, [pc, #260]	; (8004304 <sem4_execute.lto_priv.74+0x154>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <sem4_execute.lto_priv.74+0x158>)
 8004202:	6892      	ldr	r2, [r2, #8]
 8004204:	9500      	str	r5, [sp, #0]
 8004206:	3a01      	subs	r2, #1
 8004208:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800420c:	f7fc ff68 	bl	80010e0 <chThdCreateStatic>
 8004210:	4b3e      	ldr	r3, [pc, #248]	; (800430c <sem4_execute.lto_priv.74+0x15c>)
 8004212:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8004214:	4628      	mov	r0, r5
 8004216:	f7fc ffdb 	bl	80011d0 <chSemWait>
 800421a:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 800421e:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8004220:	2900      	cmp	r1, #0
 8004222:	bfcc      	ite	gt
 8004224:	2100      	movgt	r1, #0
 8004226:	2101      	movle	r1, #1
 8004228:	2002      	movs	r0, #2
 800422a:	f7fc fd51 	bl	8000cd0 <_test_assert>
 800422e:	b118      	cbz	r0, 8004238 <sem4_execute.lto_priv.74+0x88>
 8004230:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8004234:	b007      	add	sp, #28
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004238:	f380 8811 	msr	BASEPRI, r0
 800423c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
 8004240:	9b05      	ldr	r3, [sp, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	dd24      	ble.n	8004290 <sem4_execute.lto_priv.74+0xe0>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004246:	f7fc fea3 	bl	8000f90 <chSchRescheduleS>
 800424a:	2400      	movs	r4, #0
 800424c:	f384 8811 	msr	BASEPRI, r4
 8004250:	2720      	movs	r7, #32
 8004252:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8004256:	9905      	ldr	r1, [sp, #20]
 8004258:	42a1      	cmp	r1, r4
 800425a:	f04f 0003 	mov.w	r0, #3
 800425e:	bfd4      	ite	le
 8004260:	2100      	movle	r1, #0
 8004262:	2101      	movgt	r1, #1
 8004264:	f7fc fd34 	bl	8000cd0 <_test_assert>
 8004268:	4606      	mov	r6, r0
 800426a:	2800      	cmp	r0, #0
 800426c:	d1bf      	bne.n	80041ee <sem4_execute.lto_priv.74+0x3e>
 800426e:	f380 8811 	msr	BASEPRI, r0
 8004272:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8004276:	9905      	ldr	r1, [sp, #20]
 8004278:	2004      	movs	r0, #4
 800427a:	f1a1 0101 	sub.w	r1, r1, #1
 800427e:	fab1 f181 	clz	r1, r1
 8004282:	0949      	lsrs	r1, r1, #5
 8004284:	f7fc fd24 	bl	8000cd0 <_test_assert>
 8004288:	b130      	cbz	r0, 8004298 <sem4_execute.lto_priv.74+0xe8>
 800428a:	f386 8811 	msr	BASEPRI, r6
 800428e:	e7b0      	b.n	80041f2 <sem4_execute.lto_priv.74+0x42>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
    chSemSignalI(&bsp->bs_sem);
 8004290:	4628      	mov	r0, r5
 8004292:	f7fd fcdd 	bl	8001c50 <chSemSignalI>
 8004296:	e7d6      	b.n	8004246 <sem4_execute.lto_priv.74+0x96>
 8004298:	f380 8811 	msr	BASEPRI, r0
 800429c:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
 80042a0:	9b05      	ldr	r3, [sp, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dd24      	ble.n	80042f0 <sem4_execute.lto_priv.74+0x140>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80042a6:	f7fc fe73 	bl	8000f90 <chSchRescheduleS>
 80042aa:	2400      	movs	r4, #0
 80042ac:	f384 8811 	msr	BASEPRI, r4
 80042b0:	2620      	movs	r6, #32
 80042b2:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80042b6:	9905      	ldr	r1, [sp, #20]
 80042b8:	42a1      	cmp	r1, r4
 80042ba:	f04f 0003 	mov.w	r0, #3
 80042be:	bfd4      	ite	le
 80042c0:	2100      	movle	r1, #0
 80042c2:	2101      	movgt	r1, #1
 80042c4:	f7fc fd04 	bl	8000cd0 <_test_assert>
 80042c8:	4605      	mov	r5, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d18f      	bne.n	80041ee <sem4_execute.lto_priv.74+0x3e>
 80042ce:	f380 8811 	msr	BASEPRI, r0
 80042d2:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80042d6:	9905      	ldr	r1, [sp, #20]
 80042d8:	2005      	movs	r0, #5
 80042da:	f1a1 0101 	sub.w	r1, r1, #1
 80042de:	fab1 f181 	clz	r1, r1
 80042e2:	0949      	lsrs	r1, r1, #5
 80042e4:	f7fc fcf4 	bl	8000cd0 <_test_assert>
 80042e8:	b130      	cbz	r0, 80042f8 <sem4_execute.lto_priv.74+0x148>
 80042ea:	f385 8811 	msr	BASEPRI, r5
 80042ee:	e780      	b.n	80041f2 <sem4_execute.lto_priv.74+0x42>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1) {
    chSemSignalI(&bsp->bs_sem);
 80042f0:	4628      	mov	r0, r5
 80042f2:	f7fd fcad 	bl	8001c50 <chSemSignalI>
 80042f6:	e7d6      	b.n	80042a6 <sem4_execute.lto_priv.74+0xf6>
 80042f8:	f380 8811 	msr	BASEPRI, r0
 80042fc:	e779      	b.n	80041f2 <sem4_execute.lto_priv.74+0x42>
 80042fe:	bf00      	nop
 8004300:	20000b78 	.word	0x20000b78
 8004304:	20000d10 	.word	0x20000d10
 8004308:	08004151 	.word	0x08004151
 800430c:	20000a40 	.word	0x20000a40

08004310 <sem3_execute.lto_priv.73>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8004310:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <sem3_execute.lto_priv.73+0x7c>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004314:	481e      	ldr	r0, [pc, #120]	; (8004390 <sem3_execute.lto_priv.73+0x80>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <sem3_execute.lto_priv.73+0x84>)
 800431a:	6892      	ldr	r2, [r2, #8]
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800431c:	4c1e      	ldr	r4, [pc, #120]	; (8004398 <sem3_execute.lto_priv.73+0x88>)
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 800431e:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004320:	2100      	movs	r1, #0
 8004322:	3201      	adds	r2, #1
 8004324:	9100      	str	r1, [sp, #0]
 8004326:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800432a:	f7fc fed9 	bl	80010e0 <chThdCreateStatic>
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <sem3_execute.lto_priv.73+0x8c>)
 8004330:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8004332:	f001 f945 	bl	80055c0 <chSemSignalWait.constprop.46>
 8004336:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8004338:	2001      	movs	r0, #1
 800433a:	1b09      	subs	r1, r1, r4
 800433c:	fab1 f181 	clz	r1, r1
 8004340:	0949      	lsrs	r1, r1, #5
 8004342:	f7fc fcc5 	bl	8000cd0 <_test_assert>
 8004346:	b108      	cbz	r0, 800434c <sem3_execute.lto_priv.73+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8004348:	b002      	add	sp, #8
 800434a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800434c:	68a1      	ldr	r1, [r4, #8]
 800434e:	fab1 f181 	clz	r1, r1
 8004352:	2002      	movs	r0, #2
 8004354:	0949      	lsrs	r1, r1, #5
 8004356:	f7fc fcbb 	bl	8000cd0 <_test_assert>
 800435a:	2800      	cmp	r0, #0
 800435c:	d1f4      	bne.n	8004348 <sem3_execute.lto_priv.73+0x38>

  chSemSignalWait(&sem1, &sem1);
 800435e:	f001 f92f 	bl	80055c0 <chSemSignalWait.constprop.46>
 8004362:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8004364:	2003      	movs	r0, #3
 8004366:	1b09      	subs	r1, r1, r4
 8004368:	fab1 f181 	clz	r1, r1
 800436c:	0949      	lsrs	r1, r1, #5
 800436e:	f7fc fcaf 	bl	8000cd0 <_test_assert>
 8004372:	2800      	cmp	r0, #0
 8004374:	d1e8      	bne.n	8004348 <sem3_execute.lto_priv.73+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8004376:	68a1      	ldr	r1, [r4, #8]
 8004378:	fab1 f181 	clz	r1, r1
 800437c:	2004      	movs	r0, #4
 800437e:	0949      	lsrs	r1, r1, #5
}
 8004380:	b002      	add	sp, #8
 8004382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8004386:	f7fc bca3 	b.w	8000cd0 <_test_assert>
 800438a:	bf00      	nop
 800438c:	20000b78 	.word	0x20000b78
 8004390:	20000d10 	.word	0x20000d10
 8004394:	080043a1 	.word	0x080043a1
 8004398:	200008ac 	.word	0x200008ac
 800439c:	20000a40 	.word	0x20000a40

080043a0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 80043a0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80043a2:	4c04      	ldr	r4, [pc, #16]	; (80043b4 <thread3+0x14>)
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fc ff13 	bl	80011d0 <chSemWait>
  chSemSignal(&sem1);
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fc fe78 	bl	80010a0 <chSemSignal>
  return 0;
}
 80043b0:	2000      	movs	r0, #0
 80043b2:	bd10      	pop	{r4, pc}
 80043b4:	200008ac 	.word	0x200008ac
 80043b8:	f3af 8000 	nop.w
 80043bc:	f3af 8000 	nop.w

080043c0 <sem2_execute.lto_priv.71>:
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	2520      	movs	r5, #32
 80043c4:	b083      	sub	sp, #12
 80043c6:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 80043ca:	4c54      	ldr	r4, [pc, #336]	; (800451c <sem2_execute.lto_priv.71+0x15c>)
 80043cc:	2100      	movs	r1, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7fc ff4e 	bl	8001270 <chSemWaitTimeoutS>
 80043d4:	2300      	movs	r3, #0
 80043d6:	4601      	mov	r1, r0
 80043d8:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80043dc:	2001      	movs	r0, #1
 80043de:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80043e2:	fab1 f181 	clz	r1, r1
 80043e6:	0949      	lsrs	r1, r1, #5
 80043e8:	f7fc fc72 	bl	8000cd0 <_test_assert>
 80043ec:	b108      	cbz	r0, 80043f2 <sem2_execute.lto_priv.71+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80043ee:	b003      	add	sp, #12
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80043f4:	2002      	movs	r0, #2
 80043f6:	1b09      	subs	r1, r1, r4
 80043f8:	fab1 f181 	clz	r1, r1
 80043fc:	0949      	lsrs	r1, r1, #5
 80043fe:	f7fc fc67 	bl	8000cd0 <_test_assert>
 8004402:	2800      	cmp	r0, #0
 8004404:	d1f3      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8004406:	68a1      	ldr	r1, [r4, #8]
 8004408:	fab1 f181 	clz	r1, r1
 800440c:	2003      	movs	r0, #3
 800440e:	0949      	lsrs	r1, r1, #5
 8004410:	f7fc fc5e 	bl	8000cd0 <_test_assert>
 8004414:	4606      	mov	r6, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d1e9      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <sem2_execute.lto_priv.71+0x160>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800441c:	4841      	ldr	r0, [pc, #260]	; (8004524 <sem2_execute.lto_priv.71+0x164>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	4b41      	ldr	r3, [pc, #260]	; (8004528 <sem2_execute.lto_priv.71+0x168>)
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	9600      	str	r6, [sp, #0]
 8004426:	3a01      	subs	r2, #1
 8004428:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800442c:	f7fc fe58 	bl	80010e0 <chThdCreateStatic>
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <sem2_execute.lto_priv.71+0x16c>)
 8004432:	6018      	str	r0, [r3, #0]
 8004434:	f385 8811 	msr	BASEPRI, r5
 8004438:	f241 3188 	movw	r1, #5000	; 0x1388
 800443c:	4620      	mov	r0, r4
 800443e:	f7fc ff17 	bl	8001270 <chSemWaitTimeoutS>
 8004442:	4607      	mov	r7, r0
 8004444:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8004448:	f7fd fa92 	bl	8001970 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 800444c:	fab7 f187 	clz	r1, r7
 8004450:	2004      	movs	r0, #4
 8004452:	0949      	lsrs	r1, r1, #5
 8004454:	f7fc fc3c 	bl	8000cd0 <_test_assert>
 8004458:	2800      	cmp	r0, #0
 800445a:	d1c8      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
 800445c:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 800445e:	2005      	movs	r0, #5
 8004460:	1b09      	subs	r1, r1, r4
 8004462:	fab1 f181 	clz	r1, r1
 8004466:	0949      	lsrs	r1, r1, #5
 8004468:	f7fc fc32 	bl	8000cd0 <_test_assert>
 800446c:	2800      	cmp	r0, #0
 800446e:	d1be      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8004470:	68a1      	ldr	r1, [r4, #8]
 8004472:	fab1 f181 	clz	r1, r1
 8004476:	2006      	movs	r0, #6
 8004478:	0949      	lsrs	r1, r1, #5
 800447a:	f7fc fc29 	bl	8000cd0 <_test_assert>
 800447e:	4606      	mov	r6, r0
 8004480:	2800      	cmp	r0, #0
 8004482:	d1b4      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8004484:	f7fd f814 	bl	80014b0 <test_wait_tick>
 8004488:	f385 8811 	msr	BASEPRI, r5
 800448c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004490:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8004492:	f386 8811 	msr	BASEPRI, r6
 8004496:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8004498:	4630      	mov	r0, r6
 800449a:	f7fc fc31 	bl	8000d00 <test_emit_token>
 800449e:	f385 8811 	msr	BASEPRI, r5
 80044a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80044a6:	481d      	ldr	r0, [pc, #116]	; (800451c <sem2_execute.lto_priv.71+0x15c>)
 80044a8:	f7fc fee2 	bl	8001270 <chSemWaitTimeoutS>
 80044ac:	2300      	movs	r3, #0
 80044ae:	4601      	mov	r1, r0
 80044b0:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 80044b4:	2007      	movs	r0, #7
 80044b6:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80044ba:	fab1 f181 	clz	r1, r1
 80044be:	0949      	lsrs	r1, r1, #5
 80044c0:	f7fc fc06 	bl	8000cd0 <_test_assert>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d192      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
 80044c8:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80044ca:	2008      	movs	r0, #8
 80044cc:	1b09      	subs	r1, r1, r4
 80044ce:	fab1 f181 	clz	r1, r1
 80044d2:	0949      	lsrs	r1, r1, #5
 80044d4:	f7fc fbfc 	bl	8000cd0 <_test_assert>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d188      	bne.n	80043ee <sem2_execute.lto_priv.71+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80044dc:	68a1      	ldr	r1, [r4, #8]
 80044de:	fab1 f181 	clz	r1, r1
 80044e2:	2009      	movs	r0, #9
 80044e4:	0949      	lsrs	r1, r1, #5
 80044e6:	f7fc fbf3 	bl	8000cd0 <_test_assert>
 80044ea:	3601      	adds	r6, #1
 80044ec:	b2f6      	uxtb	r6, r6
 80044ee:	2800      	cmp	r0, #0
 80044f0:	f47f af7d 	bne.w	80043ee <sem2_execute.lto_priv.71+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80044f4:	2e46      	cmp	r6, #70	; 0x46
 80044f6:	d1cf      	bne.n	8004498 <sem2_execute.lto_priv.71+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80044f8:	200a      	movs	r0, #10
 80044fa:	490d      	ldr	r1, [pc, #52]	; (8004530 <sem2_execute.lto_priv.71+0x170>)
 80044fc:	f7fc fbc0 	bl	8000c80 <_test_assert_sequence>
 8004500:	2800      	cmp	r0, #0
 8004502:	f47f af74 	bne.w	80043ee <sem2_execute.lto_priv.71+0x2e>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8004506:	200b      	movs	r0, #11
 8004508:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 800450c:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
}
 8004510:	b003      	add	sp, #12
 8004512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8004516:	f7fc bb93 	b.w	8000c40 <_test_assert_time_window>
 800451a:	bf00      	nop
 800451c:	200008ac 	.word	0x200008ac
 8004520:	20000b78 	.word	0x20000b78
 8004524:	20000d10 	.word	0x20000d10
 8004528:	08004181 	.word	0x08004181
 800452c:	20000a40 	.word	0x20000a40
 8004530:	0800593c 	.word	0x0800593c
 8004534:	f3af 8000 	nop.w
 8004538:	f3af 8000 	nop.w
 800453c:	f3af 8000 	nop.w

08004540 <sem1_execute.lto_priv.69>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8004540:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004542:	4d4b      	ldr	r5, [pc, #300]	; (8004670 <sem1_execute.lto_priv.69+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004544:	4f4b      	ldr	r7, [pc, #300]	; (8004674 <sem1_execute.lto_priv.69+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004546:	69ab      	ldr	r3, [r5, #24]
 8004548:	484b      	ldr	r0, [pc, #300]	; (8004678 <sem1_execute.lto_priv.69+0x138>)
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b4b      	ldr	r3, [pc, #300]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 800454e:	4c4c      	ldr	r4, [pc, #304]	; (8004680 <sem1_execute.lto_priv.69+0x140>)
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8004550:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004552:	3205      	adds	r2, #5
 8004554:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004558:	9700      	str	r7, [sp, #0]
 800455a:	f7fc fdc1 	bl	80010e0 <chThdCreateStatic>
 800455e:	69ab      	ldr	r3, [r5, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b48      	ldr	r3, [pc, #288]	; (8004684 <sem1_execute.lto_priv.69+0x144>)
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004564:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004566:	3201      	adds	r2, #1
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 8004570:	4845      	ldr	r0, [pc, #276]	; (8004688 <sem1_execute.lto_priv.69+0x148>)
 8004572:	f7fc fdb5 	bl	80010e0 <chThdCreateStatic>
 8004576:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004578:	4b44      	ldr	r3, [pc, #272]	; (800468c <sem1_execute.lto_priv.69+0x14c>)
 800457a:	6892      	ldr	r2, [r2, #8]
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800457c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800457e:	3203      	adds	r2, #3
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 8004588:	4841      	ldr	r0, [pc, #260]	; (8004690 <sem1_execute.lto_priv.69+0x150>)
 800458a:	f7fc fda9 	bl	80010e0 <chThdCreateStatic>
 800458e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004590:	4b40      	ldr	r3, [pc, #256]	; (8004694 <sem1_execute.lto_priv.69+0x154>)
 8004592:	6892      	ldr	r2, [r2, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004594:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004596:	3204      	adds	r2, #4
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 80045a0:	483d      	ldr	r0, [pc, #244]	; (8004698 <sem1_execute.lto_priv.69+0x158>)
 80045a2:	f7fc fd9d 	bl	80010e0 <chThdCreateStatic>
 80045a6:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80045a8:	4b3c      	ldr	r3, [pc, #240]	; (800469c <sem1_execute.lto_priv.69+0x15c>)
 80045aa:	6892      	ldr	r2, [r2, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80045ac:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80045ae:	3202      	adds	r2, #2
 80045b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	483a      	ldr	r0, [pc, #232]	; (80046a0 <sem1_execute.lto_priv.69+0x160>)
 80045b8:	4b30      	ldr	r3, [pc, #192]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 80045ba:	f7fc fd91 	bl	80010e0 <chThdCreateStatic>
 80045be:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 80045c0:	4838      	ldr	r0, [pc, #224]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 80045c2:	f7fc fd6d 	bl	80010a0 <chSemSignal>
  chSemSignal(&sem1);
 80045c6:	4837      	ldr	r0, [pc, #220]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 80045c8:	f7fc fd6a 	bl	80010a0 <chSemSignal>
  chSemSignal(&sem1);
 80045cc:	4835      	ldr	r0, [pc, #212]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 80045ce:	f7fc fd67 	bl	80010a0 <chSemSignal>
  chSemSignal(&sem1);
 80045d2:	4834      	ldr	r0, [pc, #208]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 80045d4:	f7fc fd64 	bl	80010a0 <chSemSignal>
  chSemSignal(&sem1);
 80045d8:	4832      	ldr	r0, [pc, #200]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 80045da:	f7fc fd61 	bl	80010a0 <chSemSignal>
  test_wait_threads();
 80045de:	f7fd f9c7 	bl	8001970 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 80045e2:	2001      	movs	r0, #1
 80045e4:	4930      	ldr	r1, [pc, #192]	; (80046a8 <sem1_execute.lto_priv.69+0x168>)
 80045e6:	f7fc fb4b 	bl	8000c80 <_test_assert_sequence>
 80045ea:	4606      	mov	r6, r0
 80045ec:	b108      	cbz	r0, 80045f2 <sem1_execute.lto_priv.69+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 80045ee:	b003      	add	sp, #12
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80045f4:	4820      	ldr	r0, [pc, #128]	; (8004678 <sem1_execute.lto_priv.69+0x138>)
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <sem1_execute.lto_priv.69+0x13c>)
 80045fa:	9700      	str	r7, [sp, #0]
 80045fc:	3205      	adds	r2, #5
 80045fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004602:	f7fc fd6d 	bl	80010e0 <chThdCreateStatic>
 8004606:	2320      	movs	r3, #32
 8004608:	6020      	str	r0, [r4, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	4c25      	ldr	r4, [pc, #148]	; (80046a4 <sem1_execute.lto_priv.69+0x164>)
 8004610:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0) {
 8004612:	4627      	mov	r7, r4
 8004614:	e002      	b.n	800461c <sem1_execute.lto_priv.69+0xdc>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004616:	2d01      	cmp	r5, #1
 8004618:	d00e      	beq.n	8004638 <sem1_execute.lto_priv.69+0xf8>
 800461a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= 0) {
 800461c:	68a3      	ldr	r3, [r4, #8]
 800461e:	3301      	adds	r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	dcf7      	bgt.n	8004616 <sem1_execute.lto_priv.69+0xd6>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8004626:	6838      	ldr	r0, [r7, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8004628:	6803      	ldr	r3, [r0, #0]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	605f      	str	r7, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 800462e:	f7fc ff4f 	bl	80014d0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004632:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= 0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8004634:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004636:	d1f0      	bne.n	800461a <sem1_execute.lto_priv.69+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8004638:	f7fc fcaa 	bl	8000f90 <chSchRescheduleS>
 800463c:	2500      	movs	r5, #0
 800463e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8004642:	f7fd f995 	bl	8001970 <test_wait_threads>
 8004646:	2320      	movs	r3, #32
 8004648:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 800464c:	68a1      	ldr	r1, [r4, #8]
 800464e:	2002      	movs	r0, #2
 8004650:	f1a1 0101 	sub.w	r1, r1, #1
 8004654:	fab1 f181 	clz	r1, r1
 8004658:	0949      	lsrs	r1, r1, #5
 800465a:	f7fc fb39 	bl	8000cd0 <_test_assert>
 800465e:	b918      	cbnz	r0, 8004668 <sem1_execute.lto_priv.69+0x128>
 8004660:	f380 8811 	msr	BASEPRI, r0
}
 8004664:	b003      	add	sp, #12
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004668:	f385 8811 	msr	BASEPRI, r5
 800466c:	b003      	add	sp, #12
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004670:	20000b78 	.word	0x20000b78
 8004674:	08005930 	.word	0x08005930
 8004678:	20000d10 	.word	0x20000d10
 800467c:	08004131 	.word	0x08004131
 8004680:	20000a40 	.word	0x20000a40
 8004684:	08005934 	.word	0x08005934
 8004688:	20000e58 	.word	0x20000e58
 800468c:	08005938 	.word	0x08005938
 8004690:	20000fa0 	.word	0x20000fa0
 8004694:	0800592c 	.word	0x0800592c
 8004698:	200010e8 	.word	0x200010e8
 800469c:	08005940 	.word	0x08005940
 80046a0:	20001230 	.word	0x20001230
 80046a4:	200008ac 	.word	0x200008ac
 80046a8:	0800593c 	.word	0x0800593c
 80046ac:	f3af 8000 	nop.w

080046b0 <thd4_execute.lto_priv.67>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 80046b2:	f7fc fefd 	bl	80014b0 <test_wait_tick>
 80046b6:	2620      	movs	r6, #32
 80046b8:	f386 8811 	msr	BASEPRI, r6
 80046bc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80046c0:	2300      	movs	r3, #0
 80046c2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80046c4:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 80046c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046cc:	f7fc fee0 	bl	8001490 <chThdSleep>
  test_assert_time_window(1,
 80046d0:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 80046d4:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 80046d8:	2001      	movs	r0, #1
 80046da:	f7fc fab1 	bl	8000c40 <_test_assert_time_window>
 80046de:	b100      	cbz	r0, 80046e2 <thd4_execute.lto_priv.67+0x32>
 80046e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e2:	f386 8811 	msr	BASEPRI, r6
 80046e6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80046e8:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 80046ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046f0:	f7fc fece 	bl	8001490 <chThdSleep>
  test_assert_time_window(2,
 80046f4:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 80046f8:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 80046fc:	2002      	movs	r0, #2
 80046fe:	f7fc fa9f 	bl	8000c40 <_test_assert_time_window>
 8004702:	2800      	cmp	r0, #0
 8004704:	d1ec      	bne.n	80046e0 <thd4_execute.lto_priv.67+0x30>
 8004706:	f386 8811 	msr	BASEPRI, r6
 800470a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800470c:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8004710:	f242 7010 	movw	r0, #10000	; 0x2710
 8004714:	f7fc febc 	bl	8001490 <chThdSleep>
  test_assert_time_window(3,
 8004718:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 800471c:	460a      	mov	r2, r1
 800471e:	3213      	adds	r2, #19
 8004720:	3110      	adds	r1, #16
 8004722:	2003      	movs	r0, #3
 8004724:	f7fc fa8c 	bl	8000c40 <_test_assert_time_window>
 8004728:	2800      	cmp	r0, #0
 800472a:	d1d9      	bne.n	80046e0 <thd4_execute.lto_priv.67+0x30>
 800472c:	f386 8811 	msr	BASEPRI, r6
 8004730:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8004732:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8004736:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 800473a:	f386 8811 	msr	BASEPRI, r6
 800473e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0) {
 8004740:	1a61      	subs	r1, r4, r1
 8004742:	d10a      	bne.n	800475a <thd4_execute.lto_priv.67+0xaa>
 8004744:	2300      	movs	r3, #0
 8004746:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800474a:	2004      	movs	r0, #4
 800474c:	4621      	mov	r1, r4
 800474e:	f207 32eb 	addw	r2, r7, #1003	; 0x3eb
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8004752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8004756:	f7fc ba73 	b.w	8000c40 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800475a:	2008      	movs	r0, #8
 800475c:	f7fc fd60 	bl	8001220 <chSchGoSleepTimeoutS>
 8004760:	e7f0      	b.n	8004744 <thd4_execute.lto_priv.67+0x94>
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	f3af 8000 	nop.w
 800476c:	f3af 8000 	nop.w

08004770 <thd3_execute.lto_priv.66>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004772:	4e49      	ldr	r6, [pc, #292]	; (8004898 <thd3_execute.lto_priv.66+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004774:	69b3      	ldr	r3, [r6, #24]
 8004776:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8004778:	1c65      	adds	r5, r4, #1
 800477a:	4628      	mov	r0, r5
 800477c:	f7fc fc18 	bl	8000fb0 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8004780:	1b01      	subs	r1, r0, r4

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8004782:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8004784:	fab1 f181 	clz	r1, r1
 8004788:	2001      	movs	r0, #1
 800478a:	0949      	lsrs	r1, r1, #5
 800478c:	f7fc faa0 	bl	8000cd0 <_test_assert>
 8004790:	b100      	cbz	r0, 8004794 <thd3_execute.lto_priv.66+0x24>
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	2002      	movs	r0, #2
 800479a:	1a69      	subs	r1, r5, r1
 800479c:	fab1 f181 	clz	r1, r1
 80047a0:	0949      	lsrs	r1, r1, #5
 80047a2:	f7fc fa95 	bl	8000cd0 <_test_assert>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d1f3      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 80047aa:	4638      	mov	r0, r7
 80047ac:	f7fc fc00 	bl	8000fb0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 80047b0:	1a29      	subs	r1, r5, r0
 80047b2:	2003      	movs	r0, #3
 80047b4:	fab1 f181 	clz	r1, r1
 80047b8:	0949      	lsrs	r1, r1, #5
 80047ba:	f7fc fa89 	bl	8000cd0 <_test_assert>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d1e7      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
 80047c2:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 80047c4:	6899      	ldr	r1, [r3, #8]
 80047c6:	2004      	movs	r0, #4
 80047c8:	1a61      	subs	r1, r4, r1
 80047ca:	fab1 f181 	clz	r1, r1
 80047ce:	0949      	lsrs	r1, r1, #5
 80047d0:	f7fc fa7e 	bl	8000cd0 <_test_assert>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1dc      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
 80047d8:	2320      	movs	r3, #32
 80047da:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80047de:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 80047e0:	6893      	ldr	r3, [r2, #8]
 80047e2:	3302      	adds	r3, #2
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80047ea:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 80047ec:	6899      	ldr	r1, [r3, #8]
 80047ee:	1ca7      	adds	r7, r4, #2
 80047f0:	1a79      	subs	r1, r7, r1
 80047f2:	2005      	movs	r0, #5
 80047f4:	fab1 f181 	clz	r1, r1
 80047f8:	0949      	lsrs	r1, r1, #5
 80047fa:	f7fc fa69 	bl	8000cd0 <_test_assert>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d1c7      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8004802:	4628      	mov	r0, r5
 8004804:	f7fc fbd4 	bl	8000fb0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8004808:	1b01      	subs	r1, r0, r4
 800480a:	2006      	movs	r0, #6
 800480c:	fab1 f181 	clz	r1, r1
 8004810:	0949      	lsrs	r1, r1, #5
 8004812:	f7fc fa5d 	bl	8000cd0 <_test_assert>
 8004816:	2800      	cmp	r0, #0
 8004818:	d1bb      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 800481a:	69b3      	ldr	r3, [r6, #24]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	2007      	movs	r0, #7
 8004820:	1a79      	subs	r1, r7, r1
 8004822:	fab1 f181 	clz	r1, r1
 8004826:	0949      	lsrs	r1, r1, #5
 8004828:	f7fc fa52 	bl	8000cd0 <_test_assert>
 800482c:	2800      	cmp	r0, #0
 800482e:	d1b0      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8004830:	69b3      	ldr	r3, [r6, #24]
 8004832:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004834:	2008      	movs	r0, #8
 8004836:	1a69      	subs	r1, r5, r1
 8004838:	fab1 f181 	clz	r1, r1
 800483c:	0949      	lsrs	r1, r1, #5
 800483e:	f7fc fa47 	bl	8000cd0 <_test_assert>
 8004842:	2800      	cmp	r0, #0
 8004844:	d1a5      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8004846:	1ce7      	adds	r7, r4, #3
 8004848:	4638      	mov	r0, r7
 800484a:	f7fc fbb1 	bl	8000fb0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 800484e:	1a28      	subs	r0, r5, r0
 8004850:	4241      	negs	r1, r0
 8004852:	4141      	adcs	r1, r0
 8004854:	2009      	movs	r0, #9
 8004856:	f7fc fa3b 	bl	8000cd0 <_test_assert>
 800485a:	2800      	cmp	r0, #0
 800485c:	d199      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 800485e:	69b3      	ldr	r3, [r6, #24]
 8004860:	6899      	ldr	r1, [r3, #8]
 8004862:	1a7a      	subs	r2, r7, r1
 8004864:	4251      	negs	r1, r2
 8004866:	4151      	adcs	r1, r2
 8004868:	200a      	movs	r0, #10
 800486a:	f7fc fa31 	bl	8000cd0 <_test_assert>
 800486e:	2800      	cmp	r0, #0
 8004870:	d18f      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8004872:	69b3      	ldr	r3, [r6, #24]
 8004874:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004876:	1a7b      	subs	r3, r7, r1
 8004878:	4259      	negs	r1, r3
 800487a:	4159      	adcs	r1, r3
 800487c:	200b      	movs	r0, #11
 800487e:	f7fc fa27 	bl	8000cd0 <_test_assert>
 8004882:	2800      	cmp	r0, #0
 8004884:	d185      	bne.n	8004792 <thd3_execute.lto_priv.66+0x22>
 8004886:	2320      	movs	r3, #32
 8004888:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800488c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 800488e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8004890:	63dc      	str	r4, [r3, #60]	; 0x3c
 8004892:	f380 8811 	msr	BASEPRI, r0
 8004896:	e77c      	b.n	8004792 <thd3_execute.lto_priv.66+0x22>
 8004898:	20000b78 	.word	0x20000b78
 800489c:	f3af 8000 	nop.w

080048a0 <mbox1_setup.lto_priv.88>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 80048a0:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <mbox1_setup.lto_priv.88+0x30>)
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <mbox1_setup.lto_priv.88+0x34>)
 80048a6:	60da      	str	r2, [r3, #12]
  mbp->mb_top = &buf[n];
 80048a8:	f102 0614 	add.w	r6, r2, #20
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80048ac:	2505      	movs	r5, #5
 80048ae:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80048b0:	f103 001c 	add.w	r0, r3, #28
 80048b4:	f103 0110 	add.w	r1, r3, #16
 80048b8:	e883 0044 	stmia.w	r3, {r2, r6}
 80048bc:	625d      	str	r5, [r3, #36]	; 0x24
 80048be:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	6218      	str	r0, [r3, #32]
 80048c4:	61d8      	str	r0, [r3, #28]
 80048c6:	6159      	str	r1, [r3, #20]
 80048c8:	6119      	str	r1, [r3, #16]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 80048ca:	bc70      	pop	{r4, r5, r6}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000087c 	.word	0x2000087c
 80048d4:	20000d10 	.word	0x20000d10
 80048d8:	f3af 8000 	nop.w
 80048dc:	f3af 8000 	nop.w

080048e0 <mtx8_setup.lto_priv.85>:
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <mtx8_setup.lto_priv.85+0x1c>)
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <mtx8_setup.lto_priv.85+0x20>)
 80048e4:	4907      	ldr	r1, [pc, #28]	; (8004904 <mtx8_setup.lto_priv.85+0x24>)
 80048e6:	6052      	str	r2, [r2, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80048e8:	2000      	movs	r0, #0
 80048ea:	6049      	str	r1, [r1, #4]
 80048ec:	6009      	str	r1, [r1, #0]
 80048ee:	6012      	str	r2, [r2, #0]
 80048f0:	6090      	str	r0, [r2, #8]
 80048f2:	6098      	str	r0, [r3, #8]
 80048f4:	605b      	str	r3, [r3, #4]
 80048f6:	601b      	str	r3, [r3, #0]
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000086c 	.word	0x2000086c
 8004900:	2000085c 	.word	0x2000085c
 8004904:	200008a4 	.word	0x200008a4
 8004908:	f3af 8000 	nop.w
 800490c:	f3af 8000 	nop.w

08004910 <mtx7_setup.lto_priv.83>:
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <mtx7_setup.lto_priv.83+0x14>)
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <mtx7_setup.lto_priv.83+0x18>)
 8004914:	605b      	str	r3, [r3, #4]
 8004916:	2100      	movs	r1, #0
 8004918:	6052      	str	r2, [r2, #4]
 800491a:	6012      	str	r2, [r2, #0]
 800491c:	601b      	str	r3, [r3, #0]
 800491e:	6099      	str	r1, [r3, #8]
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000086c 	.word	0x2000086c
 8004928:	200008a4 	.word	0x200008a4
 800492c:	f3af 8000 	nop.w

08004930 <evt1_execute.lto_priv.91>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8004930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	4c31      	ldr	r4, [pc, #196]	; (80049fc <evt1_execute.lto_priv.91+0xcc>)
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	2020      	movs	r0, #32
 800493a:	6024      	str	r4, [r4, #0]
 800493c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004940:	492f      	ldr	r1, [pc, #188]	; (8004a00 <evt1_execute.lto_priv.91+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8004946:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004948:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 800494c:	698b      	ldr	r3, [r1, #24]
 800494e:	9301      	str	r3, [sp, #4]
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8004954:	2300      	movs	r3, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8004956:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8004958:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 800495a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800495c:	9204      	str	r2, [sp, #16]
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004966:	ae0a      	add	r6, sp, #40	; 0x28
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 800496e:	6989      	ldr	r1, [r1, #24]
 8004970:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
 8004972:	f04f 0802 	mov.w	r8, #2
  elp->el_flags    = 0;
 8004976:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8004978:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800497a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800497c:	f8cd 801c 	str.w	r8, [sp, #28]
 8004980:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8004984:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8004986:	1b09      	subs	r1, r1, r4
 8004988:	bf18      	it	ne
 800498a:	2101      	movne	r1, #1
 800498c:	4638      	mov	r0, r7
 800498e:	f7fc f99f 	bl	8000cd0 <_test_assert>
 8004992:	b110      	cbz	r0, 800499a <evt1_execute.lto_priv.91+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8004994:	b00a      	add	sp, #40	; 0x28
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800499a:	4629      	mov	r1, r5
 800499c:	4620      	mov	r0, r4
 800499e:	f7fc fa3f 	bl	8000e20 <chEvtUnregister>
 80049a2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80049a4:	1b09      	subs	r1, r1, r4
 80049a6:	bf18      	it	ne
 80049a8:	2101      	movne	r1, #1
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7fc f990 	bl	8000cd0 <_test_assert>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d1ef      	bne.n	8004994 <evt1_execute.lto_priv.91+0x64>
  chEvtUnregister(&es1, &el2);
 80049b4:	4631      	mov	r1, r6
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7fc fa32 	bl	8000e20 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	2003      	movs	r0, #3
 80049c0:	1b09      	subs	r1, r1, r4
 80049c2:	fab1 f181 	clz	r1, r1
 80049c6:	0949      	lsrs	r1, r1, #5
 80049c8:	f7fc f982 	bl	8000cd0 <_test_assert>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d1e1      	bne.n	8004994 <evt1_execute.lto_priv.91+0x64>
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80049d0:	4e0c      	ldr	r6, [pc, #48]	; (8004a04 <evt1_execute.lto_priv.91+0xd4>)
 80049d2:	4604      	mov	r4, r0
 80049d4:	2507      	movs	r5, #7
 80049d6:	e001      	b.n	80049dc <evt1_execute.lto_priv.91+0xac>
    }
    eid++;
 80049d8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 80049da:	b155      	cbz	r5, 80049f2 <evt1_execute.lto_priv.91+0xc2>
    if (events & EVENT_MASK(eid)) {
 80049dc:	fa07 f304 	lsl.w	r3, r7, r4
 80049e0:	422b      	tst	r3, r5
 80049e2:	d0f9      	beq.n	80049d8 <evt1_execute.lto_priv.91+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80049e4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80049e8:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80049ea:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80049ee:	4790      	blx	r2
 80049f0:	e7f2      	b.n	80049d8 <evt1_execute.lto_priv.91+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80049f2:	4905      	ldr	r1, [pc, #20]	; (8004a08 <evt1_execute.lto_priv.91+0xd8>)
 80049f4:	2004      	movs	r0, #4
 80049f6:	f7fc f943 	bl	8000c80 <_test_assert_sequence>
 80049fa:	e7cb      	b.n	8004994 <evt1_execute.lto_priv.91+0x64>
 80049fc:	20000848 	.word	0x20000848
 8004a00:	20000b78 	.word	0x20000b78
 8004a04:	08006550 	.word	0x08006550
 8004a08:	08006540 	.word	0x08006540
 8004a0c:	f3af 8000 	nop.w

08004a10 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8004a10:	2043      	movs	r0, #67	; 0x43
 8004a12:	f7fc b975 	b.w	8000d00 <test_emit_token>
 8004a16:	bf00      	nop
 8004a18:	f3af 8000 	nop.w
 8004a1c:	f3af 8000 	nop.w

08004a20 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8004a20:	2042      	movs	r0, #66	; 0x42
 8004a22:	f7fc b96d 	b.w	8000d00 <test_emit_token>
 8004a26:	bf00      	nop
 8004a28:	f3af 8000 	nop.w
 8004a2c:	f3af 8000 	nop.w

08004a30 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8004a30:	2041      	movs	r0, #65	; 0x41
 8004a32:	f7fc b965 	b.w	8000d00 <test_emit_token>
 8004a36:	bf00      	nop
 8004a38:	f3af 8000 	nop.w
 8004a3c:	f3af 8000 	nop.w

08004a40 <evt1_setup.lto_priv.90>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8004a40:	f000 be26 	b.w	8005690 <chEvtGetAndClearEvents.constprop.33>
 8004a44:	f3af 8000 	nop.w
 8004a48:	f3af 8000 	nop.w
 8004a4c:	f3af 8000 	nop.w

08004a50 <mbox1_execute.lto_priv.89>:

static void mbox1_execute(void) {
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	2320      	movs	r3, #32
 8004a56:	b082      	sub	sp, #8
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	4d96      	ldr	r5, [pc, #600]	; (8004cb8 <mbox1_execute.lto_priv.89+0x268>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004a5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004a60:	2001      	movs	r0, #1
 8004a62:	f1a1 0105 	sub.w	r1, r1, #5
 8004a66:	fab1 f181 	clz	r1, r1
 8004a6a:	0949      	lsrs	r1, r1, #5
 8004a6c:	f7fc f930 	bl	8000cd0 <_test_assert>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f040 808a 	bne.w	8004b8a <mbox1_execute.lto_priv.89+0x13a>
 8004a76:	f380 8811 	msr	BASEPRI, r0
 8004a7a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a82:	f000 fe55 	bl	8005730 <chMBPost.constprop.14>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8004a86:	fab0 f180 	clz	r1, r0
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	0949      	lsrs	r1, r1, #5
 8004a8e:	f7fc f91f 	bl	8000cd0 <_test_assert>
 8004a92:	3401      	adds	r4, #1
 8004a94:	b970      	cbnz	r0, 8004ab4 <mbox1_execute.lto_priv.89+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8004a96:	2c46      	cmp	r4, #70	; 0x46
 8004a98:	d1f0      	bne.n	8004a7c <mbox1_execute.lto_priv.89+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8004a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a9e:	2041      	movs	r0, #65	; 0x41
 8004aa0:	f000 fe8e 	bl	80057c0 <chMBPostAhead.constprop.12>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8004aa4:	fab0 f180 	clz	r1, r0
 8004aa8:	2003      	movs	r0, #3
 8004aaa:	0949      	lsrs	r1, r1, #5
 8004aac:	f7fc f910 	bl	8000cd0 <_test_assert>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d070      	beq.n	8004b96 <mbox1_execute.lto_priv.89+0x146>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8004ab4:	b002      	add	sp, #8
 8004ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aba:	f386 8811 	msr	BASEPRI, r6
 8004abe:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004ac2:	202a      	movs	r0, #42	; 0x2a
 8004ac4:	69a1      	ldr	r1, [r4, #24]
 8004ac6:	fab1 f181 	clz	r1, r1
 8004aca:	0949      	lsrs	r1, r1, #5
 8004acc:	f7fc f900 	bl	8000cd0 <_test_assert>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f040 829f 	bne.w	8005014 <mbox1_execute.lto_priv.89+0x5c4>
 8004ad6:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004ada:	68e1      	ldr	r1, [r4, #12]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	ebc3 0e01 	rsb	lr, r3, r1
 8004ae2:	f1de 0100 	rsbs	r1, lr, #0
 8004ae6:	eb41 010e 	adc.w	r1, r1, lr
 8004aea:	202b      	movs	r0, #43	; 0x2b
 8004aec:	f7fc f8f0 	bl	8000cd0 <_test_assert>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1df      	bne.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004af4:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 8004af8:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8004afa:	6862      	ldr	r2, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 8004afc:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8004afe:	1ad1      	subs	r1, r2, r3
 8004b00:	f104 001c 	add.w	r0, r4, #28
 8004b04:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 8004b06:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8004b08:	f7fd f8b2 	bl	8001c70 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 8004b0c:	f104 0010 	add.w	r0, r4, #16
 8004b10:	4631      	mov	r1, r6
 8004b12:	f7fd f8ad 	bl	8001c70 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8004b16:	f7fc fa3b 	bl	8000f90 <chSchRescheduleS>
 8004b1a:	f386 8811 	msr	BASEPRI, r6
 8004b1e:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004b22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b24:	1f4d      	subs	r5, r1, #5
 8004b26:	4269      	negs	r1, r5
 8004b28:	4169      	adcs	r1, r5
 8004b2a:	202c      	movs	r0, #44	; 0x2c
 8004b2c:	f7fc f8d0 	bl	8000cd0 <_test_assert>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f040 826f 	bne.w	8005014 <mbox1_execute.lto_priv.89+0x5c4>
 8004b36:	f386 8811 	msr	BASEPRI, r6
 8004b3a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004b3e:	202d      	movs	r0, #45	; 0x2d
 8004b40:	69a1      	ldr	r1, [r4, #24]
 8004b42:	fab1 f181 	clz	r1, r1
 8004b46:	0949      	lsrs	r1, r1, #5
 8004b48:	f7fc f8c2 	bl	8000cd0 <_test_assert>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f040 8261 	bne.w	8005014 <mbox1_execute.lto_priv.89+0x5c4>
 8004b52:	f386 8811 	msr	BASEPRI, r6
 8004b56:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	1aca      	subs	r2, r1, r3
 8004b60:	4251      	negs	r1, r2
 8004b62:	4151      	adcs	r1, r2
 8004b64:	202e      	movs	r0, #46	; 0x2e
 8004b66:	f7fc f8b3 	bl	8000cd0 <_test_assert>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f040 8252 	bne.w	8005014 <mbox1_execute.lto_priv.89+0x5c4>
 8004b70:	f386 8811 	msr	BASEPRI, r6
 8004b74:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8004b78:	6821      	ldr	r1, [r4, #0]
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	1acb      	subs	r3, r1, r3
 8004b7e:	4259      	negs	r1, r3
 8004b80:	f04f 002f 	mov.w	r0, #47	; 0x2f
 8004b84:	4159      	adcs	r1, r3
 8004b86:	f7fc f8a3 	bl	8000cd0 <_test_assert>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f383 8811 	msr	BASEPRI, r3
}
 8004b90:	b002      	add	sp, #8
 8004b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8004b96:	2101      	movs	r1, #1
 8004b98:	2058      	movs	r0, #88	; 0x58
 8004b9a:	f000 fdc9 	bl	8005730 <chMBPost.constprop.14>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004b9e:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004ba2:	2004      	movs	r0, #4
 8004ba4:	fab1 f181 	clz	r1, r1
 8004ba8:	0949      	lsrs	r1, r1, #5
 8004baa:	f7fc f891 	bl	8000cd0 <_test_assert>
 8004bae:	4604      	mov	r4, r0
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f47f af7f 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004bb6:	2620      	movs	r6, #32
 8004bb8:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8004bbc:	2058      	movs	r0, #88	; 0x58
 8004bbe:	f000 fddf 	bl	8005780 <chMBPostI.constprop.13>
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004bc8:	2005      	movs	r0, #5
 8004bca:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8004bce:	fab1 f181 	clz	r1, r1
 8004bd2:	0949      	lsrs	r1, r1, #5
 8004bd4:	f7fc f87c 	bl	8000cd0 <_test_assert>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	f47f af6b 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8004bde:	2101      	movs	r1, #1
 8004be0:	2058      	movs	r0, #88	; 0x58
 8004be2:	f000 fded 	bl	80057c0 <chMBPostAhead.constprop.12>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004be6:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004bea:	2006      	movs	r0, #6
 8004bec:	fab1 f181 	clz	r1, r1
 8004bf0:	0949      	lsrs	r1, r1, #5
 8004bf2:	f7fc f86d 	bl	8000cd0 <_test_assert>
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f47f af5b 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004bfe:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8004c02:	2058      	movs	r0, #88	; 0x58
 8004c04:	f000 fe04 	bl	8005810 <chMBPostAheadI.constprop.11>
 8004c08:	4601      	mov	r1, r0
 8004c0a:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004c0e:	2007      	movs	r0, #7
 8004c10:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8004c14:	fab1 f181 	clz	r1, r1
 8004c18:	0949      	lsrs	r1, r1, #5
 8004c1a:	f7fc f859 	bl	8000cd0 <_test_assert>
 8004c1e:	4680      	mov	r8, r0
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f47f af47 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004c26:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004c2a:	2008      	movs	r0, #8
 8004c2c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004c2e:	fab1 f181 	clz	r1, r1
 8004c32:	0949      	lsrs	r1, r1, #5
 8004c34:	f7fc f84c 	bl	8000cd0 <_test_assert>
 8004c38:	4c1f      	ldr	r4, [pc, #124]	; (8004cb8 <mbox1_execute.lto_priv.89+0x268>)
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	b110      	cbz	r0, 8004c44 <mbox1_execute.lto_priv.89+0x1f4>
 8004c3e:	f388 8811 	msr	BASEPRI, r8
 8004c42:	e737      	b.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004c44:	f380 8811 	msr	BASEPRI, r0
 8004c48:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004c4c:	69a1      	ldr	r1, [r4, #24]
 8004c4e:	f1a1 0e05 	sub.w	lr, r1, #5
 8004c52:	f1de 0100 	rsbs	r1, lr, #0
 8004c56:	eb41 010e 	adc.w	r1, r1, lr
 8004c5a:	2009      	movs	r0, #9
 8004c5c:	f7fc f838 	bl	8000cd0 <_test_assert>
 8004c60:	b110      	cbz	r0, 8004c68 <mbox1_execute.lto_priv.89+0x218>
 8004c62:	f387 8811 	msr	BASEPRI, r7
 8004c66:	e725      	b.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004c68:	f380 8811 	msr	BASEPRI, r0
 8004c6c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004c70:	68e1      	ldr	r1, [r4, #12]
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	1acc      	subs	r4, r1, r3
 8004c76:	4261      	negs	r1, r4
 8004c78:	f04f 000a 	mov.w	r0, #10
 8004c7c:	4161      	adcs	r1, r4
 8004c7e:	f7fc f827 	bl	8000cd0 <_test_assert>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d181      	bne.n	8004b8c <mbox1_execute.lto_priv.89+0x13c>
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	2405      	movs	r4, #5
 8004c8e:	e005      	b.n	8004c9c <mbox1_execute.lto_priv.89+0x24c>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8004c90:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004c94:	f7fc f834 	bl	8000d00 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8004c98:	3c01      	subs	r4, #1
 8004c9a:	d00f      	beq.n	8004cbc <mbox1_execute.lto_priv.89+0x26c>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca0:	a801      	add	r0, sp, #4
 8004ca2:	f000 fdd5 	bl	8005850 <chMBFetch.constprop.10>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8004ca6:	fab0 f180 	clz	r1, r0
 8004caa:	200b      	movs	r0, #11
 8004cac:	0949      	lsrs	r1, r1, #5
 8004cae:	f7fc f80f 	bl	8000cd0 <_test_assert>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0ec      	beq.n	8004c90 <mbox1_execute.lto_priv.89+0x240>
 8004cb6:	e6fd      	b.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004cb8:	2000087c 	.word	0x2000087c
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8004cbc:	200c      	movs	r0, #12
 8004cbe:	49d7      	ldr	r1, [pc, #860]	; (800501c <mbox1_execute.lto_priv.89+0x5cc>)
 8004cc0:	f7fb ffde 	bl	8000c80 <_test_assert_sequence>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f47f aef5 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8004cca:	f04f 31ff 	mov.w	r1, #4294967295
 8004cce:	2047      	movs	r0, #71	; 0x47
 8004cd0:	f000 fd2e 	bl	8005730 <chMBPost.constprop.14>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8004cd4:	fab0 f180 	clz	r1, r0
 8004cd8:	200d      	movs	r0, #13
 8004cda:	0949      	lsrs	r1, r1, #5
 8004cdc:	f7fb fff8 	bl	8000cd0 <_test_assert>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f47f aee7 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8004cea:	a801      	add	r0, sp, #4
 8004cec:	f000 fdb0 	bl	8005850 <chMBFetch.constprop.10>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8004cf0:	fab0 f180 	clz	r1, r0
 8004cf4:	200e      	movs	r0, #14
 8004cf6:	0949      	lsrs	r1, r1, #5
 8004cf8:	f7fb ffea 	bl	8000cd0 <_test_assert>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f47f aed9 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004d02:	6829      	ldr	r1, [r5, #0]
 8004d04:	68ab      	ldr	r3, [r5, #8]
 8004d06:	4ec6      	ldr	r6, [pc, #792]	; (8005020 <mbox1_execute.lto_priv.89+0x5d0>)
 8004d08:	1ac8      	subs	r0, r1, r3
 8004d0a:	4241      	negs	r1, r0
 8004d0c:	4141      	adcs	r1, r0
 8004d0e:	200f      	movs	r0, #15
 8004d10:	f7fb ffde 	bl	8000cd0 <_test_assert>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	f47f aecd 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8004d1a:	6831      	ldr	r1, [r6, #0]
 8004d1c:	68f3      	ldr	r3, [r6, #12]
 8004d1e:	1aca      	subs	r2, r1, r3
 8004d20:	4251      	negs	r1, r2
 8004d22:	4151      	adcs	r1, r2
 8004d24:	2010      	movs	r0, #16
 8004d26:	f7fb ffd3 	bl	8000cd0 <_test_assert>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	f47f aec2 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8004d30:	2101      	movs	r1, #1
 8004d32:	a801      	add	r0, sp, #4
 8004d34:	f000 fd8c 	bl	8005850 <chMBFetch.constprop.10>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	4259      	negs	r1, r3
 8004d3c:	4159      	adcs	r1, r3
 8004d3e:	2011      	movs	r0, #17
 8004d40:	f7fb ffc6 	bl	8000cd0 <_test_assert>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f47f aeb5 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004d4a:	2720      	movs	r7, #32
 8004d4c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8004d50:	a801      	add	r0, sp, #4
 8004d52:	f000 fda5 	bl	80058a0 <chMBFetchI.constprop.9>
 8004d56:	4601      	mov	r1, r0
 8004d58:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004d5c:	f101 0801 	add.w	r8, r1, #1
 8004d60:	f1d8 0100 	rsbs	r1, r8, #0
 8004d64:	eb41 0108 	adc.w	r1, r1, r8
 8004d68:	2012      	movs	r0, #18
 8004d6a:	f7fb ffb1 	bl	8000cd0 <_test_assert>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f47f aea0 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004d74:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004d78:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004d7a:	f1a1 0c05 	sub.w	ip, r1, #5
 8004d7e:	f1dc 0100 	rsbs	r1, ip, #0
 8004d82:	eb41 010c 	adc.w	r1, r1, ip
 8004d86:	2013      	movs	r0, #19
 8004d88:	f7fb ffa2 	bl	8000cd0 <_test_assert>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f47f aefc 	bne.w	8004b8a <mbox1_execute.lto_priv.89+0x13a>
 8004d92:	f04f 0800 	mov.w	r8, #0
 8004d96:	f388 8811 	msr	BASEPRI, r8
 8004d9a:	2420      	movs	r4, #32
 8004d9c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004da0:	2014      	movs	r0, #20
 8004da2:	69a9      	ldr	r1, [r5, #24]
 8004da4:	fab1 f181 	clz	r1, r1
 8004da8:	0949      	lsrs	r1, r1, #5
 8004daa:	f7fb ff91 	bl	8000cd0 <_test_assert>
 8004dae:	4e9c      	ldr	r6, [pc, #624]	; (8005020 <mbox1_execute.lto_priv.89+0x5d0>)
 8004db0:	4607      	mov	r7, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	f47f af43 	bne.w	8004c3e <mbox1_execute.lto_priv.89+0x1ee>
 8004db8:	f380 8811 	msr	BASEPRI, r0
 8004dbc:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004dc0:	68f1      	ldr	r1, [r6, #12]
 8004dc2:	68b3      	ldr	r3, [r6, #8]
 8004dc4:	ebc3 0e01 	rsb	lr, r3, r1
 8004dc8:	f1de 0100 	rsbs	r1, lr, #0
 8004dcc:	eb41 010e 	adc.w	r1, r1, lr
 8004dd0:	2015      	movs	r0, #21
 8004dd2:	f7fb ff7d 	bl	8000cd0 <_test_assert>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f47f af43 	bne.w	8004c62 <mbox1_execute.lto_priv.89+0x212>
 8004ddc:	f380 8811 	msr	BASEPRI, r0
 8004de0:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8004de4:	2041      	movs	r0, #65	; 0x41
 8004de6:	f000 fccb 	bl	8005780 <chMBPostI.constprop.13>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8004dea:	fab0 f180 	clz	r1, r0
 8004dee:	2016      	movs	r0, #22
 8004df0:	0949      	lsrs	r1, r1, #5
 8004df2:	f7fb ff6d 	bl	8000cd0 <_test_assert>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f47f ae5c 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8004dfc:	2042      	movs	r0, #66	; 0x42
 8004dfe:	f000 fcbf 	bl	8005780 <chMBPostI.constprop.13>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8004e02:	fab0 f180 	clz	r1, r0
 8004e06:	2017      	movs	r0, #23
 8004e08:	0949      	lsrs	r1, r1, #5
 8004e0a:	f7fb ff61 	bl	8000cd0 <_test_assert>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f47f ae50 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8004e14:	2043      	movs	r0, #67	; 0x43
 8004e16:	f000 fcb3 	bl	8005780 <chMBPostI.constprop.13>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8004e1a:	fab0 f180 	clz	r1, r0
 8004e1e:	2018      	movs	r0, #24
 8004e20:	0949      	lsrs	r1, r1, #5
 8004e22:	f7fb ff55 	bl	8000cd0 <_test_assert>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f47f ae44 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8004e2c:	2044      	movs	r0, #68	; 0x44
 8004e2e:	f000 fca7 	bl	8005780 <chMBPostI.constprop.13>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8004e32:	fab0 f180 	clz	r1, r0
 8004e36:	2019      	movs	r0, #25
 8004e38:	0949      	lsrs	r1, r1, #5
 8004e3a:	f7fb ff49 	bl	8000cd0 <_test_assert>
 8004e3e:	4607      	mov	r7, r0
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f47f ae37 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8004e46:	2045      	movs	r0, #69	; 0x45
 8004e48:	f000 fc9a 	bl	8005780 <chMBPostI.constprop.13>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8004e52:	201a      	movs	r0, #26
 8004e54:	fab1 f181 	clz	r1, r1
 8004e58:	0949      	lsrs	r1, r1, #5
 8004e5a:	f7fb ff39 	bl	8000cd0 <_test_assert>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f47f ae28 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004e64:	68f1      	ldr	r1, [r6, #12]
 8004e66:	68b3      	ldr	r3, [r6, #8]
 8004e68:	1ace      	subs	r6, r1, r3
 8004e6a:	4271      	negs	r1, r6
 8004e6c:	4171      	adcs	r1, r6
 8004e6e:	201b      	movs	r0, #27
 8004e70:	f7fb ff2e 	bl	8000cd0 <_test_assert>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f47f ae1d 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004e7a:	4626      	mov	r6, r4
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	2405      	movs	r4, #5
 8004e80:	2720      	movs	r7, #32
 8004e82:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004e86:	a801      	add	r0, sp, #4
 8004e88:	f000 fd0a 	bl	80058a0 <chMBFetchI.constprop.9>
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8004e92:	201c      	movs	r0, #28
 8004e94:	fab1 f181 	clz	r1, r1
 8004e98:	0949      	lsrs	r1, r1, #5
 8004e9a:	f7fb ff19 	bl	8000cd0 <_test_assert>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f47f ae08 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
    test_emit_token(msg2);
 8004ea4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004ea8:	f7fb ff2a 	bl	8000d00 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004eac:	3c01      	subs	r4, #1
 8004eae:	d1e7      	bne.n	8004e80 <mbox1_execute.lto_priv.89+0x430>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8004eb0:	201d      	movs	r0, #29
 8004eb2:	495a      	ldr	r1, [pc, #360]	; (800501c <mbox1_execute.lto_priv.89+0x5cc>)
 8004eb4:	f7fb fee4 	bl	8000c80 <_test_assert_sequence>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	f47f adfb 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004ebe:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004ec2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004ec4:	4e56      	ldr	r6, [pc, #344]	; (8005020 <mbox1_execute.lto_priv.89+0x5d0>)
 8004ec6:	1f4a      	subs	r2, r1, #5
 8004ec8:	4251      	negs	r1, r2
 8004eca:	4151      	adcs	r1, r2
 8004ecc:	201e      	movs	r0, #30
 8004ece:	f7fb feff 	bl	8000cd0 <_test_assert>
 8004ed2:	b110      	cbz	r0, 8004eda <mbox1_execute.lto_priv.89+0x48a>
 8004ed4:	f384 8811 	msr	BASEPRI, r4
 8004ed8:	e5ec      	b.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004eda:	f384 8811 	msr	BASEPRI, r4
 8004ede:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004ee2:	201f      	movs	r0, #31
 8004ee4:	69b1      	ldr	r1, [r6, #24]
 8004ee6:	fab1 f181 	clz	r1, r1
 8004eea:	0949      	lsrs	r1, r1, #5
 8004eec:	f7fb fef0 	bl	8000cd0 <_test_assert>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d1ef      	bne.n	8004ed4 <mbox1_execute.lto_priv.89+0x484>
 8004ef4:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004ef8:	68f1      	ldr	r1, [r6, #12]
 8004efa:	68b3      	ldr	r3, [r6, #8]
 8004efc:	1acb      	subs	r3, r1, r3
 8004efe:	4259      	negs	r1, r3
 8004f00:	4159      	adcs	r1, r3
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7fb fee4 	bl	8000cd0 <_test_assert>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f47f add3 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004f0e:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8004f12:	2045      	movs	r0, #69	; 0x45
 8004f14:	f000 fc7c 	bl	8005810 <chMBPostAheadI.constprop.11>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8004f18:	fab0 f180 	clz	r1, r0
 8004f1c:	2021      	movs	r0, #33	; 0x21
 8004f1e:	0949      	lsrs	r1, r1, #5
 8004f20:	f7fb fed6 	bl	8000cd0 <_test_assert>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f47f adc5 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8004f2a:	2044      	movs	r0, #68	; 0x44
 8004f2c:	f000 fc70 	bl	8005810 <chMBPostAheadI.constprop.11>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8004f30:	fab0 f180 	clz	r1, r0
 8004f34:	2022      	movs	r0, #34	; 0x22
 8004f36:	0949      	lsrs	r1, r1, #5
 8004f38:	f7fb feca 	bl	8000cd0 <_test_assert>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f47f adb9 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8004f42:	2043      	movs	r0, #67	; 0x43
 8004f44:	f000 fc64 	bl	8005810 <chMBPostAheadI.constprop.11>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8004f48:	fab0 f180 	clz	r1, r0
 8004f4c:	2023      	movs	r0, #35	; 0x23
 8004f4e:	0949      	lsrs	r1, r1, #5
 8004f50:	f7fb febe 	bl	8000cd0 <_test_assert>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f47f adad 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8004f5a:	2042      	movs	r0, #66	; 0x42
 8004f5c:	f000 fc58 	bl	8005810 <chMBPostAheadI.constprop.11>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8004f60:	fab0 f180 	clz	r1, r0
 8004f64:	2024      	movs	r0, #36	; 0x24
 8004f66:	0949      	lsrs	r1, r1, #5
 8004f68:	f7fb feb2 	bl	8000cd0 <_test_assert>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f47f ada1 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8004f72:	2041      	movs	r0, #65	; 0x41
 8004f74:	f000 fc4c 	bl	8005810 <chMBPostAheadI.constprop.11>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8004f80:	2025      	movs	r0, #37	; 0x25
 8004f82:	fab1 f181 	clz	r1, r1
 8004f86:	0949      	lsrs	r1, r1, #5
 8004f88:	f7fb fea2 	bl	8000cd0 <_test_assert>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f47f ad91 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004f92:	68e9      	ldr	r1, [r5, #12]
 8004f94:	68ab      	ldr	r3, [r5, #8]
 8004f96:	ebc3 0801 	rsb	r8, r3, r1
 8004f9a:	f1d8 0100 	rsbs	r1, r8, #0
 8004f9e:	eb41 0108 	adc.w	r1, r1, r8
 8004fa2:	2026      	movs	r0, #38	; 0x26
 8004fa4:	f7fb fe94 	bl	8000cd0 <_test_assert>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f47f ad83 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	2605      	movs	r6, #5
 8004fb2:	f04f 0820 	mov.w	r8, #32
 8004fb6:	2720      	movs	r7, #32
 8004fb8:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004fbc:	a801      	add	r0, sp, #4
 8004fbe:	f000 fc6f 	bl	80058a0 <chMBFetchI.constprop.9>
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8004fc8:	2027      	movs	r0, #39	; 0x27
 8004fca:	fab1 f181 	clz	r1, r1
 8004fce:	0949      	lsrs	r1, r1, #5
 8004fd0:	f7fb fe7e 	bl	8000cd0 <_test_assert>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f47f ad6d 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
    test_emit_token(msg2);
 8004fda:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004fde:	f7fb fe8f 	bl	8000d00 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004fe2:	3e01      	subs	r6, #1
 8004fe4:	d1e7      	bne.n	8004fb6 <mbox1_execute.lto_priv.89+0x566>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8004fe6:	2028      	movs	r0, #40	; 0x28
 8004fe8:	490c      	ldr	r1, [pc, #48]	; (800501c <mbox1_execute.lto_priv.89+0x5cc>)
 8004fea:	f7fb fe49 	bl	8000c80 <_test_assert_sequence>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f47f ad60 	bne.w	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 8004ff4:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004ff8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004ffa:	4c09      	ldr	r4, [pc, #36]	; (8005020 <mbox1_execute.lto_priv.89+0x5d0>)
 8004ffc:	f1a1 0c05 	sub.w	ip, r1, #5
 8005000:	f1dc 0100 	rsbs	r1, ip, #0
 8005004:	eb41 010c 	adc.w	r1, r1, ip
 8005008:	2029      	movs	r0, #41	; 0x29
 800500a:	f7fb fe61 	bl	8000cd0 <_test_assert>
 800500e:	2800      	cmp	r0, #0
 8005010:	f43f ad53 	beq.w	8004aba <mbox1_execute.lto_priv.89+0x6a>
 8005014:	f386 8811 	msr	BASEPRI, r6
 8005018:	e54c      	b.n	8004ab4 <mbox1_execute.lto_priv.89+0x64>
 800501a:	bf00      	nop
 800501c:	0800593c 	.word	0x0800593c
 8005020:	2000087c 	.word	0x2000087c
 8005024:	f3af 8000 	nop.w
 8005028:	f3af 8000 	nop.w
 800502c:	f3af 8000 	nop.w

08005030 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8005030:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8005032:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8005034:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8005036:	f7fc fab3 	bl	80015a0 <chMsgSend>
  chMsgSend(p, 'B');
 800503a:	4620      	mov	r0, r4
 800503c:	2142      	movs	r1, #66	; 0x42
 800503e:	f7fc faaf 	bl	80015a0 <chMsgSend>
  chMsgSend(p, 'C');
 8005042:	4620      	mov	r0, r4
 8005044:	2143      	movs	r1, #67	; 0x43
 8005046:	f7fc faab 	bl	80015a0 <chMsgSend>
  return 0;
}
 800504a:	2000      	movs	r0, #0
 800504c:	bd10      	pop	{r4, pc}
 800504e:	bf00      	nop

08005050 <msg1_execute.lto_priv.87>:

static void msg1_execute(void) {
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <msg1_execute.lto_priv.87+0x80>)
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8005054:	481f      	ldr	r0, [pc, #124]	; (80050d4 <msg1_execute.lto_priv.87+0x84>)
 8005056:	6999      	ldr	r1, [r3, #24]
 8005058:	4b1f      	ldr	r3, [pc, #124]	; (80050d8 <msg1_execute.lto_priv.87+0x88>)
 800505a:	688a      	ldr	r2, [r1, #8]
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
  return 0;
}

static void msg1_execute(void) {
 800505c:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800505e:	3201      	adds	r2, #1
 8005060:	9100      	str	r1, [sp, #0]
 8005062:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005066:	f7fc f83b 	bl	80010e0 <chThdCreateStatic>
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <msg1_execute.lto_priv.87+0x8c>)
 800506c:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 800506e:	f7fc f88f 	bl	8001190 <chMsgWait>
 8005072:	2520      	movs	r5, #32
 8005074:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005076:	f385 8811 	msr	BASEPRI, r5
 800507a:	4631      	mov	r1, r6
 800507c:	f7fb ffb0 	bl	8000fe0 <chSchWakeupS>
 8005080:	2400      	movs	r4, #0
 8005082:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005086:	b2f0      	uxtb	r0, r6
 8005088:	f7fb fe3a 	bl	8000d00 <test_emit_token>
  tp = chMsgWait();
 800508c:	f7fc f880 	bl	8001190 <chMsgWait>
 8005090:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005092:	f385 8811 	msr	BASEPRI, r5
 8005096:	4631      	mov	r1, r6
 8005098:	f7fb ffa2 	bl	8000fe0 <chSchWakeupS>
 800509c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80050a0:	b2f0      	uxtb	r0, r6
 80050a2:	f7fb fe2d 	bl	8000d00 <test_emit_token>
  tp = chMsgWait();
 80050a6:	f7fc f873 	bl	8001190 <chMsgWait>
 80050aa:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80050ac:	f385 8811 	msr	BASEPRI, r5
 80050b0:	4631      	mov	r1, r6
 80050b2:	f7fb ff95 	bl	8000fe0 <chSchWakeupS>
 80050b6:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80050ba:	b2f0      	uxtb	r0, r6
 80050bc:	f7fb fe20 	bl	8000d00 <test_emit_token>
  test_assert_sequence(1, "ABC");
 80050c0:	4907      	ldr	r1, [pc, #28]	; (80050e0 <msg1_execute.lto_priv.87+0x90>)
 80050c2:	2001      	movs	r0, #1
}
 80050c4:	b002      	add	sp, #8
 80050c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 80050ca:	f7fb bdd9 	b.w	8000c80 <_test_assert_sequence>
 80050ce:	bf00      	nop
 80050d0:	20000b78 	.word	0x20000b78
 80050d4:	20000d10 	.word	0x20000d10
 80050d8:	08005031 	.word	0x08005031
 80050dc:	20000a40 	.word	0x20000a40
 80050e0:	08006540 	.word	0x08006540
 80050e4:	f3af 8000 	nop.w
 80050e8:	f3af 8000 	nop.w
 80050ec:	f3af 8000 	nop.w

080050f0 <mtx8_execute.lto_priv.86>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <mtx8_execute.lto_priv.86+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80050f4:	4d19      	ldr	r5, [pc, #100]	; (800515c <mtx8_execute.lto_priv.86+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <mtx8_execute.lto_priv.86+0x70>)
 80050fa:	689e      	ldr	r6, [r3, #8]
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <mtx8_execute.lto_priv.86+0x74>)
 80050fe:	4c1a      	ldr	r4, [pc, #104]	; (8005168 <mtx8_execute.lto_priv.86+0x78>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005100:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005102:	4628      	mov	r0, r5
 8005104:	9200      	str	r2, [sp, #0]
 8005106:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800510a:	1c72      	adds	r2, r6, #1
 800510c:	f7fb ffe8 	bl	80010e0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <mtx8_execute.lto_priv.86+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005112:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005114:	1cb2      	adds	r2, r6, #2
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800511c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <mtx8_execute.lto_priv.86+0x80>)
 8005122:	f7fb ffdd 	bl	80010e0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <mtx8_execute.lto_priv.86+0x84>)

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005128:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 800512a:	1cf2      	adds	r2, r6, #3
 800512c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <mtx8_execute.lto_priv.86+0x88>)
 8005138:	f7fb ffd2 	bl	80010e0 <chThdCreateStatic>
 800513c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 800513e:	f000 fa77 	bl	8005630 <chCondSignal.constprop.42>
  chCondSignal(&c1);
 8005142:	f000 fa75 	bl	8005630 <chCondSignal.constprop.42>
  test_wait_threads();
 8005146:	f7fc fc13 	bl	8001970 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800514a:	490c      	ldr	r1, [pc, #48]	; (800517c <mtx8_execute.lto_priv.86+0x8c>)
 800514c:	2001      	movs	r0, #1
}
 800514e:	b002      	add	sp, #8
 8005150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8005154:	f7fb bd94 	b.w	8000c80 <_test_assert_sequence>
 8005158:	20000b78 	.word	0x20000b78
 800515c:	20000d10 	.word	0x20000d10
 8005160:	08005930 	.word	0x08005930
 8005164:	080051a1 	.word	0x080051a1
 8005168:	20000a40 	.word	0x20000a40
 800516c:	08005938 	.word	0x08005938
 8005170:	08005231 	.word	0x08005231
 8005174:	08005934 	.word	0x08005934
 8005178:	08005181 	.word	0x08005181
 800517c:	08006540 	.word	0x08006540

08005180 <thread12>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005180:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8005182:	4c06      	ldr	r4, [pc, #24]	; (800519c <thread12+0x1c>)
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005184:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005186:	4620      	mov	r0, r4
 8005188:	f7fc fb1a 	bl	80017c0 <chMtxLock>
  test_emit_token(*(char *)p);
 800518c:	7828      	ldrb	r0, [r5, #0]
 800518e:	f7fb fdb7 	bl	8000d00 <test_emit_token>
  chMtxUnlock(&m2);
 8005192:	4620      	mov	r0, r4
 8005194:	f7fb ff54 	bl	8001040 <chMtxUnlock>
  return 0;
}
 8005198:	2000      	movs	r0, #0
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	2000085c 	.word	0x2000085c

080051a0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	4606      	mov	r6, r0

  chMtxLock(&m2);
 80051a4:	481b      	ldr	r0, [pc, #108]	; (8005214 <thread11+0x74>)
 80051a6:	f7fc fb0b 	bl	80017c0 <chMtxLock>
  chMtxLock(&m1);
 80051aa:	481b      	ldr	r0, [pc, #108]	; (8005218 <thread11+0x78>)
 80051ac:	f7fc fb08 	bl	80017c0 <chMtxLock>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80051b6:	4d19      	ldr	r5, [pc, #100]	; (800521c <thread11+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 80051b8:	69ab      	ldr	r3, [r5, #24]
 80051ba:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80051bc:	4638      	mov	r0, r7
 80051be:	f7fc fa6f 	bl	80016a0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <thread11+0x80>)
 80051c4:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80051c6:	4618      	mov	r0, r3
 80051c8:	6223      	str	r3, [r4, #32]
 80051ca:	e003      	b.n	80051d4 <thread11+0x34>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80051cc:	6899      	ldr	r1, [r3, #8]
 80051ce:	68a2      	ldr	r2, [r4, #8]
 80051d0:	4291      	cmp	r1, r2
 80051d2:	d302      	bcc.n	80051da <thread11+0x3a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80051d4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80051d6:	4283      	cmp	r3, r0
 80051d8:	d1f8      	bne.n	80051cc <thread11+0x2c>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80051de:	6023      	str	r3, [r4, #0]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else {
    chSchGoSleepS(newstate);
 80051e0:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 80051e2:	605c      	str	r4, [r3, #4]
 80051e4:	6014      	str	r4, [r2, #0]
 80051e6:	f7fb ffbb 	bl	8001160 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80051ea:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	3301      	adds	r3, #1
 80051f0:	d002      	beq.n	80051f8 <thread11+0x58>
    chMtxLockS(mp);
 80051f2:	4638      	mov	r0, r7
 80051f4:	f7fc fa7c 	bl	80016f0 <chMtxLockS>
 80051f8:	2400      	movs	r4, #0
 80051fa:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80051fe:	7830      	ldrb	r0, [r6, #0]
 8005200:	f7fb fd7e 	bl	8000d00 <test_emit_token>
  chMtxUnlock(&m1);
 8005204:	4804      	ldr	r0, [pc, #16]	; (8005218 <thread11+0x78>)
 8005206:	f7fb ff1b 	bl	8001040 <chMtxUnlock>
  chMtxUnlock(&m2);
 800520a:	4802      	ldr	r0, [pc, #8]	; (8005214 <thread11+0x74>)
 800520c:	f7fb ff18 	bl	8001040 <chMtxUnlock>
  return 0;
}
 8005210:	4620      	mov	r0, r4
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	2000085c 	.word	0x2000085c
 8005218:	2000086c 	.word	0x2000086c
 800521c:	20000b78 	.word	0x20000b78
 8005220:	200008a4 	.word	0x200008a4
 8005224:	f3af 8000 	nop.w
 8005228:	f3af 8000 	nop.w
 800522c:	f3af 8000 	nop.w

08005230 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8005234:	4816      	ldr	r0, [pc, #88]	; (8005290 <thread10+0x60>)
 8005236:	f7fc fac3 	bl	80017c0 <chMtxLock>
 800523a:	2320      	movs	r3, #32
 800523c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <thread10+0x64>)
 8005242:	699c      	ldr	r4, [r3, #24]
 8005244:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005246:	4630      	mov	r0, r6
 8005248:	f7fc fa2a 	bl	80016a0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 800524c:	4812      	ldr	r0, [pc, #72]	; (8005298 <thread10+0x68>)
 800524e:	6220      	str	r0, [r4, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005250:	4603      	mov	r3, r0
 8005252:	e003      	b.n	800525c <thread10+0x2c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	68a2      	ldr	r2, [r4, #8]
 8005258:	4291      	cmp	r1, r2
 800525a:	d302      	bcc.n	8005262 <thread10+0x32>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800525c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800525e:	4283      	cmp	r3, r0
 8005260:	d1f8      	bne.n	8005254 <thread10+0x24>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005266:	6023      	str	r3, [r4, #0]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8005268:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 800526a:	605c      	str	r4, [r3, #4]
 800526c:	6014      	str	r4, [r2, #0]
 800526e:	f7fb ff77 	bl	8001160 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8005272:	4630      	mov	r0, r6
 8005274:	f7fc fa3c 	bl	80016f0 <chMtxLockS>
 8005278:	2400      	movs	r4, #0
 800527a:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 800527e:	7828      	ldrb	r0, [r5, #0]
 8005280:	f7fb fd3e 	bl	8000d00 <test_emit_token>
  chMtxUnlock(&m1);
 8005284:	4802      	ldr	r0, [pc, #8]	; (8005290 <thread10+0x60>)
 8005286:	f7fb fedb 	bl	8001040 <chMtxUnlock>
  return 0;
}
 800528a:	4620      	mov	r0, r4
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	bf00      	nop
 8005290:	2000086c 	.word	0x2000086c
 8005294:	20000b78 	.word	0x20000b78
 8005298:	200008a4 	.word	0x200008a4
 800529c:	f3af 8000 	nop.w

080052a0 <mtx7_execute.lto_priv.84>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80052a0:	b530      	push	{r4, r5, lr}
 80052a2:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <mtx7_execute.lto_priv.84+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80052a4:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <mtx7_execute.lto_priv.84+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	482c      	ldr	r0, [pc, #176]	; (800535c <mtx7_execute.lto_priv.84+0xbc>)
 80052aa:	689d      	ldr	r5, [r3, #8]
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <mtx7_execute.lto_priv.84+0xc0>)
 80052ae:	4c2d      	ldr	r4, [pc, #180]	; (8005364 <mtx7_execute.lto_priv.84+0xc4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80052b0:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80052b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	1c6a      	adds	r2, r5, #1
 80052ba:	f7fb ff11 	bl	80010e0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052be:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <mtx7_execute.lto_priv.84+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80052c0:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052c2:	1caa      	adds	r2, r5, #2
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052ca:	4b25      	ldr	r3, [pc, #148]	; (8005360 <mtx7_execute.lto_priv.84+0xc0>)
 80052cc:	4827      	ldr	r0, [pc, #156]	; (800536c <mtx7_execute.lto_priv.84+0xcc>)
 80052ce:	f7fb ff07 	bl	80010e0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052d2:	4b27      	ldr	r3, [pc, #156]	; (8005370 <mtx7_execute.lto_priv.84+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052d4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052d6:	1cea      	adds	r2, r5, #3
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <mtx7_execute.lto_priv.84+0xc0>)
 80052e0:	4824      	ldr	r0, [pc, #144]	; (8005374 <mtx7_execute.lto_priv.84+0xd4>)
 80052e2:	f7fb fefd 	bl	80010e0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <mtx7_execute.lto_priv.84+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052e8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052ea:	1d2a      	adds	r2, r5, #4
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <mtx7_execute.lto_priv.84+0xc0>)
 80052f4:	4821      	ldr	r0, [pc, #132]	; (800537c <mtx7_execute.lto_priv.84+0xdc>)
 80052f6:	f7fb fef3 	bl	80010e0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <mtx7_execute.lto_priv.84+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052fc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80052fe:	1d6a      	adds	r2, r5, #5
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <mtx7_execute.lto_priv.84+0xc0>)
 8005308:	481e      	ldr	r0, [pc, #120]	; (8005384 <mtx7_execute.lto_priv.84+0xe4>)
 800530a:	f7fb fee9 	bl	80010e0 <chThdCreateStatic>
 800530e:	2320      	movs	r3, #32
 8005310:	6120      	str	r0, [r4, #16]
 8005312:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue) {
 8005316:	4c1c      	ldr	r4, [pc, #112]	; (8005388 <mtx7_execute.lto_priv.84+0xe8>)
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 800531c:	bf18      	it	ne
 800531e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue) {
 8005322:	d009      	beq.n	8005338 <mtx7_execute.lto_priv.84+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	6022      	str	r2, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005328:	4618      	mov	r0, r3
 800532a:	6054      	str	r4, [r2, #4]
 800532c:	f7fc f8d0 	bl	80014d0 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue) {
 8005330:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005332:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue) {
 8005334:	42a3      	cmp	r3, r4
 8005336:	d1f5      	bne.n	8005324 <mtx7_execute.lto_priv.84+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8005338:	f7fb fe2a 	bl	8000f90 <chSchRescheduleS>
 800533c:	2300      	movs	r3, #0
 800533e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8005342:	f7fc fb15 	bl	8001970 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005346:	4911      	ldr	r1, [pc, #68]	; (800538c <mtx7_execute.lto_priv.84+0xec>)
 8005348:	2001      	movs	r0, #1
}
 800534a:	b003      	add	sp, #12
 800534c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005350:	f7fb bc96 	b.w	8000c80 <_test_assert_sequence>
 8005354:	20000b78 	.word	0x20000b78
 8005358:	08005940 	.word	0x08005940
 800535c:	20000d10 	.word	0x20000d10
 8005360:	08005231 	.word	0x08005231
 8005364:	20000a40 	.word	0x20000a40
 8005368:	0800592c 	.word	0x0800592c
 800536c:	20000e58 	.word	0x20000e58
 8005370:	08005938 	.word	0x08005938
 8005374:	20000fa0 	.word	0x20000fa0
 8005378:	08005934 	.word	0x08005934
 800537c:	200010e8 	.word	0x200010e8
 8005380:	08005930 	.word	0x08005930
 8005384:	20001230 	.word	0x20001230
 8005388:	200008a4 	.word	0x200008a4
 800538c:	0800593c 	.word	0x0800593c

08005390 <mtx6_execute.lto_priv.82>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005390:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005392:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <mtx6_execute.lto_priv.82+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005394:	4e2c      	ldr	r6, [pc, #176]	; (8005448 <mtx6_execute.lto_priv.82+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	4d2c      	ldr	r5, [pc, #176]	; (800544c <mtx6_execute.lto_priv.82+0xbc>)
 800539a:	689f      	ldr	r7, [r3, #8]
 800539c:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <mtx6_execute.lto_priv.82+0xc0>)
 800539e:	4c2d      	ldr	r4, [pc, #180]	; (8005454 <mtx6_execute.lto_priv.82+0xc4>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 80053a0:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80053a2:	1c7a      	adds	r2, r7, #1
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4630      	mov	r0, r6
 80053a8:	462b      	mov	r3, r5
 80053aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053ae:	f7fb fe97 	bl	80010e0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80053b2:	4929      	ldr	r1, [pc, #164]	; (8005458 <mtx6_execute.lto_priv.82+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80053b4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80053b6:	1cba      	adds	r2, r7, #2
 80053b8:	462b      	mov	r3, r5
 80053ba:	9100      	str	r1, [sp, #0]
 80053bc:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80053c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053c4:	f7fb fe8c 	bl	80010e0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80053c8:	4924      	ldr	r1, [pc, #144]	; (800545c <mtx6_execute.lto_priv.82+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80053ca:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80053cc:	1cfa      	adds	r2, r7, #3
 80053ce:	462b      	mov	r3, r5
 80053d0:	9100      	str	r1, [sp, #0]
 80053d2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80053d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053da:	f7fb fe81 	bl	80010e0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80053de:	4920      	ldr	r1, [pc, #128]	; (8005460 <mtx6_execute.lto_priv.82+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80053e0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80053e2:	1d3a      	adds	r2, r7, #4
 80053e4:	462b      	mov	r3, r5
 80053e6:	9100      	str	r1, [sp, #0]
 80053e8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80053ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053f0:	f7fb fe76 	bl	80010e0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80053f4:	491b      	ldr	r1, [pc, #108]	; (8005464 <mtx6_execute.lto_priv.82+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80053f6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80053f8:	462b      	mov	r3, r5
 80053fa:	9100      	str	r1, [sp, #0]
 80053fc:	1d7a      	adds	r2, r7, #5
 80053fe:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005402:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005406:	f7fb fe6b 	bl	80010e0 <chThdCreateStatic>
 800540a:	2320      	movs	r3, #32
 800540c:	6120      	str	r0, [r4, #16]
 800540e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005412:	f000 f925 	bl	8005660 <chCondSignalI.constprop.41>
  chCondSignalI(&c1);
 8005416:	f000 f923 	bl	8005660 <chCondSignalI.constprop.41>
  chCondSignalI(&c1);
 800541a:	f000 f921 	bl	8005660 <chCondSignalI.constprop.41>
  chCondSignalI(&c1);
 800541e:	f000 f91f 	bl	8005660 <chCondSignalI.constprop.41>
  chCondSignalI(&c1);
 8005422:	f000 f91d 	bl	8005660 <chCondSignalI.constprop.41>
  chSchRescheduleS();
 8005426:	f7fb fdb3 	bl	8000f90 <chSchRescheduleS>
 800542a:	2300      	movs	r3, #0
 800542c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8005430:	f7fc fa9e 	bl	8001970 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005434:	490c      	ldr	r1, [pc, #48]	; (8005468 <mtx6_execute.lto_priv.82+0xd8>)
 8005436:	2001      	movs	r0, #1
}
 8005438:	b003      	add	sp, #12
 800543a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800543e:	f7fb bc1f 	b.w	8000c80 <_test_assert_sequence>
 8005442:	bf00      	nop
 8005444:	20000b78 	.word	0x20000b78
 8005448:	20000d10 	.word	0x20000d10
 800544c:	08005231 	.word	0x08005231
 8005450:	08005940 	.word	0x08005940
 8005454:	20000a40 	.word	0x20000a40
 8005458:	0800592c 	.word	0x0800592c
 800545c:	08005938 	.word	0x08005938
 8005460:	08005934 	.word	0x08005934
 8005464:	08005930 	.word	0x08005930
 8005468:	0800593c 	.word	0x0800593c
 800546c:	f3af 8000 	nop.w

08005470 <chTMStartMeasurementX.constprop.56>:
 8005470:	4b01      	ldr	r3, [pc, #4]	; (8005478 <chTMStartMeasurementX.constprop.56+0x8>)
 8005472:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005474:	6083      	str	r3, [r0, #8]
 8005476:	4770      	bx	lr
 8005478:	e0001000 	.word	0xe0001000
 800547c:	f3af 8000 	nop.w

08005480 <chThdCreateFromHeap.constprop.51>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	4606      	mov	r6, r0
 8005486:	4688      	mov	r8, r1
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8005488:	481e      	ldr	r0, [pc, #120]	; (8005504 <chThdCreateFromHeap.constprop.51+0x84>)
 800548a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800548e:	f7fc fb97 	bl	8001bc0 <chHeapAlloc>
  if (wsp == NULL) {
 8005492:	4604      	mov	r4, r0
 8005494:	b390      	cbz	r0, 80054fc <chThdCreateFromHeap.constprop.51+0x7c>
 8005496:	2320      	movs	r3, #32
 8005498:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800549c:	491a      	ldr	r1, [pc, #104]	; (8005508 <chThdCreateFromHeap.constprop.51+0x88>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800549e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800550c <chThdCreateFromHeap.constprop.51+0x8c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80054a2:	f8d1 e014 	ldr.w	lr, [r1, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80054a6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005510 <chThdCreateFromHeap.constprop.51+0x90>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80054aa:	6101      	str	r1, [r0, #16]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80054ac:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 80054ae:	f100 0328 	add.w	r3, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80054b2:	f500 7b92 	add.w	fp, r0, #292	; 0x124
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80054b6:	f04f 0c02 	mov.w	ip, #2
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 80054ba:	f100 0224 	add.w	r2, r0, #36	; 0x24
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 80054be:	2701      	movs	r7, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80054c0:	6086      	str	r6, [r0, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80054c2:	f8c0 b00c 	str.w	fp, [r0, #12]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80054c6:	f8c0 e014 	str.w	lr, [r0, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80054ca:	f8c0 8128 	str.w	r8, [r0, #296]	; 0x128
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80054ce:	6148      	str	r0, [r1, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 80054d0:	63c6      	str	r6, [r0, #60]	; 0x3c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80054d2:	f8c0 a124 	str.w	sl, [r0, #292]	; 0x124
 80054d6:	f8c0 9144 	str.w	r9, [r0, #324]	; 0x144
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80054da:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80054de:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 80054e0:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 80054e2:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 80054e4:	7787      	strb	r7, [r0, #30]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 80054e6:	4629      	mov	r1, r5
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80054e8:	f8ce 0010 	str.w	r0, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80054ec:	6242      	str	r2, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 80054ee:	7747      	strb	r7, [r0, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80054f0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80054f2:	6283      	str	r3, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 80054f4:	f7fb fd74 	bl	8000fe0 <chSchWakeupS>
 80054f8:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80054fc:	4620      	mov	r0, r4
 80054fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	bf00      	nop
 8005504:	20000cd8 	.word	0x20000cd8
 8005508:	20000b78 	.word	0x20000b78
 800550c:	08003401 	.word	0x08003401
 8005510:	080008f1 	.word	0x080008f1
 8005514:	f3af 8000 	nop.w
 8005518:	f3af 8000 	nop.w
 800551c:	f3af 8000 	nop.w

08005520 <chThdCreateFromMemoryPool.constprop.50>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005524:	4e21      	ldr	r6, [pc, #132]	; (80055ac <chThdCreateFromMemoryPool.constprop.50+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005526:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005528:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 800552a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 800552c:	f7fb fc60 	bl	8000df0 <chPoolAlloc>
  if (wsp == NULL) {
 8005530:	4604      	mov	r4, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d037      	beq.n	80055a6 <chThdCreateFromMemoryPool.constprop.50+0x86>
 8005536:	2320      	movs	r3, #32
 8005538:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800553c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800553e:	4f1c      	ldr	r7, [pc, #112]	; (80055b0 <chThdCreateFromMemoryPool.constprop.50+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005540:	4d1c      	ldr	r5, [pc, #112]	; (80055b4 <chThdCreateFromMemoryPool.constprop.50+0x94>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005542:	f8d7 c014 	ldr.w	ip, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005546:	491c      	ldr	r1, [pc, #112]	; (80055b8 <chThdCreateFromMemoryPool.constprop.50+0x98>)
 8005548:	3b24      	subs	r3, #36	; 0x24
 800554a:	eb00 0b03 	add.w	fp, r0, r3
 800554e:	f8c0 b00c 	str.w	fp, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005552:	f04f 0e02 	mov.w	lr, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005556:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8005558:	f100 0224 	add.w	r2, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800555c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 800555e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8005562:	f04f 0a01 	mov.w	sl, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005566:	f8cb 9004 	str.w	r9, [fp, #4]
 800556a:	f8cb 1020 	str.w	r1, [fp, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800556e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005572:	6107      	str	r7, [r0, #16]
 8005574:	f8c0 c014 	str.w	ip, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8005578:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 800557c:	f880 a01e 	strb.w	sl, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005580:	f880 e01c 	strb.w	lr, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005584:	6178      	str	r0, [r7, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005586:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8005588:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 800558a:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800558c:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800558e:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005592:	6242      	str	r2, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8005594:	f880 e01d 	strb.w	lr, [r0, #29]
  tp->p_mpool = mp;
 8005598:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800559a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800559c:	6283      	str	r3, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 800559e:	f7fb fd1f 	bl	8000fe0 <chSchWakeupS>
 80055a2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80055a6:	4620      	mov	r0, r4
 80055a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	20000cc8 	.word	0x20000cc8
 80055b0:	20000b78 	.word	0x20000b78
 80055b4:	08003401 	.word	0x08003401
 80055b8:	080008f1 	.word	0x080008f1
 80055bc:	f3af 8000 	nop.w

080055c0 <chSemSignalWait.constprop.46>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80055c0:	b510      	push	{r4, lr}
 80055c2:	2320      	movs	r3, #32
 80055c4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0) {
 80055c8:	4c15      	ldr	r4, [pc, #84]	; (8005620 <chSemSignalWait.constprop.46+0x60>)
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	3301      	adds	r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	dd1b      	ble.n	800560c <chSemSignalWait.constprop.46+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < 0) {
 80055d4:	3b01      	subs	r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	60a3      	str	r3, [r4, #8]
 80055da:	4a11      	ldr	r2, [pc, #68]	; (8005620 <chSemSignalWait.constprop.46+0x60>)
 80055dc:	db06      	blt.n	80055ec <chSemSignalWait.constprop.46+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80055de:	f7fb fcd7 	bl	8000f90 <chSchRescheduleS>
    msg = MSG_OK;
 80055e2:	2000      	movs	r0, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80055ea:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= 0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 80055ec:	490d      	ldr	r1, [pc, #52]	; (8005624 <chSemSignalWait.constprop.46+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80055ee:	6853      	ldr	r3, [r2, #4]
 80055f0:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 80055f2:	2005      	movs	r0, #5
 80055f4:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tqp->p_prev = tp;
 80055f8:	6054      	str	r4, [r2, #4]
 80055fa:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 80055fc:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 80055fe:	f7fb fdaf 	bl	8001160 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8005602:	6a20      	ldr	r0, [r4, #32]
 8005604:	2300      	movs	r3, #0
 8005606:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800560a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800560c:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800560e:	6803      	ldr	r3, [r0, #0]
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	605c      	str	r4, [r3, #4]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8005614:	f7fb ff5c 	bl	80014d0 <chSchReadyI>
 8005618:	2200      	movs	r2, #0
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	6202      	str	r2, [r0, #32]
 800561e:	e7d9      	b.n	80055d4 <chSemSignalWait.constprop.46+0x14>
 8005620:	200008ac 	.word	0x200008ac
 8005624:	20000b78 	.word	0x20000b78
 8005628:	f3af 8000 	nop.w
 800562c:	f3af 8000 	nop.w

08005630 <chCondSignal.constprop.42>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8005630:	b508      	push	{r3, lr}
 8005632:	2320      	movs	r3, #32
 8005634:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <chCondSignal.constprop.42+0x24>)
 800563a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 800563c:	4298      	cmp	r0, r3
 800563e:	d005      	beq.n	800564c <chCondSignal.constprop.42+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005640:	6802      	ldr	r2, [r0, #0]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8005646:	2100      	movs	r1, #0
 8005648:	f7fb fcca 	bl	8000fe0 <chSchWakeupS>
 800564c:	2300      	movs	r3, #0
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	bd08      	pop	{r3, pc}
 8005654:	200008a4 	.word	0x200008a4
 8005658:	f3af 8000 	nop.w
 800565c:	f3af 8000 	nop.w

08005660 <chCondSignalI.constprop.41>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <chCondSignalI.constprop.41+0x20>)
 8005662:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8005664:	429a      	cmp	r2, r3
 8005666:	d00a      	beq.n	800567e <chCondSignalI.constprop.41+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005668:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 800566a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 800566c:	2400      	movs	r4, #0
 800566e:	604b      	str	r3, [r1, #4]
 8005670:	6214      	str	r4, [r2, #32]
 8005672:	6019      	str	r1, [r3, #0]
    chSchReadyI(tp);
 8005674:	4610      	mov	r0, r2
  }
}
 8005676:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 800567a:	f7fb bf29 	b.w	80014d0 <chSchReadyI>
 800567e:	4770      	bx	lr
 8005680:	200008a4 	.word	0x200008a4
 8005684:	f3af 8000 	nop.w
 8005688:	f3af 8000 	nop.w
 800568c:	f3af 8000 	nop.w

08005690 <chEvtGetAndClearEvents.constprop.33>:
 8005690:	2320      	movs	r3, #32
 8005692:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8005696:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <chEvtGetAndClearEvents.constprop.33+0x18>)
 8005698:	699a      	ldr	r2, [r3, #24]
  currp->p_epending &= ~events;
 800569a:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 800569c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800569e:	6353      	str	r3, [r2, #52]	; 0x34
 80056a0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000b78 	.word	0x20000b78
 80056ac:	f3af 8000 	nop.w

080056b0 <chEvtWaitOne.constprop.29>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <chEvtWaitOne.constprop.29+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 80056b2:	b510      	push	{r4, lr}
 80056b4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80056b6:	6994      	ldr	r4, [r2, #24]
 80056b8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 80056bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056be:	b933      	cbnz	r3, 80056ce <chEvtWaitOne.constprop.29+0x1e>
    ctp->p_u.ewmask = events;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80056c6:	200a      	movs	r0, #10
 80056c8:	f7fb fd4a 	bl	8001160 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80056cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 80056ce:	4258      	negs	r0, r3
 80056d0:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 80056d2:	ea23 0300 	bic.w	r3, r3, r0
 80056d6:	6363      	str	r3, [r4, #52]	; 0x34
 80056d8:	2300      	movs	r3, #0
 80056da:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	20000b78 	.word	0x20000b78
 80056e4:	f3af 8000 	nop.w
 80056e8:	f3af 8000 	nop.w
 80056ec:	f3af 8000 	nop.w

080056f0 <chEvtWaitAny.constprop.28>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80056f0:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <chEvtWaitAny.constprop.28+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 80056f2:	b510      	push	{r4, lr}
 80056f4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80056f6:	6994      	ldr	r4, [r2, #24]
 80056f8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
 80056fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80056fe:	b930      	cbnz	r0, 800570e <chEvtWaitAny.constprop.28+0x1e>
    ctp->p_u.ewmask = events;
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005704:	200a      	movs	r0, #10
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8005706:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005708:	f7fb fd2a 	bl	8001160 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800570c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800570e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005710:	ea23 0300 	bic.w	r3, r3, r0
 8005714:	6363      	str	r3, [r4, #52]	; 0x34
 8005716:	2300      	movs	r3, #0
 8005718:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop
 8005720:	20000b78 	.word	0x20000b78
	...

08005730 <chMBPost.constprop.14>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	2320      	movs	r3, #32
 8005734:	4606      	mov	r6, r0
 8005736:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800573a:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <chMBPost.constprop.14+0x40>)
 800573c:	f104 001c 	add.w	r0, r4, #28
 8005740:	f7fb fd96 	bl	8001270 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005744:	4605      	mov	r5, r0
 8005746:	b968      	cbnz	r0, 8005764 <chMBPost.constprop.14+0x34>
    *mbp->mb_wrptr++ = msg;
 8005748:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800574a:	6861      	ldr	r1, [r4, #4]
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 800574c:	4809      	ldr	r0, [pc, #36]	; (8005774 <chMBPost.constprop.14+0x44>)
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800574e:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8005750:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005752:	60a3      	str	r3, [r4, #8]
 8005754:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8005756:	bf24      	itt	cs
 8005758:	6823      	ldrcs	r3, [r4, #0]
 800575a:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 800575c:	f7fc fa78 	bl	8001c50 <chSemSignalI>
    chSchRescheduleS();
 8005760:	f7fb fc16 	bl	8000f90 <chSchRescheduleS>
 8005764:	2300      	movs	r3, #0
 8005766:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();

  return rdymsg;
}
 800576a:	4628      	mov	r0, r5
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	bf00      	nop
 8005770:	2000087c 	.word	0x2000087c
 8005774:	2000088c 	.word	0x2000088c
 8005778:	f3af 8000 	nop.w
 800577c:	f3af 8000 	nop.w

08005780 <chMBPostI.constprop.13>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <chMBPostI.constprop.13+0x34>)
 8005784:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
 8005786:	2a00      	cmp	r2, #0
 8005788:	dd10      	ble.n	80057ac <chMBPostI.constprop.13+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800578a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 800578c:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800578e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8005790:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8005792:	42a9      	cmp	r1, r5
 8005794:	625a      	str	r2, [r3, #36]	; 0x24
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8005796:	6099      	str	r1, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
    mbp->mb_wrptr = mbp->mb_buffer;
 8005798:	bf28      	it	cs
 800579a:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800579c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
    mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 800579e:	4806      	ldr	r0, [pc, #24]	; (80057b8 <chMBPostI.constprop.13+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
    mbp->mb_wrptr = mbp->mb_buffer;
 80057a0:	bf28      	it	cs
 80057a2:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 80057a4:	f7fc fa54 	bl	8001c50 <chSemSignalI>

  return MSG_OK;
 80057a8:	2000      	movs	r0, #0
 80057aa:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
    mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	bf00      	nop
 80057b4:	2000087c 	.word	0x2000087c
 80057b8:	2000088c 	.word	0x2000088c
 80057bc:	f3af 8000 	nop.w

080057c0 <chMBPostAhead.constprop.12>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t time) {
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	2320      	movs	r3, #32
 80057c4:	4606      	mov	r6, r0
 80057c6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 80057ca:	4c0e      	ldr	r4, [pc, #56]	; (8005804 <chMBPostAhead.constprop.12+0x44>)
 80057cc:	f104 001c 	add.w	r0, r4, #28
 80057d0:	f7fb fd4e 	bl	8001270 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80057d4:	4605      	mov	r5, r0
 80057d6:	b958      	cbnz	r0, 80057f0 <chMBPostAhead.constprop.12+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 80057d8:	68e3      	ldr	r3, [r4, #12]
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	3b04      	subs	r3, #4
 80057de:	4293      	cmp	r3, r2
 80057e0:	60e3      	str	r3, [r4, #12]
 80057e2:	d30a      	bcc.n	80057fa <chMBPostAhead.constprop.12+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 80057e4:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80057e6:	4808      	ldr	r0, [pc, #32]	; (8005808 <chMBPostAhead.constprop.12+0x48>)
 80057e8:	f7fc fa32 	bl	8001c50 <chSemSignalI>
    chSchRescheduleS();
 80057ec:	f7fb fbd0 	bl	8000f90 <chSchRescheduleS>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, time);
  chSysUnlock();

  return rdymsg;
}
 80057f6:	4628      	mov	r0, r5
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	3b04      	subs	r3, #4
 80057fe:	60e3      	str	r3, [r4, #12]
 8005800:	e7f0      	b.n	80057e4 <chMBPostAhead.constprop.12+0x24>
 8005802:	bf00      	nop
 8005804:	2000087c 	.word	0x2000087c
 8005808:	2000088c 	.word	0x2000088c
 800580c:	f3af 8000 	nop.w

08005810 <chMBPostAheadI.constprop.11>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8005810:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <chMBPostAheadI.constprop.11+0x34>)
 8005812:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
 8005814:	2900      	cmp	r1, #0
 8005816:	dd11      	ble.n	800583c <chMBPostAheadI.constprop.11+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8005818:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800581a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800581c:	6814      	ldr	r4, [r2, #0]
 800581e:	3b04      	subs	r3, #4
 8005820:	3901      	subs	r1, #1
 8005822:	42a3      	cmp	r3, r4
 8005824:	6251      	str	r1, [r2, #36]	; 0x24
 8005826:	60d3      	str	r3, [r2, #12]
 8005828:	d202      	bcs.n	8005830 <chMBPostAheadI.constprop.11+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800582a:	6853      	ldr	r3, [r2, #4]
 800582c:	3b04      	subs	r3, #4
 800582e:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 8005830:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8005832:	4805      	ldr	r0, [pc, #20]	; (8005848 <chMBPostAheadI.constprop.11+0x38>)
 8005834:	f7fc fa0c 	bl	8001c50 <chSemSignalI>

  return MSG_OK;
 8005838:	2000      	movs	r0, #0
 800583a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0) {
    return MSG_TIMEOUT;
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000087c 	.word	0x2000087c
 8005848:	2000088c 	.word	0x2000088c
 800584c:	f3af 8000 	nop.w

08005850 <chMBFetch.constprop.10>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	2320      	movs	r3, #32
 8005854:	4606      	mov	r6, r0
 8005856:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 800585a:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <chMBFetch.constprop.10+0x40>)
 800585c:	f104 0010 	add.w	r0, r4, #16
 8005860:	f7fb fd06 	bl	8001270 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005864:	4605      	mov	r5, r0
 8005866:	b970      	cbnz	r0, 8005886 <chMBFetch.constprop.10+0x36>
    *msgp = *mbp->mb_rdptr++;
 8005868:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 800586a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 800586c:	6819      	ldr	r1, [r3, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 800586e:	4809      	ldr	r0, [pc, #36]	; (8005894 <chMBFetch.constprop.10+0x44>)
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005870:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8005872:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005874:	60e3      	str	r3, [r4, #12]
 8005876:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8005878:	bf24      	itt	cs
 800587a:	6823      	ldrcs	r3, [r4, #0]
 800587c:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 800587e:	f7fc f9e7 	bl	8001c50 <chSemSignalI>
    chSchRescheduleS();
 8005882:	f7fb fb85 	bl	8000f90 <chSchRescheduleS>
 8005886:	2300      	movs	r3, #0
 8005888:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();

  return rdymsg;
}
 800588c:	4628      	mov	r0, r5
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	2000087c 	.word	0x2000087c
 8005894:	20000898 	.word	0x20000898
	...

080058a0 <chMBFetchI.constprop.9>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <chMBFetchI.constprop.9+0x34>)
 80058a2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0) {
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	dd12      	ble.n	80058ce <chMBFetchI.constprop.9+0x2e>
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80058a8:	b510      	push	{r4, lr}
 80058aa:	1e51      	subs	r1, r2, #1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	6199      	str	r1, [r3, #24]
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80058b0:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80058b2:	6814      	ldr	r4, [r2, #0]
 80058b4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80058b6:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80058bc:	bf28      	it	cs
 80058be:	681a      	ldrcs	r2, [r3, #0]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <chMBFetchI.constprop.9+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80058c2:	bf28      	it	cs
 80058c4:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80058c6:	f7fc f9c3 	bl	8001c50 <chSemSignalI>

  return MSG_OK;
 80058ca:	2000      	movs	r0, #0
 80058cc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0) {
    return MSG_TIMEOUT;
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	4770      	bx	lr
 80058d4:	2000087c 	.word	0x2000087c
 80058d8:	20000898 	.word	0x20000898
 80058dc:	00000000 	.word	0x00000000

080058e0 <test_start_timer.constprop.3>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 80058e0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <test_start_timer.constprop.3+0x30>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	2320      	movs	r3, #32
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	4809      	ldr	r0, [pc, #36]	; (8005914 <test_start_timer.constprop.3+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80058f0:	68c3      	ldr	r3, [r0, #12]
 80058f2:	b10b      	cbz	r3, 80058f8 <test_start_timer.constprop.3+0x18>
    chVTDoResetI(vtp);
 80058f4:	f7fb fadc 	bl	8000eb0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80058f8:	4806      	ldr	r0, [pc, #24]	; (8005914 <test_start_timer.constprop.3+0x34>)
 80058fa:	4a07      	ldr	r2, [pc, #28]	; (8005918 <test_start_timer.constprop.3+0x38>)
 80058fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8005900:	2300      	movs	r3, #0
 8005902:	f7fb fb05 	bl	8000f10 <chVTDoSetI>
 8005906:	2300      	movs	r3, #0
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	bd08      	pop	{r3, pc}
 800590e:	bf00      	nop
 8005910:	20000b70 	.word	0x20000b70
 8005914:	20000cf8 	.word	0x20000cf8
 8005918:	08000911 	.word	0x08000911
 800591c:	f3af 8000 	nop.w
 8005920:	656c6469 	.word	0x656c6469
 8005924:	00000000 	.word	0x00000000
 8005928:	00000a0d 	.word	0x00000a0d
 800592c:	00000044 	.word	0x00000044
 8005930:	00000041 	.word	0x00000041
 8005934:	00000042 	.word	0x00000042
 8005938:	00000043 	.word	0x00000043
 800593c:	44434241 	.word	0x44434241
 8005940:	00000045 	.word	0x00000045
	...

08005950 <testmtx4>:
 8005950:	0800639c 08003c21 00000000 08003d81     .c..!<.......=..

08005960 <testmtx8>:
 8005960:	08006348 080048e1 00000000 080050f1     Hc...H.......P..

08005970 <testmtx6>:
 8005970:	08006374 08003bf1 00000000 08005391     tc...;.......S..

08005980 <testmtx7>:
 8005980:	0800635c 08004911 00000000 080052a1     \c...I.......R..

08005990 <patternmsg>:
 8005990:	080059a0 00000000 00000000 00000000     .Y..............

080059a0 <testmsg1>:
 80059a0:	08006338 00000000 00000000 08005051     8c..........QP..

080059b0 <patternmbox>:
 80059b0:	08005c00 00000000 00000000 00000000     .\..............

080059c0 <patternbmk>:
 80059c0:	08005b10 08005b20 08005b30 08005b40     .[.. [..0[..@[..
 80059d0:	08005b50 08005a90 08005b70 08005b60     P[...Z..p[..`[..
 80059e0:	08005b90 08005ad0 08005ae0 08005af0     .[...Z...Z...Z..
 80059f0:	08005b00 00000000 00000000 00000000     .[..............

08005a00 <ch_debug>:
 8005a00:	6e69616d 18001600 08440404 1814100c     main......D.....
 8005a10:	1e1d1c00 00000000 00000000 00000000     ................

08005a20 <testevt2>:
 8005a20:	080062d8 08003891 00000000 080038a1     .b...8.......8..

08005a30 <patterndyn>:
 8005a30:	08005be0 08005bf0 08005a60 00000000     .[...[..`Z......

08005a40 <vmt>:
 8005a40:	08002051 08002031 08002091 08002071     Q ..1 ... ..q ..
 8005a50:	08002081 08002061 08002041 08002021     . ..a ..A ..! ..

08005a60 <testdyn3>:
 8005a60:	080061fc 08002431 00000000 08003061     .a..1$......a0..

08005a70 <testsem1>:
 8005a70:	08006434 08003c71 00000000 08004541     4d..q<......AE..

08005a80 <testsem2>:
 8005a80:	08006420 08003c61 00000000 080043c1      d..a<.......C..

08005a90 <testbmk6>:
 8005a90:	08006128 00000000 00000000 08002571     (a..........q%..

08005aa0 <testsem4>:
 8005aa0:	080063dc 00000000 00000000 080041b1     .c...........A..

08005ab0 <testheap1>:
 8005ab0:	0800629c 08003211 00000000 080034e1     .b...2.......4..

08005ac0 <testthd2>:
 8005ac0:	08006478 00000000 00000000 080019a1     xd..............

08005ad0 <testbmk10>:
 8005ad0:	0800608c 00000000 00000000 08002321     .`..........!#..

08005ae0 <testbmk11>:
 8005ae0:	08006068 08001dd1 00000000 080022b1     h`..........."..

08005af0 <testbmk12>:
 8005af0:	08006048 08001dc1 00000000 08002191     H`...........!..

08005b00 <testbmk13>:
 8005b00:	0800602c 00000000 00000000 080020a1     ,`........... ..

08005b10 <testbmk1>:
 8005b10:	080061b4 00000000 00000000 08002a51     .a..........Q*..

08005b20 <testbmk2>:
 8005b20:	0800619c 00000000 00000000 080029e1     .a...........)..

08005b30 <testbmk3>:
 8005b30:	08006184 00000000 00000000 08002901     .a...........)..

08005b40 <testbmk4>:
 8005b40:	08006168 00000000 00000000 080027b1     ha...........'..

08005b50 <testbmk5>:
 8005b50:	08006148 00000000 00000000 08002741     Ha..........A'..

08005b60 <testbmk8>:
 8005b60:	080060d4 00000000 00000000 08002461     .`..........a$..

08005b70 <testbmk7>:
 8005b70:	08006100 080023a1 00000000 08002611     .a...#.......&..

08005b80 <testpools1>:
 8005b80:	08006280 080031f1 00000000 08003241     .b...1......A2..

08005b90 <testbmk9>:
 8005b90:	080060b0 00000000 00000000 08002201     .`..........."..

08005ba0 <testmtx5>:
 8005ba0:	0800638c 08003c11 00000000 08003c81     .c...<.......<..

08005bb0 <patterns>:
 8005bb0:	08005c40 08005cc0 08005d00 08005990     @\...\...]...Y..
 8005bc0:	080059b0 08005c10 08005c20 080064c0     .Y...\.. \...d..
 8005bd0:	08005a30 08005c30 080059c0 00000000     0Z..0\...Y......

08005be0 <testdyn1>:
 8005be0:	08006254 080031b1 00000000 08003411     Tb...1.......4..

08005bf0 <testdyn2>:
 8005bf0:	08006224 08003191 00000000 08003311     $b...1.......3..

08005c00 <testmbox1>:
 8005c00:	08006318 080048a1 00000000 08004a51     .c...H......QJ..

08005c10 <patternevt>:
 8005c10:	08005ce0 08005a20 08005cf0 00000000     .\.. Z...\......

08005c20 <patternheap>:
 8005c20:	08005ab0 00000000 00000000 00000000     .Z..............

08005c30 <patternqueues>:
 8005c30:	08005c60 08005c70 00000000 00000000     `\..p\..........

08005c40 <patternthd>:
 8005c40:	08005c80 08005ac0 08005ca0 08005cb0     .\...Z...\...\..
	...

08005c60 <testqueues1>:
 8005c60:	080061e4 08002401 00000000 08002d71     .a...$......q-..

08005c70 <testqueues2>:
 8005c70:	080061cc 080023d1 00000000 08002ae1     .a...#.......*..

08005c80 <testthd1>:
 8005c80:	08006494 00000000 00000000 08001af1     .d..............

08005c90 <testsem3>:
 8005c90:	08006400 08003c51 00000000 08004311     .d..Q<.......C..

08005ca0 <testthd3>:
 8005ca0:	0800645c 00000000 00000000 08004771     \d..........qG..

08005cb0 <testthd4>:
 8005cb0:	0800644c 00000000 00000000 080046b1     Ld...........F..

08005cc0 <patternsem>:
 8005cc0:	08005a70 08005a80 08005c90 08005aa0     pZ...Z...\...Z..
	...

08005ce0 <testevt1>:
 8005ce0:	080062f4 08004a41 00000000 08004931     .b..AJ......1I..

08005cf0 <testevt3>:
 8005cf0:	080062c4 08003881 00000000 08003721     .b...8......!7..

08005d00 <patternmtx>:
 8005d00:	080064b0 08005950 08005ba0 08005970     .d..PY...[..pY..
 8005d10:	08005980 08005960 00000000 00000000     .Y..`Y..........
 8005d20:	6e696c62 0072656b 202d2d2d 74737953     blinker.--- Syst
 8005d30:	203a6d65 00000000 74796220 00007365     em: .... bytes..
 8005d40:	202d2d2d 65726854 203a6461 00000000     --- Thread: ....
 8005d50:	202d2d2d 656d6954 203a2072 00000000     --- Timer : ....
 8005d60:	202d2d2d 616d6553 203a6870 00000000     --- Semaph: ....
 8005d70:	202d2d2d 6e657645 203a5374 00000000     --- EventS: ....
 8005d80:	202d2d2d 6e657645 203a4c74 00000000     --- EventL: ....
 8005d90:	202d2d2d 6574754d 203a2078 00000000     --- Mutex : ....
 8005da0:	202d2d2d 646e6f43 203a2e56 00000000     --- CondV.: ....
 8005db0:	202d2d2d 75657551 203a2065 00000000     --- Queue : ....
 8005dc0:	202d2d2d 6c69614d 203a2e42 00000000     --- MailB.: ....
 8005dd0:	202d2d2d 726f6353 203a2065 00000000     --- Score : ....
 8005de0:	636f6c20 6e752b6b 6b636f6c 0000532f      lock+unlock/S..
 8005df0:	74796220 532f7365 00000000 69617720      bytes/S.... wai
 8005e00:	69732b74 6c616e67 0000532f 6d697420     t+signal/S.. tim
 8005e10:	2f737265 00000053 202a2a2a 6e72654b     ers/S...*** Kern
 8005e20:	203a6c65 20202020 00002020 202a2a2a     el:       ..*** 
 8005e30:	706d6f43 64656c69 2020203a 00002020     Compiled:     ..
 8005e40:	202a2a2a 706d6f43 72656c69 2020203a     *** Compiler:   
 8005e50:	00002020 202a2a2a 68637241 63657469       ..*** Architec
 8005e60:	65727574 0000203a 202a2a2a 65726f43     ture: ..*** Core
 8005e70:	72615620 746e6169 0000203a 202a2a2a      Variant: ..*** 
 8005e80:	74726f50 666e4920 20203a6f 00002020     Port Info:    ..
 8005e90:	202a2a2a 74616c50 6d726f66 2020203a     *** Platform:   
 8005ea0:	00002020 202a2a2a 74736554 616f4220       ..*** Test Boa
 8005eb0:	203a6472 00002020 202d2d2d 74736554     rd:   ..--- Test
 8005ec0:	73614320 00002065 00002820 202d2d2d      Case .. (..--- 
 8005ed0:	75736552 203a746c 4c494146 20455255     Result: FAILURE 
 8005ee0:	00002328 00005b20 616e6946 6572206c     (#.. [..Final re
 8005ef0:	746c7573 0000203a 202a2a2a 62696843     sult: ..*** Chib
 8005f00:	2f534f69 74205452 20747365 74697573     iOS/RT test suit
 8005f10:	00000065 002a2a2a 00000029 0000295d     e...***.)...])..
 8005f20:	202d2d2d 75736552 203a746c 43435553     --- Result: SUCC
 8005f30:	00535345 4c494146 00455255 2e302e33     ESS.FAILURE.3.0.
 8005f40:	76656430 00000000 2072614d 32203131     0dev....Mar 11 2
 8005f50:	20353130 3731202d 3a38353a 00003731     015 - 17:58:17..
 8005f60:	20434347 2e392e34 30322033 31313431     GCC 4.9.3 201411
 8005f70:	28203931 656c6572 29657361 52415b20     19 (release) [AR
 8005f80:	6d652f4d 64646562 342d6465 622d395f     M/embedded-4_9-b
 8005f90:	636e6172 65722068 69736976 32206e6f     ranch revision 2
 8005fa0:	37323831 00005d38 764d5241 454d2d37     18278]..ARMv7-ME
 8005fb0:	00000000 74726f43 4d2d7865 00000034     ....Cortex-M4...
 8005fc0:	61766441 6465636e 72656b20 206c656e     Advanced kernel 
 8005fd0:	65646f6d 00000000 334d5453 31344632     mode....STM32F41
 8005fe0:	20457831 68676948 72655020 6d726f66     1xE High Perform
 8005ff0:	65636e61 74697720 53442068 6e612050     ance with DSP an
 8006000:	50462064 00000055 694d5453 656f7263     d FPU...STMicroe
 8006010:	7463656c 696e6f72 4e207363 454c4355     lectronics NUCLE
 8006020:	34462d4f 45523131 00000000 636e6542     O-F411RE....Benc
 8006030:	72616d68 52202c6b 66204d41 70746f6f     hmark, RAM footp
 8006040:	746e6972 00000000 636e6542 72616d68     rint....Benchmar
 8006050:	6d202c6b 78657475 6c207365 2f6b636f     k, mutexes lock/
 8006060:	6f6c6e75 00006b63 636e6542 72616d68     unlock..Benchmar
 8006070:	73202c6b 70616d65 65726f68 61772073     k, semaphores wa
 8006080:	732f7469 616e6769 0000006c 636e6542     it/signal...Benc
 8006090:	72616d68 76202c6b 75747269 74206c61     hmark, virtual t
 80060a0:	72656d69 65732073 65722f74 00746573     imers set/reset.
 80060b0:	636e6542 72616d68 49202c6b 51204f2f     Benchmark, I/O Q
 80060c0:	65756575 68742073 67756f72 74757068     ueues throughput
 80060d0:	00000000 636e6542 72616d68 72202c6b     ....Benchmark, r
 80060e0:	646e756f 626f7220 63206e69 65746e6f     ound robin conte
 80060f0:	73207478 63746977 676e6968 00000000     xt switching....
 8006100:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 8006110:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 8006120:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 8006130:	74202c6b 61657268 202c7364 61657263     k, threads, crea
 8006140:	6f206574 00796c6e 636e6542 72616d68     te only.Benchmar
 8006150:	74202c6b 61657268 202c7364 6c6c7566     k, threads, full
 8006160:	63796320 0000656c 636e6542 72616d68      cycle..Benchmar
 8006170:	63202c6b 65746e6f 73207478 63746977     k, context switc
 8006180:	00000068 636e6542 72616d68 6d202c6b     h...Benchmark, m
 8006190:	61737365 20736567 00003323 636e6542     essages #3..Benc
 80061a0:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 80061b0:	00003223 636e6542 72616d68 6d202c6b     #2..Benchmark, m
 80061c0:	61737365 20736567 00003123 75657551     essages #1..Queu
 80061d0:	202c7365 7074756f 71207475 65756575     es, output queue
 80061e0:	00000073 75657551 202c7365 75706e69     s...Queues, inpu
 80061f0:	75712074 73657565 00000000 616e7944     t queues....Dyna
 8006200:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 8006210:	61207972 7220646e 72656665 65636e65     ry and reference
 8006220:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 8006230:	6874202c 64616572 72632073 69746165     , threads creati
 8006240:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 8006250:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 8006260:	6874202c 64616572 72632073 69746165     , threads creati
 8006270:	66206e6f 206d6f72 70616568 00000000     on from heap....
 8006280:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 8006290:	2f657565 75716564 00657565 70616548     eue/dequeue.Heap
 80062a0:	6c61202c 61636f6c 6e6f6974 646e6120     , allocation and
 80062b0:	61726620 6e656d67 69746174 74206e6f      fragmentation t
 80062c0:	00747365 6e657645 202c7374 656d6974     est.Events, time
 80062d0:	7374756f 00000000 6e657645 202c7374     outs....Events, 
 80062e0:	74696177 646e6120 6f726220 61636461     wait and broadca
 80062f0:	00007473 6e657645 202c7374 69676572     st..Events, regi
 8006300:	61727473 6e6f6974 646e6120 73696420     stration and dis
 8006310:	63746170 00000068 6c69614d 65786f62     patch...Mailboxe
 8006320:	71202c73 69756575 6120676e 7420646e     s, queuing and t
 8006330:	6f656d69 00737475 7373654d 73656761     imeouts.Messages
 8006340:	6f6c202c 0000706f 646e6f43 2c726156     , loop..CondVar,
 8006350:	6f6f6220 74207473 00747365 646e6f43      boost test.Cond
 8006360:	2c726156 6f726220 61636461 74207473     Var, broadcast t
 8006370:	00747365 646e6f43 2c726156 67697320     est.CondVar, sig
 8006380:	206c616e 74736574 00000000 6574754d     nal test....Mute
 8006390:	2c736578 61747320 00737574 6574754d     xes, status.Mute
 80063a0:	2c736578 69727020 7469726f 65722079     xes, priority re
 80063b0:	6e727574 00000000 6574754d 2c736578     turn....Mutexes,
 80063c0:	69727020 7469726f 6e652079 75657571      priority enqueu
 80063d0:	20676e69 74736574 00000000 616e6942     ing test....Bina
 80063e0:	53207972 70616d65 65726f68 66202c73     ry Semaphores, f
 80063f0:	74636e75 616e6f69 7974696c 00000000     unctionality....
 8006400:	616d6553 726f6870 202c7365 6d6f7461     Semaphores, atom
 8006410:	73206369 616e6769 61772d6c 00007469     ic signal-wait..
 8006420:	616d6553 726f6870 202c7365 656d6974     Semaphores, time
 8006430:	0074756f 616d6553 726f6870 202c7365     out.Semaphores, 
 8006440:	75716e65 6e697565 00000067 65726854     enqueuing...Thre
 8006450:	2c736461 6c656420 00737961 65726854     ads, delays.Thre
 8006460:	2c736461 69727020 7469726f 68632079     ads, priority ch
 8006470:	65676e61 00000000 65726854 2c736461     ange....Threads,
 8006480:	716e6520 69756575 7420676e 20747365      enqueuing test 
 8006490:	00003223 65726854 2c736461 716e6520     #2..Threads, enq
 80064a0:	69756575 7420676e 20747365 00003123     ueuing test #1..

080064b0 <testmtx1>:
 80064b0:	080063b8 08003c41 00000000 08004021     .c..A<......!@..

080064c0 <patternpools>:
 80064c0:	08005b80 00000000 00000000 00000000     .[..............

080064d0 <wa>:
 80064d0:	20000d10 20000e58 20000fa0 200010e8     ... X.. ... ... 
 80064e0:	20001230 00000000 00000000 00000000     0.. ............
 80064f0:	78746320 2f637773 00000053 72687420      ctxswc/S... thr
 8006500:	73646165 0000532f 73657220 64656863     eads/S.. resched
 8006510:	73656c75 202c532f 00000000 67736d20     ules/S, .... msg
 8006520:	2c532f73 00000020 44434241 00000000     s/S, ...ABCD....
 8006530:	00004241 00000000 00000000 00000000     AB..............
 8006540:	00434241 00000000 00000000 00000000     ABC.............

08006550 <evhndl>:
 8006550:	08004a31 08004a21 08004a11              1J..!J...J..
